<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <CheatEntries>
    <CheatEntry>
      <ID>11</ID>
      <Description>"---config"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"server title"</Description>
          <VariableType>String</VariableType>
          <Length>32</Length>
          <Unicode>0</Unicode>
          <CodePage>0</CodePage>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>subrosadedicated.exe+8B12554</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"max players"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8B12968</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>86</ID>
          <Description>"game mode"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8ED1548</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>87</ID>
              <Description>"resetgame override (mode switch fix)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

subrosadedicated.exe+861DE:
db 90  90  90 90 90 90
 
[DISABLE]

subrosadedicated.exe+861DE:
mov [subrosadedicated.exe+8ED1548],ecx

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"version letter"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8B3F4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>112</ID>
      <Description>"=========== S3 2019 ================"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>141</ID>
          <Description>"!!! S3 !!! - original"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(duels_spawn1_x,1177.5)
define(duels_spawn1_y,69.0)
define(duels_spawn1_z,1779.8)
  define(duels_spawn2_x,1261.2)
  define(duels_spawn2_y,69.0)
  define(duels_spawn2_z,1779.8)
     define(duels_floor,68.25)
     define(duels_ceil,69.8)
define(duels_mags,7)
define(duels_time,#14400) //3.5 minutes
define(duels_prep,#350)

define(s3round_time,#25200) //7 minutes
define(s3round_days,5)
define(s3round_cash_base,#500)
define(s3round_cash_inc,#500)

define(race_car_type,#0) //town car
define(race_time_max,#12600) //3.5 minutes
//define(race_spacing_width,4.5)
define(race_spacing_width,3.0)
define(race_spacing_depth,7.5)
define(race_spacing_columns_bitmask,7)
define(race_spacing_columns_bits,3)
//define(race_spacing_columns_bitmask,3)
//define(race_spacing_columns_bits,2)
define(race_checkpoint_radius,50.0)


define(vanilla_mission_spawn_time,#5400) //#3600 in previous versions
//----------------------------------

define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_phone,30)
define(p_admin,34)
define(p_acc,3C)
define(p_ready,48)
define(p_cash,4C)
define(p_team,74)
define(p_stocks,7C)
define(p_h,88)
define(p_skin,3798)
define(p_suit_color,37AC)
define(p_slot0,17E0)
define(p_slot_item1,4)
define(p_slot_item2,10)
define(p_slots,64)
define(p_slots_max,7)
define(ps,381C)
define(players_max,#255)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_car,20)
define(h_seat,24)
define(h_pos,74)
define(h_controls,1B4)
define(h_health0,34)
define(h_grounded,70)
define(h_bp0_pb,1C0)
define(h_bp0_pos,1C4)
define(h_bps,120)
define(h_health1,32A0)
define(h_health2,32A4)
define(h_skin,34D8)
define(h_suit_color,34EC)
define(h_slot0,3038)
define(h_slot1,3060)
define(h_slot2,3088)
define(h_slots,28)
define(h_slots_max,7)
define(hs,3540)
define(humans_max,#255)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)

define(it0,subrosadedicated.exe+192D1560)
define(it_cost,0)
define(it_gun,8)
define(it_capacity,1C)
define(it_name,28)
define(its,D88)

define(corp0,subrosadedicated.exe+8ED17F4)
define(corp_enabled,54)
define(corp_spawnpos,18)
define(corp_m_type,A0)
define(corp_m_provided,DC)
define(corps,15e4)

define(corp_names,subrosadedicated.exe+8B460)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)
define(game_timer2,subrosadedicated.exe+8ED176C+4)
define(game_counter,subrosadedicated.exe+8ED175C)
define(game_reset,subrosadedicated.exe+8B1298C)
define(game_mode,subrosadedicated.exe+8ED1548)
define(game_weekday,subrosadedicated.exe+8ED175C)
define(game_daytime,subrosadedicated.exe+33E58A20)

define(message_func,subrosadedicated.exe+7450)



define(human_spawn_func,subrosadedicated.exe+74760)
               //(float* position, float* rotation, int player_id)

define(arm_func,subrosadedicated.exe+4D4B0)
               //(character, weapon, amount of mags)
define(vehicle_spawn_func,subrosadedicated.exe+48860)
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)
define(item_spawn_func,subrosadedicated.exe+44880)
               //(int item_type, float *pos, [float* velocity], float *orientation)

//define(grab_item_func,subrosadedicated.exe+22C40)
define(grab_item_func,subrosadedicated.exe+45120)
               //(item_id, idk, character, slot)

define(player_sync_func,subrosadedicated.exe+7690)
define(player_sync_cash_func,subrosadedicated.exe+7800)

define(item_sync_func,subrosadedicated.exe+7570)

define(create_player_func,subrosadedicated.exe+31B50)

[ENABLE]










alloc(mydata,32768)
define(heaven_points,mydata+0)
define(tmp1,mydata+90)
define(tmp2,mydata+94)
define(tmp3,mydata+98)
define(tmp4,mydata+9C)
define(custom_game,mydata+80)
define(timer_locked,mydata+88)

define(race_checkpoint_count,mydata+7C)
define(rcp0,mydata+120)
define(rcp_pos,8)
define(rcp_color,4)
define(rcp_name_p,0)
define(rcp__sizeof,20)
define(race_checkpoint_leading,mydata+94)
define(race_players_finished,mydata+98)
define(race_players_spawned,mydata+9C)
//define(race_best_time,mydata2+840)
//define(race_best_name,mydata2+850)
define(race_spawn_point,mydata+104)
define(race_finished_at,mydata+100)
define(s3round_shift_scores,mydata+60)
  define(GAME_NONE,0)
  define(GAME_S3ROUND,1)
  define(GAME_RACE,2)
  define(GAME_DUELS,4)
  define(GAME_FINAL,5)
//--- s3 teams
define(s3t0,mydata+700)
define(s3t_dq,0)
define(s3t_playing,4)
define(s3t_captain,8)
define(s3t_tag,20)
define(s3t_name,30)
define(s3ts,50)
define(s3tmax,#16)
//--- s3 participants
define(s3p0,mydata+D00)
define(s3p_team,4)
define(s3p_sub,C)
define(s3p_name,20)
define(s3ps,40)
define(s3tmax,#96)
//--- player extras
define(p20,mydata+2600)
define(p2_s3p,0)
define(p2_duels_gun_progress,10)
define(p2_duels_gun_last,14)
define(p2_duels_bounds_timer,18)
define(p2_race_checkpoint,20)
define(p2s,30)

alloc(tmpbuffer,8192)
define(tmpbuffer_size,#8192)
alloc(tmpbuffer2,8192)
define(tmpbuffer2_size,#8192)
alloc(strings,8192)
strings:
label(s_newline)
s_newline:
db D A 0
label(s_comma)
s_comma:
db ',' 0
label(s_teams_filepath)
s_teams_filepath:
db 's' 33 '_' 't' 'e' 'a' 'm' 's' '.' 't' 'x' 't' 0
label(s_players_filepath)
s_players_filepath:
db 's' 33 '_' 'p' 'l' 'a' 'y' 'e' 'r' 's' '.' 't' 'x' 't' 0

label(s_format_bounds)
s_format_bounds:
db '%' 'i' ' ' '!' '!' '!' 0
label(s_posformat)
s_posformat:
db 'p' 'o' 's' ':' ' ' '%' 'f' ',' ' ' '%' 'f' ',' ' ' '%' 'f' 0
label(s_2s)
s_2s:
  db '%' 's' '%' 's' 0
label(s_timetest)
s_timetest:
db '%' 30 32 'i' ':' '%' 30 32 'i'  '.' '%' 'i' 0
label(s_timerlocked)
s_timerlocked:
db 'T' 'i' 'm' 'e' 'r' ' ' 'l' 'o' 'c' 'k' 'e' 'd' '.' 0
label(s_timerunlocked)
s_timerunlocked:
db 'T' 'i' 'm' 'e' 'r' ' ' 'u' 'n' 'l' 'o' 'c' 'k' 'e' 'd' '.' 0
label(s_s3round_day)
s_s3round_day:
db 'D' 'a' 'y' ' ' '%' 'i' ' ' 'o' 'u' 't' ' ' 'o' 'f' ' ' '%' 'i' '.' ' ' 'C' 'a' 's' 'h' ':' ' ' '$' '%' 'i' '.' 0
label(s_duels_win)
s_duels_win:
db '%' 's' ' ' 'w' 'i' 'n' 's' '!' ' ' '(' '%' 's' ')' 0

label(s_cp)
s_cp:
db '%' 'i' ' ' '/' ' ' '%' 'i' '.' ' ' 'n' 'e' 'x' 't' ' ' 's' 't' 'o' 'p' ':' ' ' '%' 's' 0
label(s_lead)
s_lead:
db '%' 's' ' ' 'i' 'n' ' ' 't' 'h' 'e' ' ' 'l' 'e' 'a' 'd' '.' ' ' '(' '%' 's' ')' 0
label(s_won)
s_won:
db '%' 's' ' ' 'w' 'o' 'n' '!' '!' '!' ' ' 't' 'i' 'm' 'e' ':' ' ' '%' 's' 0
label(s_finish)
s_finish:
db '%' 'i' '.' ' ' '%' 's' '.' ' ' ' ' ' ' '%' 's' 0
label(s_hp)
s_hp:
db '%' 'i' '/' '%' 'i' ' ' 'h' 'p' 0
label(s_first)
s_first:
db 'f' 'i' 'r' 's' 't' ' ' 'c' 'h' 'e' 'c' 'k' 'p' 'o' 'i' 'n' 't' ':' ' ' '%' 's' 0
label(s_best)
s_best:
db 'B' 'e' 's' 't' ' ' 't' 'i' 'm' 'e' ':' ' ' ' ' '%' 's' ' ' ' ' 'b' 'y' ' ' '%' 's' 0
label(s_lumber)
s_lumber:
db 'L' 'u' 'm' 'b' 'e' 'r' ' ' 'M' 'i' 'l' 'l' 0
label(s_cityhall)
s_cityhall:
db 'C' 'i' 't' 'y' ' ' 'h' 'a' 'l' 'l' ' ' '(' 'b' 'e' 'h' 'i' 'n' 'd' ' ' 'E' 'l' 'e' 'p' 'h' 'a' 'n' 't' ')' 0
label(s_goldmen)
s_goldmen:
db 'G' 'o' 'l' 'd' 'm' 'e' 'n' 0
label(s_monsota)
s_monsota:
db 'M' 'o' 'n' 's' 'o' 't' 'a' 0
label(s_oxs)
s_oxs:
db 'O' 'X' 'S' ' ' 'b' 'a' 's' 'e' 0
label(s_water)
s_water:
db 'W' 'a' 't' 'e' 'r' ' ' 'T' 'r' 'e' 'a' 't' 'm' 'e' 'n' 't' 0

label(s_log_s3)
s_log_s3:
  db 'l' 'o' 'g' 's' '_' 's' '3' '.' 't' 'x' 't' 0
label(s_a)
s_a:
  db 'a' 'b' 0
label(s_w)
s_w:
  db 'w' 'b' 0
label(s_r)
s_r:
  db 'r' 'b' 0
label(s_rp)
s_rp:
  db 'r' '+' 0
label(s_format_logteamcash)
s_format_logteamcash:
  db '%' 'i' '.' ' ' '%' 's' ' ' '$' '%' 'i' ' ' '(' '+' '$' '%' 'i' ')' 0


label(s_delim)
s_delim:
  db ',' 0
label(s_pos)
s_pos:
db '/' 'p' 'o' 's' 0
label(s_bot)
s_bot:
db '/' 'b' 'o' 't' 0
label(s_rg)
s_rg:
db '/' 'r' 'g' 0
label(s_skip)
s_skip:
db '/' 's' 'k' 'i' 'p' 0
label(s_op)
s_op:
db '/' 'o' 'p' 0
label(s_rn)
s_rn:
db '/' 'r' 'n' 0
label(s_pre)
s_pre:
db '/' 'p' 'r' 'e' 0
label(s_mv)
s_mv:
db '/' 'm' 'v' 0
label(s_shift)
s_shift:
  db '/' 's' 'h' 'i' 'f' 't' 0
label(s_kill)
s_kill:
  db '/' 'k' 'i' 'l' 'l' 0
label(s_lock)
s_lock:
  db '/' 'l' 'o' 'c' 'k' 0
label(s_s3mode)
s_s3mode:
  db '/' 's' 33 'm' 'o' 'd' 'e' 0
label(s_s3sync)
s_s3sync:
  db '/' 's' 33 's' 'y' 'n' 'c' 0
label(s_ready)
s_ready:
  db '/' 'r' 'e' 'a' 'd' 'y' 0
label(s_setcash)
s_setcash:
  db '/' 's' 'e' 't' 'c' 'a' 's' 'h' 0
label(s_putgun)
s_putgun:
  db '/' 'p' 'u' 't' 'g' 'u' 'n' 0

{label(s_setgame_none)
s_setgame_none:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'd' 'e' 'f' 'a' 'u' 'l' 't' 0
label(s_setgame_s3round)
s_setgame_s3round:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'S' 33 ' ' 'R' 'o' 'u' 'n' 'd' 0
label(s_setgame_duels)
s_setgame_duels:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'G' 'u' 'n' ' ' 'G' 'a' 'm' 'e' 0}

//---------- custom admin commands ----------------


alloc(custom_newmem,16384)
label(custom_returnhere)
label(custom_originalcode)
label(custom_exit)

custom_newmem:
       add esp,144
       pushad
//esi = *msg
//edi = p
imul ebx,edi,ps //p*
cmp [p0+p_admin+ebx],0
je commands_skip

//-------------- /pos
  push edi
push 4
push s_pos
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_1

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul eax,ecx,hs //h*
  sub esp,18
  fld [h0+h_pos+0+eax]
  fld [h0+h_pos+4+eax]
  fld [h0+h_pos+8+eax]
  fstp qword [esp+10]
  fstp qword [esp+8]
  fstp qword [esp+0]

  push s_posformat
  push tmpbuffer
  call msvcrt.sprintf
  add esp,20

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

//-------------- /bot
label(commands_1)
commands_1:
  push edi
push 4
push s_bot
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_2

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul edx,ecx,hs //h*

  pushad
    call create_player_func
    mov [esp+1C],eax
  popad
mov ebp,eax //p2

imul edi,ebp,ps
mov [p0+2D04+edi],1
mov [p0+3794+edi],1
mov [p0+37AC+edi],1
mov [p0+37A8+edi],2
mov [p0+p_team+edi],2

  pushad

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp
     push ebp
     push esi
     lea esi,[h0+h_pos+edx]
     push esi
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,C+24
     mov [esp+1C],eax
  popad

mov [p0+p_h+edi],eax


jmp commands_skip
//-------------- /rg
label(commands_2)
commands_2:
  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_3

     mov [game_reset],1

jmp commands_skip
//-------------- /skip
label(commands_3)
commands_3:
  push edi
push 5
push s_skip
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_4

     mov [game_timer],#10

jmp commands_skip
//-------------- /op
label(commands_4)
commands_4:
  push edi
push 3
push s_op
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_5

add esi,4
push esi
call find_player_func
add esp,4
   cmp eax,-1
   je commands_skip

imul ebx,eax,ps
mov [p0+p_admin+ebx],1

lea ecx,[p0+p_name+ebx]
push ecx
push subrosadedicated.exe+89368 // ["%s admin"]
push tmpbuffer
call msvcrt.sprintf
add esp,C

push 0
push -1
push tmpbuffer
push 4
call message_func
add esp,10


jmp commands_skip
//-------------- /rn
label(commands_5)
commands_5:
  push edi
push 3
push s_rn
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_6

//-- arg 1 --
add esi,4

push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
    cmp eax,-1
       pop ebx
    je commands_skip

//-- arg 2 --

         push eax
push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

       push ebx
push #32
push eax
imul ebx,ps
lea ecx,[p0+p_name+ebx]
push ecx
call msvcrt.strncpy
add esp,C
       //pop ebx
call player_sync_func
add esp,4


jmp commands_skip
//-------------- /pre
label(commands_6)
commands_6:
  push edi
push 4
push s_pre
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_7

//-- arg 1 --

add esi,5

push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
    cmp eax,-1
       pop ebx
    je commands_skip

//-- arg 2 --

         push eax
push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip
       push ebx
imul ebx,ps
lea ecx,[p0+p_name+ebx]
push ecx
push eax
push s_2s
push tmpbuffer
call msvcrt.sprintf
add esp,C
pop ecx

push #32
push tmpbuffer
push ecx
call msvcrt.strncpy
add esp,C
      //pop ebx
call player_sync_func
add esp,4


jmp commands_skip
//-------------- /mv
label(commands_7)
commands_7:
  push edi
push 3
push s_mv
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_8


add esi,4
push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx

imul ecx,ebx,ps
  mov ebp,[p0+p_team+ecx]
mov [p0+p_team+ecx],eax

{
push [p0+p_stocks+ecx]
push ebx
call sell_stocks_func

//push ebx
call player_sync_func
//add esp,4

call player_sync_cash_func

add esp,8
}
{
mov eax,corp_stocks_s
imul eax,ebp
  fld [corp_stocks+eax]
   fimul [p0+p_stocks+ecx]
   fmul [stock_sell_coef]
 push eax
  fistp [esp]
 pop eax
add [p0+p_cash+ecx],eax
mov [p0+p_stocks+ecx],0
}

push ebx
call player_sync_func
   //call player_sync_cash_func
add esp,4


jmp commands_skip
//-------------- /shift
label(commands_8)
commands_8:
  push edi
push 6
push s_shift
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_9

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov [game_weekday],0
mov [game_reset],1

mov ecx,players_max
xor ebx,ebx
xor edx,edx
label(custom_shift_players)
custom_shift_players:

cmp [p0+ebx],0
je custom_shift_next

mov eax,[p0+p_team+ebx]
cmp eax,2
jg custom_shift_next

inc eax
cmp eax,2
jle custom_shift_1
xor eax,eax
label(custom_shift_1)
custom_shift_1:
mov [p0+p_team+ebx],eax

push ebx
push ecx
push edx

call player_sync_func

pop edx
pop ecx
pop ebx

label(custom_shift_next)
custom_shift_next:
  add ebx,ps
  inc edx
//loop custom_shift_players
  dec ecx
  cmp ecx,0
  jge custom_shift_players


jmp commands_skip
//-------------- /kill
label(commands_9)
commands_9:
  push edi
push 5
push s_kill
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_10


add esi,6
push esi
call find_player_func
add esp,4
   cmp eax,-1
   je commands_skip

imul eax,ps
mov ebx,[p0+p_h+eax]
imul ebx,hs
mov [h0+h_health0+ebx],0


jmp commands_skip
//-------------- /lock
label(commands_10)
commands_10:
  push edi
push 5
push s_lock
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_11

mov eax,1
sub eax,[timer_locked]
mov [timer_locked],eax


push 0
push -1
push s_timerlocked
  cmp eax,1
  je commands_lock_1
    mov [esp],s_timerunlocked
  label(commands_lock_1)
  commands_lock_1:
push 0
call message_func
add esp,10


jmp commands_skip
//-------------- /s3mode
label(commands_11)
commands_11:
  push edi
push 7
push s_s3mode
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_12


add esi,8
push esi
call msvcrt.atoi
add esp,4

push eax
call s3_set_mode_func
add esp,4


jmp commands_skip
//-------------- /s3sync
label(commands_12)
commands_12:
  push edi
push 7
push s_s3sync
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_13

  call load_s3_registry_func

jmp commands_skip
//-------------- /ready
label(commands_13)
commands_13:
  push edi
push 5
push s_ready
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_14

mov ecx,players_max
xor ebx,ebx
label(custom_ready_loop)
custom_ready_loop:
    mov [p0+p_ready+ebx],1
add ebx,ps
loop custom_ready_loop


jmp commands_skip
//-------------- /setcash
label(commands_14)
commands_14:
  push edi
push 8
push s_setcash
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_15

push s_delim
add esi,9
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx

imul ecx,ebx,ps
mov [p0+p_cash+ecx],eax
mov [p0+p_stocks+ecx],0

push ebx
call player_sync_cash_func
pop ebx


jmp commands_skip
//-------------- /putgun
label(commands_15)
commands_15:
  push edi
push 7
push s_putgun
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_16

//--- arg1 (player) ---

push s_delim
add esi,8
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax //p
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax
{
imul eax,ps
mov ecx,p_slots_max
label(custom_putgun_rem_loop)
custom_putgun_rem_loop:
     mov [p0+p_slot0+eax],0
add eax,p_slots
loop custom_putgun_rem_loop
}
//--- arg2 (gun) ---

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx //p
//cmp eax,-1
//je commands_skip

push eax
push ebx
call player_put_gun_func
add esp,8

{
imul ebx,ps //p*+slot
  mov ebp,eax
  inc ebp //it_mag
imul edx,ebp,its
mov edx,[it0+it_capacity+edx]

//gun
mov [p0+p_slot0+ebx],1
mov [p0+p_slot0+p_slot_item1+ebx],eax
//mov [p0+p_slot0+p_slot_item1+4+ebx],ebp
  mov [p0+p_slot0+p_slot_item1+4+ebx],edx
  mov [p0+p_slot0+p_slot_item1+8+ebx],ebp
//mags
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
//bandage
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],1
    mov [p0+p_slot0+p_slot_item1+ebx],E
    mov [p0+p_slot0+p_slot_item1+4+ebx],2
}

jmp commands_skip
//-------------- /
label(commands_16)
commands_16:
{  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_17}




jmp commands_skip
//-------------- /
label(commands_17)
commands_17:
{  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_18}




jmp commands_skip
//-------------- /
label(commands_18)
commands_18:
{  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_19}




label(commands_skip)
commands_skip:
       popad
       sub esp,144
custom_originalcode:
mov eax,[subrosadedicated.exe+8BDC4]

custom_exit:
jmp custom_returnhere

"subrosadedicated.exe"+604C6:
jmp custom_newmem
custom_returnhere:


//--------- round state 1 timer sped up -------------------
//used for round mission spawn

alloc(newmem30,2048)
label(returnhere30)
label(mission_originalcode)
label(mission_exit)

//todo: find another place to inject
newmem30:
  cmp [custom_game],GAME_RACE
    je mission_race

cmp ebx,#5300
jl mission_originalcode

  cmp [custom_game],GAME_S3ROUND
    je mission_s3round

jmp mission_originalcode
label(mission_race)
mission_race:
  cmp [game_timer],#5399
    jne mission_exit
mov [race_checkpoint_leading],0
mov [race_players_finished],0


                         pushad
//--- checkpoint markers ---

mov ecx,[race_checkpoint_count]
xor ebx,ebx
label(start_cp)
start_cp:
                 push ecx
                 push ebx
{
push (float)0.5
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)-0.5
mov esi,esp  //orientation
}
push (float)0.5
push (float)0.0
push (float)-0.5
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)0.5
push (float)0.0
push (float)-0.5
mov esi,esp  //orientation
  push (float)0.0
  push (float)0.0
  push (float)0.0
  mov edi,esp //velocity
push [rcp0+rcp_pos+8+ebx]
push [rcp0+rcp_pos+4+ebx]
push [rcp0+rcp_pos+0+ebx]
mov ebp,esp //position

push [rcp0+rcp_color+ebx]
push esi
push edi
push ebp
push #10
call vehicle_spawn_func
               //(type, *float[3] position, *float[3]? velocity, *float[9] orientation, color)
add esp,14+3C
                 pop ebx
                 pop ecx
add ebx,rcp__sizeof
//loop start_cp
  dec ecx
  cmp ecx,0
  jg start_cp

//--- players ----

xor ecx,ecx
xor ebx,ebx //p2
label(start_players)
start_players:

   //mov [player_checkpoints+ecx*4],0
   mov [p20+p2_race_checkpoint+ebx],0

 add ebx,p2s
  inc ecx
  cmp ecx,players_max
  jl start_players

//---- msg --------

{push 0
push -1
push s_msg0
push 0
call message_func
               //(int type, char* message, int channel, int variation)
  mov [esp+4],s_msg1
    call message_func
  mov [esp+4],s_msg2
    call message_func

 //-- best time --
     mov eax,[best_time]
     cmp eax,racing_time_max
     je init_best_time_msg_skip

                push best_name
     push [best_time]
     call timer_to_string_func
     add esp,4
                push tmpbuffer2
                push s_best
                push tmpbuffer
                call msvcrt.sprintf
                add esp,10
  mov [esp+4],tmpbuffer
  call message_func
       label(init_best_time_msg_skip)
       init_best_time_msg_skip:
add esp,10}


              popad
//-------------------------------------------------------
mov [game_timer],#900

jmp mission_exit
label(mission_s3round)
mission_s3round:
       pushad

mov ebp,[game_weekday]
dec ebp
imul ebp,s3round_cash_inc
add ebp,s3round_cash_base

xor ecx,ecx
xor ebx,ebx
label(mission_s3round_players_loop)
mission_s3round_players_loop:
   cmp [p0+ebx],0
     je mission_s3round_players_next
   cmp [p0+p_team+ebx],2
     jg mission_s3round_players_next

   mov [p0+p_cash+ebx],ebp
      pushad
   push ecx
   call player_sync_cash_func
   add esp,4
      popad

label(mission_s3round_players_next)
mission_s3round_players_next:
add ebx,ps
  inc ecx
  cmp ecx,players_max
  jl mission_s3round_players_loop

push ebp
push s3round_days
push [game_weekday]
push s_s3round_day
push tmpbuffer
call msvcrt.sprintf
add esp,14

push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10

       popad
mission_originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

mission_exit:
jmp returnhere30

"subrosadedicated.exe"+84F2B:
jmp newmem30
nop
returnhere30:


//-------- round state 1 -&gt; 2 ---------------------

alloc(newmem6,2048)
label(returnhere6)
label(round12_originalcode)
label(round12_exit)
newmem6:
cmp [custom_game],GAME_RACE
  je round12_race
cmp [custom_game],GAME_S3ROUND
  je round12_s3round
cmp [custom_game],GAME_DUELS
  je round12_duels
jmp round12_originalcode

label(round12_race)
round12_race:
   //...
mov [game_timer],race_time_max
jmp round12_exit
//-------------------------
label(round12_s3round)
round12_s3round:
   //...
mov [game_timer],s3round_time
jmp round12_antighost
//-------------------------
label(round12_duels)
round12_duels:
   pushad

xor ecx,ecx
xor ebx,ebx
label(round12_duels_loop)
round12_duels_loop:
 cmp [p0+ebx],0
   je round12_duels_next
 cmp [p0+p_h+ebx],-1
   je round12_duels_next
 cmp [p0+p_team+ebx],6
   je round12_duels_next
 cmp [p0+p_team+ebx],7
   je round12_duels_next
      push ebx
      push ecx

{mov eax,[p0+p_h+ebx]
//gun
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  add esp,C}

  call duels_give_gun_func

      pop ecx
      pop ebx
label(round12_duels_next)
round12_duels_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl round12_duels_loop

   popad
mov [game_timer],duels_time
jmp round12_antighost

//----------------------------
label(round12_antighost)
round12_antighost:
               pushad

mov ecx,2
label(start_playground)
start_playground:
push ecx

push (float)0.0
push (float)1.0
push (float)0.0
  push (float)0.0
  push (float)0.0
  push (float)1.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp

imul eax,ecx,C
push [heaven_points+eax+8]
push [heaven_points+eax+4]
push [heaven_points+eax+0]
mov edi,esp

push esi
push 0
push edi
push 22
call item_spawn_func
               //(int item_type, float *pos, [float* velocity], float *orientation)
add esp,10+30

pop ecx
dec ecx
  cmp ecx,0
  jge start_playground

               popad
jmp round12_exit
//-----------------------------

round12_originalcode:
mov [subrosadedicated.exe+8ED176C],ecx

round12_exit:
jmp returnhere6

"subrosadedicated.exe"+84FD1:
jmp newmem6
nop
returnhere6:

//-------- round state 1 timer --------------------

alloc(newmem2,2048)
label(returnhere2)
label(timer1_originalcode)
label(timer1_exit)

newmem2:
cmp [custom_game],GAME_DUELS
  je timer1_duels
jmp timer1_originalcode

label(timer1_duels)
timer1_duels:
  cmp [game_timer],vanilla_mission_spawn_time
    jge timer1_originalcode
  cmp [game_timer],duels_prep
    jle timer1_originalcode
  mov [game_timer],duels_prep
  jmp timer1_exit
timer1_originalcode:
                     cmp [timer_locked],1
                     je timer1_exit
mov [subrosadedicated.exe+8ED176C],ebx

timer1_exit:
jmp returnhere2

"subrosadedicated.exe"+84A50:
jmp newmem2
nop
returnhere2:

//--------- round everyone dead -------------------

alloc(newmem11,2048)
label(returnhere11)
label(roundskipdead_originalcode)
label(roundskipdead_exit)

newmem11:
cmp [custom_game],GAME_DUELS
  je roundskipdead_duels
jmp roundskipdead_originalcode

label(roundskipdead_duels)
roundskipdead_duels:
   jmp roundskipdead_exit

roundskipdead_originalcode:
mov [subrosadedicated.exe+8ED176C],0000003C

roundskipdead_exit:
jmp returnhere11

"subrosadedicated.exe"+85422:
jmp newmem11
nop
nop
nop
nop
nop
returnhere11:

//-------- round human spawn ----------------------

alloc(newmem,2048)
label(returnhere)
label(spawn_originalcode)
label(spawn_exit)

newmem:

cmp [custom_game],GAME_NONE
je spawn_originalcode
     pushad
mov ebp,[esp+20] //pos
mov ecx,[esp+28] //p
imul ebx,ecx,ps  //p*
mov edx,[p0+p_team+ebx]

cmp [custom_game],GAME_RACE
  je spawn_race
cmp [custom_game],GAME_S3ROUND
  je spawn_s3round
cmp [custom_game],GAME_DUELS
  je spawn_duels
jmp spawn_ret

label(spawn_race) //=======================
spawn_race:

  push ecx
  call player_clear_slots
  add esp,4

 popad
 call human_spawn_func
      pushad
//----------- racing vehicle -----

{
push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation
}
{push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0}
push (float)-1.0
push (float)0.0
push (float)0.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)0.0
push (float)0.0
push (float)-1.0
mov esi,esp  //orientation

push [race_spawn_point+8]
push [race_spawn_point+4]
push [race_spawn_point+0]
mov edi,esp //position
//---------------
push (float)race_spacing_width
push (float)race_spacing_depth
  mov edx,[race_players_spawned]
  and edx,race_spacing_columns_bitmask
push edx
  mov edx,[race_players_spawned]
  shr edx,race_spacing_columns_bits
push edx
           {fild [esp+4]
             fmul [esp+C]
             //fchs
             fadd [race_spawn_point+8]
             fstp [edi+8]
           fild [esp+0]
             fmul [esp+8]
             fchs
             fadd [race_spawn_point+0]
             fstp [edi+0]}
           fild [esp+4]
             fmul [esp+C]
             fchs
             fadd [race_spawn_point+0]
             fstp [edi+0]
           fild [esp+0]
             fmul [esp+8]
             //fchs
             fadd [race_spawn_point+8]
             fstp [edi+8]
add esp,10
//---------------

            pushad
        call msvcrt.rand
        and eax,3
        mov [esp+18],eax
            popad
push ecx
push esi
push 0
push edi
push race_car_type
call vehicle_spawn_func
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)
add esp,14+30

  mov ecx,[esp+1C] //h
  imul ebx,ecx,hs //h*

    mov [h0+h_car+ebx],eax
    mov [h0+h_seat+ebx],0

      popad
inc [race_players_spawned]

 jmp spawn_exit

label(spawn_s3round) //=======================
spawn_s3round:

  push ecx
  call player_clear_slots
  add esp,4

jmp spawn_ret
label(spawn_duels) //=======================
spawn_duels:

  push ecx
  call player_clear_slots
  add esp,4

  {mov [tmp1],ecx //tmp1 = p
  mov [tmp2],edx //tmp2 = team
    add [p0+p_suit_color+ebx],3}
imul esi,ecx,p2s
mov [p20+p2_duels_gun_progress+esi],0
mov [p20+p2_duels_bounds_timer+esi],0

mov [ebp+0],(float)duels_spawn1_x
mov [ebp+4],(float)duels_spawn1_y
mov [ebp+8],(float)duels_spawn1_z

cmp edx,0
je spawn_duels_team1

mov [ebp+0],(float)duels_spawn2_x
mov [ebp+4],(float)duels_spawn2_y
mov [ebp+8],(float)duels_spawn2_z

label(spawn_duels_team1)
spawn_duels_team1:

       {push ecx
       call player_sync_func
       add esp,4}
  popad
call human_spawn_func

     {  pushad
     mov ecx,[tmp1]
     imul ecx,ps
     mov edx,[tmp2]
     mov [p0+p_suit_color+ecx],edx
       popad}
{
    pushad
//gun
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  pop eax
  add esp,8
  mov [esp+1C],eax
    popad
}
jmp spawn_exit

label(spawn_ret)
spawn_ret:
     popad
spawn_originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
spawn_exit:
jmp returnhere

"subrosadedicated.exe"+84931:
jmp newmem
returnhere:



//-------------- player death -------------------


alloc(newmem23,2048)
label(returnhere23)
label(death_originalcode)
label(death_exit)

newmem23:
cmp [custom_game],GAME_DUELS
  je death_duel
jmp death_originalcode

label(death_duel)
death_duel:
      pushad
mov edi,eax //p_victim
  cmp edi,-1
  je death_duel_break
imul edi,p2s //p2_victim*
  cmp [p20+p2_duels_gun_progress+edi],5
  jge death_duel_break
mov edx,ecx //p_victim*
  cmp [p0+p_team+edx],2
    jg death_duel_break

xor ecx,ecx
xor ebx,ebx
label(death_duel_loop)
death_duel_loop:
  cmp [p0+ebx],0
    je death_duel_next
  cmp ebx,edx
    je death_duel_next
  cmp [p0+p_team+ebx],6
    je death_duel_next
  cmp [p0+p_team+ebx],7
    je death_duel_next

  imul esi,ecx,p2s //p2_killer*
  inc [p20+p2_duels_gun_progress+esi]
  cmp [p20+p2_duels_gun_progress+esi],5
  jge death_duel_victory
//-- frag counted --

  push ecx
  call duels_give_gun_func
  add esp,4

  jmp death_duel_break
  label(death_duel_victory)
  death_duel_victory:
//-- victory --

  mov eax,[p20+p2_duels_gun_last+edi]
    push eax
    push ecx
    call player_put_gun_func
    pop ecx //p
    pop ebx //it

    imul ebx,its
    lea eax,[it0+it_name+ebx]
  push eax
    imul ecx,ps
    lea eax,[p0+p_name+ecx]
  push eax
  push s_duels_win
  push tmpbuffer
  call msvcrt.sprintf
  add esp,10

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

  call log_func

  mov [game_timer],#360
  jmp death_duel_break

label(death_duel_next)
death_duel_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl death_duel_loop
label(death_duel_break)
death_duel_break:


      popad

death_originalcode:
mov [ecx+subrosadedicated.exe+13841688],ebx

death_exit:
jmp returnhere23

"subrosadedicated.exe"+8113D:
jmp newmem23
nop
returnhere23:




//---------- round state 2 timer -----------------


alloc(newmem17,16384)
label(returnhere17)
label(update_originalcode)
label(update_exit)

newmem17:
cmp [custom_game],GAME_RACE
  je update_race
cmp [custom_game],GAME_S3ROUND
  je update_s3round
cmp [custom_game],GAME_DUELS
  je update_duels
jmp update_originalcode


//================= /\/\/\/\/\/\/\/\ =======================
label(update_race)
update_race:
 dec [game_timer]
//------------------------------- update racing -----------------------
                      pushad
       //jmp update_racing_ret
cmp [game_timer],0
  jle update_racing_end
cmp [race_players_finished],0
  je update_racing_start
mov eax,[race_finished_at]
{sub eax,#2000
cmp [game_timer],eax
  jle update_racing_end}

label(update_racing_start)
update_racing_start:

push 0 //player count

xor ecx,ecx //p
xor ebx,ebx //p*
label(update_race_players)
update_race_players:
  cmp [p0+ebx],0
    je update_race_players_next
  cmp [p0+p_team+ebx],6
    je update_race_players_next
  mov ebp,[p0+p_h+ebx] //h
  cmp ebp,-1
    je update_race_players_next
  imul edx,ebp,hs //h*

      cmp [h0+h_seat+edx],0
      jne update_race_players_next

      //mov esi,[player_checkpoints+ecx*4] //cp
      imul esi,ecx,p2s
	  mov esi,[p20+p2_race_checkpoint+esi]
        cmp esi,[race_checkpoint_count]
          jge update_race_players_next
      imul edi,esi,rcp__sizeof //cp*

             inc [esp]

         push eax
      mov eax,race_time_max
      dec eax
    cmp [game_timer],eax
    //cmp [game_timer],0
         pop eax
    jne race_bound_check

//------- first checkpoint message ---------
                pushad
push [rcp0+rcp_name_p]
push s_first
push tmpbuffer
call msvcrt.sprintf
add esp,C
                popad
                pushad
push 0
push ebp
push tmpbuffer
push 1
call message_func
add esp,10
                popad

//================= next checkpoint check ========
  label(race_bound_check)
  race_bound_check:

   push (float)race_checkpoint_radius
      //if( distance(checkpoint.xz, player.xz) &lt; checkpoint_radius )
      fld [rcp0+rcp_pos+0+edi]
      fsub [h0+h_bp0_pos+0+edx]
        fmul st(0)
      fld [rcp0+rcp_pos+8+edi]
      fsub [h0+h_bp0_pos+8+edx]
        fmul st(0)
      faddp st(1)
      fsqrt
      fld [esp]
        fcomip st(1)
        fstp st(0)
        jb race_bounds_skip

          //mov [h0+h_health0+edx],0
          inc esi
          add edi,rcp__sizeof
          //mov [player_checkpoints+ecx*4],esi
		      push eax
			  imul eax,ecx,p2s
			  mov [p20+p2_race_checkpoint+eax],esi
			  pop eax
        cmp esi,[race_checkpoint_count]
          jge race_update_finish

//======== personal checkpoint message ==============================
                   pushad
            push [rcp0+rcp_name_p+edi]
            push [race_checkpoint_count]
            push esi
            push s_cp
            push tmpbuffer
          call msvcrt.sprintf
            add esp,14
                   popad
         pushad
push 0
push ebp
push tmpbuffer
push 1
call message_func
               //(int type, char* message, int channel, int variation)
add esp,10
         popad
//========= lead message ============================================
   cmp esi,[race_checkpoint_leading]
   jle race_bounds_skip
   mov [race_checkpoint_leading],esi
                   pushad
//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
            push tmpbuffer2
//-----------------------------------
            lea eax,[p0+p_name+ebx]
            push eax
            push s_lead
            push tmpbuffer
            call msvcrt.sprintf
            add esp,10
                   popad
       pushad
push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10
       popad
//===================================================================

      jmp race_bounds_skip
        label(race_update_finish)
        race_update_finish:
                   mov [h0+h_car+edx],-1
           inc [race_checkpoint_leading] //?
        inc [race_players_finished]
        cmp [race_players_finished],1
          je race_update_finish_victory

                        pushad
//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
                push tmpbuffer2
//-----------------------------------
                  lea eax,[p0+p_name+ebx]
                  push eax
                  push [race_players_finished]
                  push s_finish
                  push tmpbuffer
                call msvcrt.sprintf
                add esp,10+4
                        popad

            jmp update_race_print
              label(race_update_finish_victory)
              race_update_finish_victory:

    //add [p0+p_cash+ebx],racing_cash_prize

                        pushad

//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
                push tmpbuffer2
//-----------------------------------
                  lea eax,[p0+p_name+ebx]
                  push eax
                  push s_won
                  push tmpbuffer
                call msvcrt.sprintf
                add esp,10
                        popad

     mov eax,[game_timer]
     mov [race_finished_at],eax
{     cmp eax,[race_best_time]
     jge update_race_print

         //----- high score!! ----------
             mov [race_best_time],eax
                          pushad
                lea eax,[p0+p_name+ebx]
                push eax
                push best_name
                call msvcrt.strcpy
                add esp,8
                          popad
         //-----------------------------
}
       label(update_race_print)
       update_race_print:

       pushad
  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

  call log_func
       popad

//------------
        {cmp [race_players_finished],3
          jge bounds_end}
        mov eax,[race_players_spawned]
        cmp [race_players_finished],eax
          jge bounds_end
//------------


    jmp race_bounds_skip

         label(bounds_end)
         bounds_end:
              mov [game_state],3
              mov [game_timer],#600

  label(race_bounds_skip)
  race_bounds_skip:
  fstp st(0)

   add esp,4
//===================================================

//---- kill if out of a car? ----------
    cmp [p0+p_admin+ebx],1
    je update_race_players_next
    cmp [game_timer],0
    je update_race_players_next
    //cmp [h0+h_skin+edx],6
    //je update_race_players_next
    cmp [h0+h_car+edx],-1
    jne update_race_players_next
      mov [h0+h_health0+edx],0


label(update_race_players_next)
update_race_players_next:
 add ebx,ps
  inc ecx
  cmp ecx,players_max
  jl update_race_players

pop eax //player count
  cmp eax,0
  je update_racing_end



jmp update_racing_ret
   label(update_racing_end)
   update_racing_end:
       mov [game_state],3
       mov [game_timer],#600

label(update_racing_ret)
update_racing_ret:
                      popad
jmp update_exit
//=============== /\/\/\/\/\/\/\/\/\ ======================


label(update_s3round)
update_s3round:
    call s3_antighosting_update
 jmp update_originalcode

label(update_duels)
update_duels:
   cmp [game_timer],#400
     jl update_originalcode
              pushad
xor ecx,ecx //p
xor ebx,ebx //p*
label(update_duels_loop)
update_duels_loop:
 cmp [p0+ebx],0
   je update_duels_next
 cmp [p0+p_team+ebx],6
   je update_duels_next
 cmp [p0+p_team+ebx],7
   je update_duels_next
 mov eax,[p0+p_h+ebx] //h
 cmp eax,-1
   jne update_duels_alive
//if dead
     push ebx
     push ecx
//-- respawn ----
push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

sub esp,C
mov ebp,esp //position
      mov [ebp+0],(float)duels_spawn1_x
      mov [ebp+4],(float)duels_spawn1_y
      mov [ebp+8],(float)duels_spawn1_z
  mov edi,[p0+p_team+ebx]
  cmp edi,0
  je update_duels_spawn_team1
      mov [ebp+0],(float)duels_spawn2_x
      mov [ebp+4],(float)duels_spawn2_y
      mov [ebp+8],(float)duels_spawn2_z
  label(update_duels_spawn_team1)
  update_duels_spawn_team1:
       push (float)0.5
          pushad
            push ebp
          call frand1
            mov ebp,[esp]
           fmul [esp+24]
           fadd [ebp+0]
           fstp [ebp+0]
          call frand1
            pop ebp
           fmul [esp+20]
           fadd [ebp+8]
           fstp [ebp+8]
          popad
       add esp,4

     push ecx
     push esi
     push ebp
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,3C
      pop ecx
      pop ebx
   mov [p0+p_h+ebx],eax

//gun
  push ecx
  call duels_give_gun_func
  add esp,4
  {    pushad
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  add esp,C
      popad}

jmp update_duels_next
//---------------
label(update_duels_alive)
update_duels_alive:
     push ebx
     push ecx
  imul edx,eax,hs //h*
  imul ebp,ecx,p2s //p2*
fld [h0+h_pos+4+edx]
   push (float)duels_floor
   fld [esp]
   add esp,4
  fcomip st(1)
  ja update_duels_bounds_apply
   push (float)duels_ceil
   fld [esp]
   add esp,4
  fcomip st(1)
  jb update_duels_bounds_apply
mov [p20+p2_duels_bounds_timer+ebp],0
jmp update_duels_bounds_skip
label(update_duels_bounds_apply)
update_duels_bounds_apply:

    inc [p20+p2_duels_bounds_timer+ebp]
mov eax,[p20+p2_duels_bounds_timer+ebp]
cmp eax,#320
jge update_duels_bounds_dead

mov esi,eax
and esi,#63
cmp esi,0
jne update_duels_bounds_skip

shr eax,6
mov esi,#5
sub esi,eax
push esi
push s_format_bounds
push tmpbuffer
call msvcrt.sprintf
add esp,C

      mov ebx,[esp+4] //p*
      mov ecx,[p0+p_h+ebx] //h
push 0
push ecx
push tmpbuffer
push 1
call message_func
add esp,10

jmp update_duels_bounds_skip
label(update_duels_bounds_dead)
update_duels_bounds_dead:
    mov [h0+h_health0+edx],0

label(update_duels_bounds_skip)
update_duels_bounds_skip:
  fstp st(0)
      pop ecx
      pop ebx
label(update_duels_next)
update_duels_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl update_duels_loop

          popad

update_originalcode:
                     cmp [timer_locked],1
                     je update_exit
mov [subrosadedicated.exe+8ED176C],ebx

update_exit:
jmp returnhere17

"subrosadedicated.exe"+85011:
jmp newmem17
nop
returnhere17:



//------------ stock purchase func ---------------

alloc(newmem39,2048)
label(returnhere39)
label(originalcode39)
label(exit39)

newmem39:
   cmp [custom_game],GAME_NONE
     je originalcode39
ret

originalcode39:
push ebx
mov ebx,[esp+08]

exit39:
jmp returnhere39

"subrosadedicated.exe"+6EB0:
jmp newmem39
returnhere39:


//------------- custom /car args -----------------

alloc(newmem57,2048)
label(returnhere57)
label(originalcode57)
label(exit57)

newmem57:
           pushad
cmp byte ptr [ebp+4],0
je car_skip
//---------------- first argument
push s_delim
lea ebx,[ebp+5]
push ebx
call msvcrt.strtok
add esp,8

cmp eax,0
je car_skip

push eax
call msvcrt.atoi
mov [esp+20+4],eax
pop eax
//--------------- second argument
push s_delim
push 0
call msvcrt.strtok
add esp,8

cmp eax,0
je car_skip

push eax
call msvcrt.atoi
mov [esp+20+4+10],eax
pop eax
//----------

label(car_skip)
car_skip:
           popad
originalcode57:
call subrosadedicated.exe+48860
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)

exit57:
jmp returnhere57

"subrosadedicated.exe"+60BD9:
jmp newmem57
returnhere57:


//------------ limo spawn -----------------------

alloc(newmem67,2048)
label(returnhere67)
label(originalcode67)
label(exit67)

newmem67:

cmp [custom_game],GAME_NONE
  je originalcode67
cmp [custom_game],GAME_S3ROUND
  je originalcode67

mov eax,[esp+8] //velocity
  mov [eax+0],(float)8.0
  mov [eax+4],(float)35.0
  mov [eax+8],(float)-10.0

originalcode67:
call subrosadedicated.exe+48860

exit67:
jmp returnhere67

"subrosadedicated.exe"+79DF4:
jmp newmem67
returnhere67:

//------------- item grab func -------------------


alloc(newmem89,2048)
label(returnhere89)
label(grab_originalcode)
label(grab_exit)

newmem89:
  mov eax,[esp+8]
  cmp eax,-1
    je grab_originalcode
  imul eax,hs
  cmp [h0+h_skin+eax],6
    je grab_exit
  cmp [custom_game],GAME_DUELS
    je grab_exit

grab_originalcode:
call subrosadedicated.exe+45120
               //(item_id, idk, character, slot)
grab_exit:
jmp returnhere89

"subrosadedicated.exe"+61C5A:
jmp newmem89
returnhere89:


//---------- "%s Manager: %s" --------------------

alloc(newmem101,2048)
label(returnhere101)
label(originalcode101)
label(exit101)

newmem101:

cmp [custom_game],GAME_NONE
  jne exit101

originalcode101:
call subrosadedicated.exe+7450

exit101:
jmp returnhere101

"subrosadedicated.exe"+84AEE:
jmp newmem101
returnhere101:


//------------ Top 10 list --------------------

alloc(newmem129,2048)
label(returnhere129)
label(endtext_originalcode)
label(endtext_exit)

newmem129:
  cmp [custom_game],GAME_S3ROUND
    je endtext_s3round
  cmp [custom_game],GAME_NONE
    je endtext_originalcode
jmp endtext_exit

label(endtext_s3round)
endtext_s3round:

//todo: print score
jmp endtext_exit

endtext_originalcode:
call subrosadedicated.exe+7450

endtext_exit:
jmp returnhere129

"subrosadedicated.exe"+251CD:
jmp newmem129
returnhere129:




alloc(newmem114,2048)
label(returnhere114)
label(originalcode114)
label(exit114)

newmem114:
  cmp [custom_game],GAME_NONE
  jne exit114

originalcode114:
call subrosadedicated.exe+7450

exit114:
jmp returnhere114

"subrosadedicated.exe"+251A3:
jmp newmem114
returnhere114:

//------------- fall damage ---------------------

alloc(newmem144,2048)
label(returnhere144)
label(originalcode144)
label(exit144)

newmem144:

cmp [custom_game],GAME_NONE
je originalcode144

cmp [h0+h_skin+esi],6
je exit144

originalcode144:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78

exit144:
jmp returnhere144

"subrosadedicated.exe"+7EE92:
jmp newmem144
nop
nop
returnhere144:


//-------------- entering vehicles -------------

alloc(newmem160,2048)
label(returnhere160)
label(originalcode160)
label(exit160)

newmem160:

cmp [h0+h_skin+edi],6
je exit160

cmp [custom_game],GAME_RACE
je exit160

originalcode160:
mov [edi+subrosadedicated.exe+5312E4],edx

exit160:
jmp returnhere160

"subrosadedicated.exe"+61E2B:
jmp newmem160
nop
returnhere160:


//---------------- exiting vehicles ---------------------------

alloc(newmem214,2048)
label(returnhere214)
label(originalcode214)
label(exit214)

newmem214:

cmp [custom_game],GAME_RACE
  jne originalcode214
cmp [game_state],1
  jne originalcode214
jmp exit214

originalcode214:
mov [esi+subrosadedicated.exe+5312E4],FFFFFFFF

exit214:
jmp returnhere214

"subrosadedicated.exe"+80638:
jmp newmem214
nop
nop
nop
nop
nop
returnhere214:

//----------------- vehicle damage ----------------------------

alloc(newmem277,2048)
label(returnhere277)
label(originalcode277)
label(exit277)

newmem277:

cmp [custom_game],GAME_RACE
je exit277


originalcode277:
mov [esi-000000F4],ecx

exit277:
jmp returnhere277

"subrosadedicated.exe"+77864:
jmp newmem277
nop
returnhere277:




//------------ door opening up when everyone's dead -----------


alloc(newmem177,2048)
label(returnhere177)
label(originalcode177)
label(exit177)

newmem177:

cmp [eax+14],ecx
je exit177

   push ebx
mov ebx,[eax+14]
imul ebx,hs
cmp [h0+h_skin+ebx],6
   pop ebx
je exit177

originalcode177:
cmp [eax+14],ecx
jne subrosadedicated.exe+85316

exit177:
jmp returnhere177

"subrosadedicated.exe"+852BA:
jmp newmem177
returnhere177:

//--------- weekly cash reset ----------------


alloc(newmem195,2048)
label(returnhere195)
label(originalcode195)
label(exit195)

newmem195:
  cmp [custom_game],GAME_NONE
    jne exit195

originalcode195:
mov [eax-30],ecx
mov [eax],ebx

exit195:
jmp returnhere195

"subrosadedicated.exe"+7A895:
jmp newmem195
returnhere195:


//----------- send timer -------------------------

alloc(newmem255,2048)
label(returnhere255)
label(originalcode255)
label(exit255)

newmem255:

  cmp [custom_game],GAME_RACE
   jne originalcode255
  cmp [game_state],2
   jne originalcode255

   mov eax,race_time_max
   sub eax,[game_timer]
   mov [tmp1],eax

   lea eax,[tmp1]
   mov [esp],eax

originalcode255:
call subrosadedicated.exe+13250

exit255:
jmp returnhere255

"subrosadedicated.exe"+70420:
jmp newmem255
returnhere255:


//-------------- car engines --------------------

alloc(newmem300,2048)
label(returnhere300)
label(originalcode300)
label(exit300)

newmem300:
jne subrosadedicated.exe+77C9B

cmp [custom_game],GAME_RACE
  jne originalcode300
cmp [game_state],1
  je subrosadedicated.exe+77C9B

originalcode300:
//jne subrosadedicated.exe+77C9B
push edi
call subrosadedicated.exe+30D40

exit300:
jmp returnhere300

"subrosadedicated.exe"+77C90:
jmp newmem300
nop
nop
nop
returnhere300:



//------------ round reset (round mode) ------

alloc(newmem350,2048)
label(returnhere350)
label(originalcode350)
label(exit350)

newmem350:

call s3_onreset_func

originalcode350:
mov [subrosadedicated.exe+8ED1774],eax

exit350:
jmp returnhere350

"subrosadedicated.exe"+7A8F8:
jmp newmem350
returnhere350:


//--------- round reset (versus and elim) -----

alloc(newmem324,2048)
label(returnhere324)
label(originalcode324)
label(exit324)

newmem324:

call s3_onreset_func

originalcode324:
mov [subrosadedicated.exe+8ED176C],00000708

exit324:
jmp returnhere324

"subrosadedicated.exe"+7A919:
jmp newmem324
nop
nop
nop
nop
nop
returnhere324:


//---------- round state 2 -&gt; 3 ----------

alloc(newmem376,2048)
label(returnhere376)
label(round23_originalcode)
label(round23_exit)

newmem376:
cmp [custom_game],GAME_S3ROUND
  je round23_s3round
jmp round23_originalcode

label(round23_s3round)
round23_s3round:
      pushad

xor esi,esi //corp
xor edi,edi //corp*
label(round23_s3round_teams_loop)
round23_s3round_teams_loop:

xor ebp,ebp //cash

xor ecx,ecx //p
xor ebx,ebx //p*
label(round23_s3round_teams_players)
round23_s3round_teams_players:
  cmp [p0+ebx],0
    je round23_s3round_teams_players_next
  cmp [p0+p_team+ebx],esi
    jne round23_s3round_teams_players_next

add ebp,[p0+p_cash+ebx]

label(round23_s3round_teams_players_next)
round23_s3round_teams_players_next:
  add ebx,ps
    inc ecx
    cmp ecx,players_max
    jl round23_s3round_teams_players

add [s3round_shift_scores+esi*4],ebp
     pushad
push ebp
push [s3round_shift_scores+esi*4]
  mov eax,[corp_names+esi*4]
  push eax
inc esi
push esi
push s_format_logteamcash
push tmpbuffer
call msvcrt.sprintf
add esp,18

push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10

call log_func
     popad

label(round23_s3round_teams_next)
round23_s3round_teams_next:
  add edi,corps
    inc esi
    cmp esi,2
    jle round23_s3round_teams_loop



      popad
round23_originalcode:
mov [subrosadedicated.exe+8ED1764],00000003

round23_exit:
jmp returnhere376

"subrosadedicated.exe"+85444:
jmp newmem376
nop
nop
nop
nop
nop
returnhere376:


//----------- versus mode spawn ------------


alloc(newmem403,2048)
label(returnhere403)
label(originalcode403)
label(exit403)

newmem403:
call subrosadedicated.exe+74760
        pushad
mov ecx,[esp+28]
imul ebx,ecx,ps

xor ebp,ebp
  add ebp,[p0+p_slot0+ebx]
 add ebx,p_slots
  add ebp,[p0+p_slot0+ebx]
 add ebx,p_slots
  add ebp,[p0+p_slot0+ebx]
cmp ebp,0
jg versus_empty_skip

  push 5
  push B
  push eax
  call arm_func
  add esp,C

label(versus_empty_skip)
versus_empty_skip:
        popad
originalcode403:
//call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit403:
jmp returnhere403

"subrosadedicated.exe"+838E8:
jmp newmem403
returnhere403:

//------------ versus briefcase ------------------------------------

alloc(newmem431,2048)
label(returnhere431)
label(originalcode431)
label(exit431)

newmem431:

mov eax,[esp+4]
  mov [eax+0],(float)1546.0
  mov [eax+4],(float)34.5
  mov [eax+8],(float)1569.0

originalcode431:
call subrosadedicated.exe+44880
 //(int item_type, float *pos, [float* velocity], float *orientation)
exit431:
jmp returnhere431

"subrosadedicated.exe"+83A16:
jmp newmem431
returnhere431:


//-------------- versus timer 1--------


alloc(newmem460,2048)
label(returnhere460)
label(originalcode460)
label(exit460)

newmem460:

cmp [timer_locked],1
je exit460


originalcode460:
mov [subrosadedicated.exe+8ED176C],eax

exit460:
jmp returnhere460

"subrosadedicated.exe"+8373B:
jmp newmem460
returnhere460:






//---------- initialize the data -----------------
alloc(mycode,16384)
mycode:

//mov [custom_game],GAME_NONE
mov [custom_game],GAME_S3ROUND
//mov [custom_game],GAME_DUELS

mov [heaven_points+0+0],(float)1231.0 //gold
mov [heaven_points+0+4],(float)30.0
mov [heaven_points+0+8],(float)3500.0

mov [heaven_points+C+0],(float)250.0 //mons
mov [heaven_points+C+4],(float)30.0
mov [heaven_points+C+8],(float)250.0

mov [heaven_points+18+0],(float)3700.0 //oxs
mov [heaven_points+18+4],(float)30.0
mov [heaven_points+18+8],(float)150.0

mov [heaven_points+54+0],(float)1000.0 //spec
mov [heaven_points+54+4],(float)30.0
mov [heaven_points+54+8],(float)2550.0

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov ecx,players_max
xor ebx,ebx
label(init_players_loop)
init_players_loop:
      mov [p20+p2_s3p+ebx],-1
add ebx,p2s
loop init_players_loop



//--------- racing ---------
mov [race_checkpoint_leading],0
mov [race_players_finished],0
mov [race_players_spawned],0

     mov [race_checkpoint_count],0
       xor eax,eax

//CHECKPOINTS:

        inc [race_checkpoint_count] //OXS
         mov [rcp0+rcp_pos+0+eax],(float)1951.6
         mov [rcp0+rcp_pos+4+eax],(float)28.8
         mov [rcp0+rcp_pos+8+eax],(float)1700.4
        mov [rcp0+rcp_color+eax],0
          //mov ebx,[corp_names+8]
          lea ebx,[s_oxs]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Lumber
         mov [rcp0+rcp_pos+0+eax],(float)1693.0
         mov [rcp0+rcp_pos+4+eax],(float)48.8
         mov [rcp0+rcp_pos+8+eax],(float)1418.6
        mov [rcp0+rcp_color+eax],4
          lea ebx,[s_lumber]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //City hall
         mov [rcp0+rcp_pos+0+eax],(float)1311.6
         mov [rcp0+rcp_pos+4+eax],(float)25.8
         mov [rcp0+rcp_pos+8+eax],(float)1778.8
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_cityhall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Monsota
         mov [rcp0+rcp_pos+0+eax],(float)1060.9
         mov [rcp0+rcp_pos+4+eax],(float)26.8
         mov [rcp0+rcp_pos+8+eax],(float)1707.3
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_monsota]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Goldmen
         mov [rcp0+rcp_pos+0+eax],(float)1066.0
         mov [rcp0+rcp_pos+4+eax],(float)24.8
         mov [rcp0+rcp_pos+8+eax],(float)1013.8
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_goldmen]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Water treatment
         mov [rcp0+rcp_pos+0+eax],(float)1981.0
         mov [rcp0+rcp_pos+4+eax],(float)24.9
         mov [rcp0+rcp_pos+8+eax],(float)1123.8
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_water]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

//START:

  mov [race_spawn_point+0],(float)1953.2 //Taxi
  mov [race_spawn_point+4],(float)24.625
  mov [race_spawn_point+8],(float)1010.9
//--------------------------

ret
createThread(mycode)

//---

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
//push randmax
push 7FFF
fidiv dword [esp]
add esp,8
ret

label(player_clear_slots) //player_clear_slots(player)
player_clear_slots:
   pushad
mov ecx,[esp+24] //p
imul ebx,ecx,ps //p*
//--
mov ecx,p_slots_max
label(player_clear_slots_loop)
player_clear_slots_loop:
   mov [p0+p_slot0+ebx],0
add ebx,p_slots
loop player_clear_slots_loop
//--
   popad
ret


label(player_put_gun_func) //player_put_gun(player, gun)
player_put_gun_func:
       pushad
//--------
      mov eax,[esp+24]
imul eax,ps
mov ecx,p_slots_max
label(custom_putgun_rem_loop)
custom_putgun_rem_loop:
     mov [p0+p_slot0+eax],0
add eax,p_slots
loop custom_putgun_rem_loop
//--------
       mov eax,[esp+28]
       mov ebx,[esp+24]
imul ebx,ps //p*+slot
  mov ebp,eax
  inc ebp //it_mag
imul edx,ebp,its
mov edx,[it0+it_capacity+edx]

//gun
mov [p0+p_slot0+ebx],1
mov [p0+p_slot0+p_slot_item1+ebx],eax
//mov [p0+p_slot0+p_slot_item1+4+ebx],ebp
  mov [p0+p_slot0+p_slot_item1+4+ebx],edx
  mov [p0+p_slot0+p_slot_item1+8+ebx],ebp
//mags
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
//bandage
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],1
    mov [p0+p_slot0+p_slot_item1+ebx],E
    mov [p0+p_slot0+p_slot_item1+8+ebx],2
//--------
       popad
ret



label(find_player_func) //int find_player(char* arg_name)
find_player_func:
     pushad
  push [esp+24]
  call msvcrt.atoi
  add esp,4
  push eax //phone?

xor edx,edx //p
xor ebx,ebx //p*
label(find_players_loop)
find_players_loop:
  cmp [p0+ebx],0
  je find_players_next
  cmp [p0+p_team+ebx],6
  je find_players_next
    push ebx
    push edx

  mov eax,[esp+8]
  cmp eax,0
  je find_players_skip_phone
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
      add eax,#2560000
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
      add eax,#10000
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
  label(find_players_skip_phone)
  find_players_skip_phone:

  mov edx,[esp+C+24]
  push edx //arg_name
  lea edx,[p0+p_name+ebx]
  push edx
  //call msvcrt.stricmp
  call msvcrt.strstr
  add esp,8
    cmp eax,0
    //jne find_players_next
    je find_players_skip
    label(find_players_found)
    find_players_found:
        pop edx
        add esp,8
        //mov eax,edx
        mov [esp+1C],edx
        jmp find_players_ret
  label(find_players_skip)
  find_players_skip:
    pop edx
    pop ebx
  label(find_players_next)
  find_players_next:
add ebx,ps
inc edx
  cmp edx,players_max
  jl find_players_loop
add esp,4
mov [esp+1C],-1
       label(find_players_ret)
       find_players_ret:
   popad
ret


label(race_timer_to_string_func)
race_timer_to_string_func:
    mov eax,race_time_max
    sub eax,[esp+4]
    push eax
    call timer_to_string_func
    add esp,4
ret


label(timer_to_string_func)
timer_to_string_func:
        push    ebp
        mov     ebp, esp
        sub     esp, #12
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #3600
        idiv    ecx
        mov     [ebp-C], eax
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #3600
        idiv    ecx
        mov     eax, edx
        cdq
        mov     ecx, #60
        idiv    ecx
        mov     [ebp-8], eax
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #60
        idiv    ecx
        mov     eax, edx
        cdq
        mov     ecx, #6
        idiv    ecx
        mov     [ebp-4], eax
        mov     edx, [ebp-4]
        push    edx
        mov     eax, [ebp-8]
        push    eax
        mov     ecx, [ebp-C]
        push    ecx
        push    s_timetest
        push    tmpbuffer2
        call    msvcrt.sprintf
        add     esp, #20
        mov     esp, ebp
        pop     ebp
ret



label(log_func)
log_func:
push s_a
push s_log_s3
call msvcrt.fopen //fopen(path, "a")
add esp,8
  cmp eax,0
  je log_ret
push eax
  push tmpbuffer
  call msvcrt.strlen
  add esp,4
push eax
push 1
push tmpbuffer
call msvcrt.fwrite
add esp,C
  push 2
  push 1
  push s_newline
  call msvcrt.fwrite
  add esp,C
    call msvcrt.fclose
    add esp,4
label(log_ret)
log_ret:
ret


//======= s3 ===============================

label(s3_onreset_func)
s3_onreset_func:
    pushad

mov [race_checkpoint_leading],0
mov [race_players_finished],0
mov [race_players_spawned],0

    popad
ret


label(s3_antighosting_update)
s3_antighosting_update:
     pushad
mov ecx,players_max
xor ebx,ebx
xor edi,edi
label(antighosting_update_players_loop)
antighosting_update_players_loop:
  cmp [p0+ebx],0
    je antighosting_update_next
  cmp [p0+p_team+ebx],7
    je antighosting_update_obs
  cmp [p0+p_team+ebx],2
    jg antighosting_update_next

jmp antighosting_update_skipobs
label(antighosting_update_obs)
antighosting_update_obs:

   cmp [p0+p_admin+ebx],1
   je antighosting_update_next

label(antighosting_update_skipobs)
antighosting_update_skipobs:

cmp [p0+p_h+ebx],-1
je antighosting_update_respawn

mov eax,[p0+p_h+ebx]
imul eax,hs

cmp [h0+h_skin+eax],6
jne antighosting_update_next

//----- bounds

imul edx,edi,ps
mov edx,[p0+p_team+edx]
imul edx,C

mov esi,[h0+h_bp0_pb+eax]
imul esi,pbs

push (float)100.0
      fld [heaven_points+edx+0]
      fsub [h0+h_bp0_pos+eax+0]
    fld st(0)
    fabs
        fld [esp]
        fcomip st(1)
        fstp st(0)
        ja bounds_skip_x
     fdiv [esp]
     fdiv [esp]
     fst [pb0+pb_vel+esi+0]
  label(bounds_skip_x)
  bounds_skip_x:
  fstp st(0)

      fld [heaven_points+edx+8]
      fsub [h0+h_bp0_pos+eax+8]
    fld st(0)
    fabs
        fld [esp]
        fcomip st(1)
        fstp st(0)
        ja bounds_skip_z
     fdiv [esp]
     fdiv [esp]
     fst [pb0+pb_vel+esi+8]
  label(bounds_skip_z)
  bounds_skip_z:
  fstp st(0)

add esp,4
jmp antighosting_update_next

//---- respawn

label(antighosting_update_respawn)
antighosting_update_respawn:

push ebx
push ecx
push edi
                    pushad
                 imul eax,edi,ps
                 push [p0+p_skin+eax]
                 push edi
                    mov [p0+p_skin+eax],6
					call player_sync_func
                 pop edi
                 pop eax
                  imul edi,ps
                  mov [p0+p_skin+edi],eax
                    popad
push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

sub esp,C
mov ebp,esp  //position

   imul eax,edi,ps
   mov edx,[p0+p_team+eax]

 imul edx,C
  mov eax,[heaven_points+0+edx]
  mov [ebp+0],eax
    mov eax,[heaven_points+4+edx]
    mov [ebp+4],eax
  mov eax,[heaven_points+8+edx]
  mov [ebp+8],eax

      pushad
               call frand1
               mov edx,[esp+8]
               fadd [edx+0]
               fstp [edx+0]

               call frand1
               mov edx,[esp+8]
               fadd [edx+8]
               fstp [edx+8]
      popad

push edi        //player id
push esi        //orientation
push ebp        //position
call human_spawn_func
add esp,8
pop edi //player id
add esp,30

                   pushad
                push edi
                call player_clear_slots
                add esp,4
                   popad

imul edx,edi,ps
mov [p0+p_h+edx],eax

imul eax,hs
mov [h0+h_skin+eax],6

pop edi
pop ecx
pop ebx

label(antighosting_update_next)
antighosting_update_next:
add ebx,ps
inc edi
    dec ecx
    cmp ecx,0
    jge antighosting_update_players_loop

label(antighosting_update_ret)
antighosting_update_ret:
     popad
ret



label(duels_give_gun_func) //duels_give_gun(player)
duels_give_gun_func:
   pushad
mov ecx,[esp+24] //p
imul ebx,ecx,ps //p*
mov edx,[p0+p_h+ebx] //h
  cmp edx,-1
  je duels_give_gun_ret

xor esi,esi
imul edi,edx,hs //h*+slot
label(death_give_gun_remove_loop)
death_give_gun_remove_loop:
  mov eax,[h0+h_slot0+edi]
  cmp eax,2
  jl death_give_gun_remove_1
         pushad
     mov ebp,[h0+h_slot0+8+edi]
     imul eax,ebp,is
     mov [i0+eax],0
      push ebp
      call item_sync_func
      add esp,4
         popad
  label(death_give_gun_remove_1)
  death_give_gun_remove_1:
  cmp eax,1
  jl death_give_gun_remove_0
         pushad
     mov ebp,[h0+h_slot0+4+edi]
     imul eax,ebp,is
     mov [i0+eax],0
      push ebp
      call item_sync_func
      add esp,4
          popad
  label(death_give_gun_remove_0)
  death_give_gun_remove_0:
  mov [h0+h_slot0+edi],0
add edi,h_slots
inc esi
cmp esi,h_slots_max
jl death_give_gun_remove_loop

imul ebp,ecx,p2s //p2*
mov eax,[p20+p2_duels_gun_progress+ebp]

push duels_mags
  cmp eax,1
    je duels_arm1
  cmp eax,2
    je duels_arm2
  cmp eax,3
    je duels_arm3
  cmp eax,4
    je duels_arm4
      push 3 //m16
      jmp duels_arm_apply
    label(duels_arm1)
    duels_arm1:
      push 9 //uzi
      jmp duels_arm_apply
    label(duels_arm2)
    duels_arm2:
      push 1 //ak
      jmp duels_arm_apply
    label(duels_arm3)
    duels_arm3:
      push 7 //mp5
      jmp duels_arm_apply
    label(duels_arm4)
    duels_arm4:
      push B //9mm
      jmp duels_arm_apply
  label(duels_arm_apply)
  duels_arm_apply:
                      mov eax,[esp]
                      mov [p20+p2_duels_gun_last+ebp],eax
push edx
call arm_func
add esp,C

label(duels_give_gun_ret)
duels_give_gun_ret:
   popad
ret




label(s3_set_mode_func) //s3_set_mode(mode)
s3_set_mode_func:
     pushad
mov eax,[esp+24]

mov [custom_game],eax
mov [game_reset],1
//--- spec everyone ---
  mov ecx,players_max
  xor ebx,ebx
label(s3_set_mode_spec_loop)
s3_set_mode_spec_loop:
        mov [p0+p_team+ebx],7
  add ebx,ps
loop s3_set_mode_spec_loop
//----------------------

cmp eax,GAME_NONE
je s3_game_none
cmp eax,GAME_RACE
je s3_game_race
cmp eax,GAME_S3ROUND
je s3_game_s3round
cmp eax,GAME_DUELS
je s3_game_duels
cmp eax,GAME_FINAL
je s3_game_final

label(s3_game_race)
s3_game_race:
   mov [game_mode],3
jmp s3_set_mode_ret

label(s3_game_final)
s3_game_final:
   mov [game_mode],7
   mov [game_weekday],4
   mov [game_reset],1


jmp s3_set_mode_ret

label(s3_game_none)
s3_game_none:

{  push 0
  push -1
  push s_setgame_none
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_game_s3round)
s3_game_s3round:

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov [game_mode],3
mov [game_weekday],0
{  push 0
  push -1
  push s_setgame_s3round
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_game_duels)
s3_game_duels:

mov [game_mode],3
{  push 0
  push -1
  push s_setgame_duels
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_set_mode_ret)
s3_set_mode_ret:
     popad
ret



label(load_s3_registry_func)
load_s3_registry_func:
//--------- load teams --------------
push s_rp
push s_teams_filepath
call msvcrt.fopen //fopen(filepath, "r+")
add esp,8
push eax
    push tmpbuffer_size
    push 1
    lea eax,[tmpbuffer]
    push eax
    call msvcrt.fread
    add esp,C
call msvcrt.fclose
add esp,4
//----------
{
sub esp,8

lea eax,[esp+4]
push eax
push s_newline
push tmpbuffer
call msvcrt.strtok_s
add esp,C

xor ecx,ecx
label(teams_line_token_loop)
teams_line_token_loop:
  push ecx

push eax
push tmpbuffer2
call msvcrt.strcpy
add esp,8

//--- name
  lea eax,[esp+4]
  push eax
  push s_comma
  push tmpbuffer2
  call msvcrt.strtok_s
  add esp,C

    mov ecx,[esp]
    imul ecx,s3ts
  push eax
  lea eax,[s3t0+s3t_name+ecx]
  push eax
  call msvcrt.strcpy
  add esp,8

//--- tag

  lea eax,[esp+4]
  push eax
  push s_comma
  push 0
  call msvcrt.strtok_s
  add esp,C

    mov ecx,[esp]
    imul ecx,s3ts
  push eax
  lea eax,[s3t0+s3t_tag+ecx]
  push eax
  call msvcrt.strcpy
  add esp,8

//--- captain

  lea eax,[esp+4]
  push eax
  push s_comma
  push 0
  call msvcrt.strtok_s
  add esp,C

   //   pushad
   //push 0
   //push -1
   //push eax
   //push 0
   //call message_func
   //add esp,10
   //   popad

  push eax
  call msvcrt.atoi
  add esp,4

  mov ecx,[esp]
  imul ecx,s3ts
  mov [s3t0+s3t_captain+ecx],eax
  //mov [s3t0+s3t_playing+ecx],0

//---

lea eax,[esp+8]
push eax
push s_newline
push 0
call msvcrt.strtok_s
add esp,C

label(teams_line_token_next)
teams_line_token_next:
   pop ecx
   inc ecx
cmp eax,0
jne teams_line_token_loop

add esp,8
}


//-------- load participants --------








ret
createThread(load_s3_registry_func)


[DISABLE]
dealloc(newmem460)
"subrosadedicated.exe"+8373B:
mov [subrosadedicated.exe+8ED176C],eax
//Alt: db A3 6C 17 F5 09
dealloc(newmem431)
"subrosadedicated.exe"+83A16:
call subrosadedicated.exe+44880
//Alt: db E8 65 0E FC FF
dealloc(newmem403)
"subrosadedicated.exe"+838E8:
call subrosadedicated.exe+74760
//Alt: db E8 73 0E FF FF
dealloc(newmem376)
"subrosadedicated.exe"+85444:
mov [subrosadedicated.exe+8ED1764],00000003
//Alt: db C7 05 64 17 F5 09 03 00 00 00
dealloc(newmem350)
"subrosadedicated.exe"+7A8F8:
mov [subrosadedicated.exe+8ED1774],eax
//Alt: db A3 74 17 F5 09
dealloc(newmem324)
"subrosadedicated.exe"+7A919:
mov [subrosadedicated.exe+8ED176C],00000708
//Alt: db C7 05 6C 17 F5 09 08 07 00 00
dealloc(newmem300)
"subrosadedicated.exe"+77C90:
jne subrosadedicated.exe+77C9B
push edi
call subrosadedicated.exe+30D40
//Alt: db 75 09 57 E8 A8 90 FB FF
dealloc(newmem277)
"subrosadedicated.exe"+77864:
mov [esi-000000F4],ecx
//Alt: db 89 8E 0C FF FF FF
dealloc(newmem255)
"subrosadedicated.exe"+70420:
call subrosadedicated.exe+13250
//Alt: db E8 2B 2E FA FF
dealloc(newmem234)
"subrosadedicated.exe"+322E6:
call subrosadedicated.exe+13250
//Alt: db E8 65 0F FE FF
dealloc(newmem214)
"subrosadedicated.exe"+80638:
mov [esi+subrosadedicated.exe+5312E4],FFFFFFFF
//Alt: db C7 86 E4 12 5B 01 FF FF FF FF
dealloc(newmem195)
"subrosadedicated.exe"+7A895:
mov [eax-30],ecx
mov [eax],ebx
//Alt: db 89 48 D0 89 18
dealloc(newmem177)
"subrosadedicated.exe"+852BA:
cmp [eax+14],ecx
jne subrosadedicated.exe+85316
//Alt: db 39 48 14 75 57
dealloc(newmem160)
"subrosadedicated.exe"+61E2B:
mov [edi+subrosadedicated.exe+5312E4],edx
//Alt: db 89 97 E4 12 5B 01
dealloc(newmem144)
"subrosadedicated.exe"+7EE92:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78
//Alt: db 83 86 F8 12 5B 01 88
dealloc(newmem129)
"subrosadedicated.exe"+251CD:
call subrosadedicated.exe+7450
//Alt: db E8 7E 22 FE FF
dealloc(newmem114)
"subrosadedicated.exe"+251A3:
call subrosadedicated.exe+7450
//Alt: db E8 A8 22 FE FF
dealloc(newmem101)
"subrosadedicated.exe"+84AEE:
call subrosadedicated.exe+7450
//Alt: db E8 5D 29 F8 FF
dealloc(newmem89)
"subrosadedicated.exe"+61C5A:
call subrosadedicated.exe+45120
//Alt: db E8 C1 34 FE FF
dealloc(newmem67)
"subrosadedicated.exe"+79DF4:
call subrosadedicated.exe+48860
//Alt: db E8 67 EA FC FF

dealloc(newmem57)
"subrosadedicated.exe"+60BD9:
call subrosadedicated.exe+48860
//Alt: db E8 82 7C FE FF
dealloc(newmem39)
"subrosadedicated.exe"+6EB0:
push ebx
mov ebx,[esp+08]
//Alt: db 53 8B 5C 24 08
dealloc(newmem30)
"subrosadedicated.exe"+84F2B:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(custom_newmem)
"subrosadedicated.exe"+604C6:
mov eax,[subrosadedicated.exe+8BDC4]
//Alt: db A1 C4 BD 94 00
dealloc(newmem23)
"subrosadedicated.exe"+8113D:
mov [ecx+subrosadedicated.exe+13841688],ebx
//Alt: db 89 99 88 16 8C 14
dealloc(newmem17)
"subrosadedicated.exe"+85011:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(newmem11)
"subrosadedicated.exe"+85422:
mov [subrosadedicated.exe+8ED176C],0000003C
//Alt: db C7 05 6C 17 F5 09 3C 00 00 00
dealloc(newmem6)
"subrosadedicated.exe"+84FD1:
mov [subrosadedicated.exe+8ED176C],ecx
//Alt: db 89 0D 6C 17 F5 09
dealloc(newmem2)
"subrosadedicated.exe"+84A50:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(newmem)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF

dealloc(mydata)
dealloc(mycode)
dealloc(tmpbuffer)
dealloc(strings)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>148</ID>
          <Description>"!!! S3 !!! - new  +4 racing tracks  9/24/19"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Tracks start on line 3100


define(duels_spawn1_x,1177.5)
define(duels_spawn1_y,69.0)
define(duels_spawn1_z,1779.8)
  define(duels_spawn2_x,1261.2)
  define(duels_spawn2_y,69.0)
  define(duels_spawn2_z,1779.8)
     define(duels_floor,68.25)
     define(duels_ceil,69.8)
define(duels_mags,7)
define(duels_time,#14400) //3.5 minutes
define(duels_prep,#350)

define(s3round_time,#25200) //7 minutes
define(s3round_days,5)
define(s3round_cash_base,#500)
define(s3round_cash_inc,#500)

//define(race_spacing_width,4.5)
define(race_spacing_width,3.0)
define(race_spacing_depth,7.5)
define(race_spacing_columns_bitmask,7)
define(race_spacing_columns_bits,3)
//define(race_spacing_columns_bitmask,3)
//define(race_spacing_columns_bits,2)
define(race_checkpoint_radius,50.0)


define(vanilla_mission_spawn_time,#5400) //#3600 in previous versions
//----------------------------------

define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_phone,30)
define(p_admin,34)
define(p_acc,3C)
define(p_ready,48)
define(p_cash,4C)
define(p_team,74)
define(p_stocks,7C)
define(p_h,88)
define(p_skin,3798)
define(p_suit_color,37AC)
define(p_slot0,17E0)
define(p_slot_item1,4)
define(p_slot_item2,10)
define(p_slots,64)
define(p_slots_max,7)
define(ps,381C)
define(players_max,#255)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_car,20)
define(h_seat,24)
define(h_pos,74)
define(h_carexittimer,44)
define(h_controls,1B4)
define(h_health0,34)
define(h_grounded,70)
define(h_bp0_pb,1C0)
define(h_bp0_pos,1C4)
define(h_bps,120)
define(h_health1,32A0)
define(h_health2,32A4)
define(h_skin,34D8)
define(h_suit_color,34EC)
define(h_slot0,3038)
define(h_slot1,3060)
define(h_slot2,3088)
define(h_slots,28)
define(h_slots_max,7)
define(hs,3540)
define(humans_max,#255)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)

define(it0,subrosadedicated.exe+192D1560)
define(it_cost,0)
define(it_gun,8)
define(it_capacity,1C)
define(it_name,28)
define(its,D88)

define(corp0,subrosadedicated.exe+8ED17F4)
define(corp_enabled,54)
define(corp_spawnpos,18)
define(corp_m_type,A0)
define(corp_m_provided,DC)
define(corps,15e4)

define(corp_names,subrosadedicated.exe+8B460)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)
define(game_timer2,subrosadedicated.exe+8ED176C+4)
define(game_counter,subrosadedicated.exe+8ED175C)
define(game_reset,subrosadedicated.exe+8B1298C)
define(game_mode,subrosadedicated.exe+8ED1548)
define(game_weekday,subrosadedicated.exe+8ED175C)
define(game_daytime,subrosadedicated.exe+33E58A20)

define(message_func,subrosadedicated.exe+7450)



define(human_spawn_func,subrosadedicated.exe+74760)
               //(float* position, float* rotation, int player_id)

define(arm_func,subrosadedicated.exe+4D4B0)
               //(character, weapon, amount of mags)
define(vehicle_spawn_func,subrosadedicated.exe+48860)
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)
define(item_spawn_func,subrosadedicated.exe+44880)
               //(int item_type, float *pos, [float* velocity], float *orientation)

//define(grab_item_func,subrosadedicated.exe+22C40)
define(grab_item_func,subrosadedicated.exe+45120)
               //(item_id, idk, character, slot)

define(player_sync_func,subrosadedicated.exe+7690)
define(player_sync_cash_func,subrosadedicated.exe+7800)

define(item_sync_func,subrosadedicated.exe+7570)

define(create_player_func,subrosadedicated.exe+31B50)

[ENABLE]










alloc(mydata,32768)
define(heaven_points,mydata+0)
define(tmp1,mydata+90)
define(tmp2,mydata+94)
define(tmp3,mydata+98)
define(tmp4,mydata+9C)
define(custom_game,mydata+80)
define(timer_locked,mydata+88)

 define(race_track_time,mydata+70)
 define(race_track_car,mydata+74)
 define(race_spawn_orientation,mydata+78)
define(race_checkpoint_count,mydata+7C)
define(rcp0,mydata+120)
define(rcp_pos,8)
define(rcp_color,4)
define(rcp_name_p,0)
define(rcp__sizeof,20)
define(race_checkpoint_leading,mydata+94)
define(race_players_finished,mydata+98)
define(race_players_spawned,mydata+9C)
//define(race_best_time,mydata2+840)
//define(race_best_name,mydata2+850)
define(race_spawn_point,mydata+104)
define(race_finished_at,mydata+100)
define(s3round_shift_scores,mydata+60)
  define(GAME_NONE,0)
  define(GAME_S3ROUND,1)
  define(GAME_RACE,2)
  define(GAME_DUELS,4)
  define(GAME_FINAL,5)
//--- s3 teams
define(s3t0,mydata+700)
define(s3t_dq,0)
define(s3t_playing,4)
define(s3t_captain,8)
define(s3t_tag,20)
define(s3t_name,30)
define(s3ts,50)
define(s3tmax,#16)
//--- s3 participants
define(s3p0,mydata+D00)
define(s3p_team,4)
define(s3p_sub,C)
define(s3p_name,20)
define(s3ps,40)
define(s3tmax,#96)
//--- player extras
define(p20,mydata+2600)
define(p2_s3p,0)
define(p2_duels_gun_progress,10)
define(p2_duels_gun_last,14)
define(p2_duels_bounds_timer,18)
define(p2_race_checkpoint,20)
define(p2s,30)

alloc(tmpbuffer,8192)
define(tmpbuffer_size,#8192)
alloc(tmpbuffer2,8192)
define(tmpbuffer2_size,#8192)
alloc(strings,8192)
strings:
label(s_newline)
s_newline:
db D A 0
label(s_comma)
s_comma:
db ',' 0
label(s_teams_filepath)
s_teams_filepath:
db 's' 33 '_' 't' 'e' 'a' 'm' 's' '.' 't' 'x' 't' 0
label(s_players_filepath)
s_players_filepath:
db 's' 33 '_' 'p' 'l' 'a' 'y' 'e' 'r' 's' '.' 't' 'x' 't' 0

label(s_format_bounds)
s_format_bounds:
db '%' 'i' ' ' '!' '!' '!' 0
label(s_posformat)
s_posformat:
db 'p' 'o' 's' ':' ' ' '%' 'f' ',' ' ' '%' 'f' ',' ' ' '%' 'f' 0
label(s_2s)
s_2s:
  db '%' 's' '%' 's' 0
label(s_timetest)
s_timetest:
db '%' 30 32 'i' ':' '%' 30 32 'i'  '.' '%' 'i' 0
label(s_timerlocked)
s_timerlocked:
db 'T' 'i' 'm' 'e' 'r' ' ' 'l' 'o' 'c' 'k' 'e' 'd' '.' 0
label(s_timerunlocked)
s_timerunlocked:
db 'T' 'i' 'm' 'e' 'r' ' ' 'u' 'n' 'l' 'o' 'c' 'k' 'e' 'd' '.' 0
label(s_s3round_day)
s_s3round_day:
db 'D' 'a' 'y' ' ' '%' 'i' ' ' 'o' 'u' 't' ' ' 'o' 'f' ' ' '%' 'i' '.' ' ' 'C' 'a' 's' 'h' ':' ' ' '$' '%' 'i' '.' 0
label(s_duels_win)
s_duels_win:
db '%' 's' ' ' 'w' 'i' 'n' 's' '!' ' ' '(' '%' 's' ')' 0

label(s_cp)
s_cp:
db '%' 'i' ' ' '/' ' ' '%' 'i' '.' ' ' 'n' 'e' 'x' 't' ' ' 's' 't' 'o' 'p' ':' ' ' '%' 's' 0
label(s_lead)
s_lead:
db '%' 's' ' ' 'i' 'n' ' ' 't' 'h' 'e' ' ' 'l' 'e' 'a' 'd' '.' ' ' '(' '%' 's' ')' 0
label(s_won)
s_won:
db '%' 's' ' ' 'w' 'o' 'n' '!' '!' '!' ' ' 't' 'i' 'm' 'e' ':' ' ' '%' 's' 0
label(s_finish)
s_finish:
db '%' 'i' '.' ' ' '%' 's' '.' ' ' ' ' ' ' '%' 's' 0
label(s_hp)
s_hp:
db '%' 'i' '/' '%' 'i' ' ' 'h' 'p' 0
label(s_first)
s_first:
db 'f' 'i' 'r' 's' 't' ' ' 'c' 'h' 'e' 'c' 'k' 'p' 'o' 'i' 'n' 't' ':' ' ' '%' 's' 0
label(s_best)
s_best:
db 'B' 'e' 's' 't' ' ' 't' 'i' 'm' 'e' ':' ' ' ' ' '%' 's' ' ' ' ' 'b' 'y' ' ' '%' 's' 0
label(s_lumber)
s_lumber:
db 'L' 'u' 'm' 'b' 'e' 'r' ' ' 'M' 'i' 'l' 'l' 0
label(s_cityhall)
s_cityhall:
db 'C' 'i' 't' 'y' ' ' 'h' 'a' 'l' 'l' ' ' '(' 'b' 'e' 'h' 'i' 'n' 'd' ' ' 'E' 'l' 'e' 'p' 'h' 'a' 'n' 't' ')' 0
label(s_goldmen)
s_goldmen:
db 'G' 'o' 'l' 'd' 'm' 'e' 'n' 0
label(s_monsota)
s_monsota:
db 'M' 'o' 'n' 's' 'o' 't' 'a' 0
label(s_oxs)
s_oxs:
db 'O' 'X' 'S' ' ' 'b' 'a' 's' 'e' 0
label(s_water)
s_water:
db 'W' 'a' 't' 'e' 'r' ' ' 'T' 'r' 'e' 'a' 't' 'm' 'e' 'n' 't' 0
label(s_basketball)
s_basketball:
db 'B' 'a' 's' 'k' 'e' 't' 'b' 'a' 'l' 'l' ' ' 'C' 'o' 'u' 'r' 't' 0
label(s_museum)
s_museum:
db 'M' 'u' 's' 'e' 'u' 'm' 0
label(s_hondo_tunnel)
s_hondo_tunnel:
db 'H' 'o' 'n' 'd' 'o' ' ' 't' 'u' 'n' 'n' 'e' 'l' 0
label(s_rio)
s_rio:
db 'R' 'I' 'O' 0
label(s_northpark_ahead)
s_northpark_ahead:
db 'a' 'h' 'e' 'a' 'd' ' ' '(' 'N' 'o' 'r' 't' 'h' ' ' 'P' 'a' 'r' 'k' ')' 0
label(s_pizza)
s_pizza:
db 'P' 'i' 'z' 'z' 'a' ' ' 'p' 'l' 'a' 'c' 'e' ' ' '(' 'G' 'o' 'l' 'd' 'm' 'e' 'n' ')' 0
label(s_hotdog)
s_hotdog:
db 'H' 'o' 't' 'd' 'o' 'g' 0
label(s_mall)
s_mall:
db 'M' 'a' 'l' 'l' 0
label(s_redcube)
s_redcube:
db 'R' 'e' 'd' ' ' 'C' 'u' 'b' 'e' 's' ' ' 'P' 'a' 'r' 'k' 0
label(s_blue)
s_blue:
db 'B' 'l' 'u' 'e' ' ' 't' 'r' 'a' 'i' 'l' 'e' 'r' ' ' 'a' 'h' 'e' 'a' 'd' '!' 0


label(s_log_s3)
s_log_s3:
  db 'l' 'o' 'g' 's' '_' 's' '3' '.' 't' 'x' 't' 0
label(s_a)
s_a:
  db 'a' 'b' 0
label(s_w)
s_w:
  db 'w' 'b' 0
label(s_r)
s_r:
  db 'r' 'b' 0
label(s_rp)
s_rp:
  db 'r' '+' 0
label(s_format_logteamcash)
s_format_logteamcash:
  db '%' 'i' '.' ' ' '%' 's' ' ' '$' '%' 'i' ' ' '(' '+' '$' '%' 'i' ')' 0


label(s_delim)
s_delim:
  db ',' 0
label(s_pos)
s_pos:
db '/' 'p' 'o' 's' 0
label(s_bot)
s_bot:
db '/' 'b' 'o' 't' 0
label(s_rg)
s_rg:
db '/' 'r' 'g' 0
label(s_skip)
s_skip:
db '/' 's' 'k' 'i' 'p' 0
label(s_op)
s_op:
db '/' 'o' 'p' 0
label(s_rn)
s_rn:
db '/' 'r' 'n' 0
label(s_pre)
s_pre:
db '/' 'p' 'r' 'e' 0
label(s_mv)
s_mv:
db '/' 'm' 'v' 0
label(s_shift)
s_shift:
  db '/' 's' 'h' 'i' 'f' 't' 0
label(s_kill)
s_kill:
  db '/' 'k' 'i' 'l' 'l' 0
label(s_lock)
s_lock:
  db '/' 'l' 'o' 'c' 'k' 0
label(s_s3mode)
s_s3mode:
  db '/' 's' 33 'm' 'o' 'd' 'e' 0
label(s_s3sync)
s_s3sync:
  db '/' 's' 33 's' 'y' 'n' 'c' 0
label(s_ready)
s_ready:
  db '/' 'r' 'e' 'a' 'd' 'y' 0
label(s_setcash)
s_setcash:
  db '/' 's' 'e' 't' 'c' 'a' 's' 'h' 0
label(s_putgun)
s_putgun:
  db '/' 'p' 'u' 't' 'g' 'u' 'n' 0
label(s_arm_all)
s_arm_all:
  db '/' 'a' 'r' 'm' '_' 'a' 'l' 'l' 0

{label(s_setgame_none)
s_setgame_none:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'd' 'e' 'f' 'a' 'u' 'l' 't' 0
label(s_setgame_s3round)
s_setgame_s3round:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'S' 33 ' ' 'R' 'o' 'u' 'n' 'd' 0
label(s_setgame_duels)
s_setgame_duels:
  db 'G' 'a' 'm' 'e' ' ' 'm' 'o' 'd' 'e' ':' ' ' 'G' 'u' 'n' ' ' 'G' 'a' 'm' 'e' 0}

//---------- custom admin commands ----------------


alloc(custom_newmem,16384)
label(custom_returnhere)
label(custom_originalcode)
label(custom_exit)

custom_newmem:
       add esp,144
       pushad
//esi = *msg
//edi = p
imul ebx,edi,ps //p*
cmp [p0+p_admin+ebx],0
je commands_skip

//-------------- /pos
  push edi
push 4
push s_pos
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_1

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul eax,ecx,hs //h*
  sub esp,18
  fld [h0+h_pos+0+eax]
  fld [h0+h_pos+4+eax]
  fld [h0+h_pos+8+eax]
  fstp qword [esp+10]
  fstp qword [esp+8]
  fstp qword [esp+0]

  push s_posformat
  push tmpbuffer
  call msvcrt.sprintf
  add esp,20

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

//-------------- /bot
label(commands_1)
commands_1:
  push edi
push 4
push s_bot
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_2

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul edx,ecx,hs //h*

  pushad
    call create_player_func
    mov [esp+1C],eax
  popad
mov ebp,eax //p2

imul edi,ebp,ps
mov [p0+2D04+edi],1
mov [p0+3794+edi],1
mov [p0+37AC+edi],1
mov [p0+37A8+edi],2
mov [p0+p_team+edi],2

  pushad

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp
     push ebp
     push esi
     lea esi,[h0+h_pos+edx]
     push esi
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,C+24
     mov [esp+1C],eax
  popad

mov [p0+p_h+edi],eax


jmp commands_skip
//-------------- /rg
label(commands_2)
commands_2:
  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_3

     mov [game_reset],1

jmp commands_skip
//-------------- /skip
label(commands_3)
commands_3:
  push edi
push 5
push s_skip
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_4

     mov [game_timer],#10

jmp commands_skip
//-------------- /op
label(commands_4)
commands_4:
  push edi
push 3
push s_op
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_5

add esi,4
push esi
call find_player_func
add esp,4
   cmp eax,-1
   je commands_skip

imul ebx,eax,ps
mov [p0+p_admin+ebx],1

lea ecx,[p0+p_name+ebx]
push ecx
push subrosadedicated.exe+89368 // ["%s admin"]
push tmpbuffer
call msvcrt.sprintf
add esp,C

push 0
push -1
push tmpbuffer
push 4
call message_func
add esp,10


jmp commands_skip
//-------------- /rn
label(commands_5)
commands_5:
  push edi
push 3
push s_rn
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_6

//-- arg 1 --
add esi,4

push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
    cmp eax,-1
       pop ebx
    je commands_skip

//-- arg 2 --

         push eax
push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

       push ebx
push #32
push eax
imul ebx,ps
lea ecx,[p0+p_name+ebx]
push ecx
call msvcrt.strncpy
add esp,C
       //pop ebx
call player_sync_func
add esp,4


jmp commands_skip
//-------------- /pre
label(commands_6)
commands_6:
  push edi
push 4
push s_pre
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_7

//-- arg 1 --

add esi,5

push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
    cmp eax,-1
       pop ebx
    je commands_skip

//-- arg 2 --

         push eax
push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip
       push ebx
imul ebx,ps
lea ecx,[p0+p_name+ebx]
push ecx
push eax
push s_2s
push tmpbuffer
call msvcrt.sprintf
add esp,C
pop ecx

push #32
push tmpbuffer
push ecx
call msvcrt.strncpy
add esp,C
      //pop ebx
call player_sync_func
add esp,4


jmp commands_skip
//-------------- /mv
label(commands_7)
commands_7:
  push edi
push 3
push s_mv
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_8


add esi,4
push s_delim
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx

imul ecx,ebx,ps
  mov ebp,[p0+p_team+ecx]
mov [p0+p_team+ecx],eax

{
push [p0+p_stocks+ecx]
push ebx
call sell_stocks_func

//push ebx
call player_sync_func
//add esp,4

call player_sync_cash_func

add esp,8
}
{
mov eax,corp_stocks_s
imul eax,ebp
  fld [corp_stocks+eax]
   fimul [p0+p_stocks+ecx]
   fmul [stock_sell_coef]
 push eax
  fistp [esp]
 pop eax
add [p0+p_cash+ecx],eax
mov [p0+p_stocks+ecx],0
}

push ebx
call player_sync_func
   //call player_sync_cash_func
add esp,4


jmp commands_skip
//-------------- /shift
label(commands_8)
commands_8:
  push edi
push 6
push s_shift
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_9

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov [game_weekday],0
mov [game_reset],1

mov ecx,players_max
xor ebx,ebx
xor edx,edx
label(custom_shift_players)
custom_shift_players:

cmp [p0+ebx],0
je custom_shift_next

mov eax,[p0+p_team+ebx]
cmp eax,2
jg custom_shift_next

inc eax
cmp eax,2
jle custom_shift_1
xor eax,eax
label(custom_shift_1)
custom_shift_1:
mov [p0+p_team+ebx],eax

push ebx
push ecx
push edx

call player_sync_func

pop edx
pop ecx
pop ebx

label(custom_shift_next)
custom_shift_next:
  add ebx,ps
  inc edx
//loop custom_shift_players
  dec ecx
  cmp ecx,0
  jge custom_shift_players


jmp commands_skip
//-------------- /kill
label(commands_9)
commands_9:
  push edi
push 5
push s_kill
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_10


add esi,6
push esi
call find_player_func
add esp,4
   cmp eax,-1
   je commands_skip

imul eax,ps
mov ebx,[p0+p_h+eax]
imul ebx,hs
mov [h0+h_health0+ebx],0


jmp commands_skip
//-------------- /lock
label(commands_10)
commands_10:
  push edi
push 5
push s_lock
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_11

mov eax,1
sub eax,[timer_locked]
mov [timer_locked],eax


push 0
push -1
push s_timerlocked
  cmp eax,1
  je commands_lock_1
    mov [esp],s_timerunlocked
  label(commands_lock_1)
  commands_lock_1:
push 0
call message_func
add esp,10


jmp commands_skip
//-------------- /s3mode
label(commands_11)
commands_11:
  push edi
push 7
push s_s3mode
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_12


add esi,8
push esi
call msvcrt.atoi
add esp,4

push eax
call s3_set_mode_func
add esp,4


jmp commands_skip
//-------------- /s3sync
label(commands_12)
commands_12:
  push edi
push 7
push s_s3sync
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_13

  call load_s3_registry_func

jmp commands_skip
//-------------- /ready
label(commands_13)
commands_13:
  push edi
push 5
push s_ready
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_14

mov ecx,players_max
xor ebx,ebx
label(custom_ready_loop)
custom_ready_loop:
    mov [p0+p_ready+ebx],1
add ebx,ps
loop custom_ready_loop


jmp commands_skip
//-------------- /setcash
label(commands_14)
commands_14:
  push edi
push 8
push s_setcash
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_15

push s_delim
add esi,9
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx

imul ecx,ebx,ps
mov [p0+p_cash+ecx],eax
mov [p0+p_stocks+ecx],0

push ebx
call player_sync_cash_func
pop ebx


jmp commands_skip
//-------------- /putgun
label(commands_15)
commands_15:
  push edi
push 7
push s_putgun
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_16

//--- arg1 (player) ---

push s_delim
add esi,8
push esi
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax //p
call find_player_func
add esp,4
    cmp eax,-1
    je commands_skip
push eax
{
imul eax,ps
mov ecx,p_slots_max
label(custom_putgun_rem_loop)
custom_putgun_rem_loop:
     mov [p0+p_slot0+eax],0
add eax,p_slots
loop custom_putgun_rem_loop
}
//--- arg2 (gun) ---

push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
       pop ebx
   je commands_skip

   push ebx
push eax
call msvcrt.atoi
add esp,4
   pop ebx //p
//cmp eax,-1
//je commands_skip

push eax
push ebx
call player_put_gun_func
add esp,8

{
imul ebx,ps //p*+slot
  mov ebp,eax
  inc ebp //it_mag
imul edx,ebp,its
mov edx,[it0+it_capacity+edx]

//gun
mov [p0+p_slot0+ebx],1
mov [p0+p_slot0+p_slot_item1+ebx],eax
//mov [p0+p_slot0+p_slot_item1+4+ebx],ebp
  mov [p0+p_slot0+p_slot_item1+4+ebx],edx
  mov [p0+p_slot0+p_slot_item1+8+ebx],ebp
//mags
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+4+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+4+ebx],edx
//bandage
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],1
    mov [p0+p_slot0+p_slot_item1+ebx],E
    mov [p0+p_slot0+p_slot_item1+4+ebx],2
}

jmp commands_skip
//-------------- /arm_all
label(commands_16)
commands_16:
  push edi
push 8
push s_arm_all
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_17

push s_delim
lea ebx,[esi+9]
push ebx
call msvcrt.strtok
add esp,8
   cmp eax,0
   je commands_skip

push eax
call msvcrt.atoi
add esp,4

       push eax
push s_delim
push 0
call msvcrt.strtok
add esp,8
   cmp eax,0
        pop ebp
   je commands_skip

        push ebp
push eax
call msvcrt.atoi
add esp,4
        pop ebp


xor ecx,ecx //p
xor ebx,ebx //p*
label(custom_arm_all_loop)
custom_arm_all_loop:
  cmp [p0+ebx],0
    je custom_arm_all_next
  cmp [p0+p_team+ebx],6
    je custom_arm_all_next
  mov edx,[p0+p_h+ebx]
  cmp edx,-1
    je custom_arm_all_next

        pushad
   push eax
   push ebp
   push edx
   call arm_func
   add esp,C
        popad

label(custom_arm_all_next)
custom_arm_all_next:
  add ebx,ps
    inc ecx
    cmp ecx,players_max
    jl custom_arm_all_loop


jmp commands_skip
//-------------- /
label(commands_17)
commands_17:
{  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_18}




jmp commands_skip
//-------------- /
label(commands_18)
commands_18:
{  push edi
push 3
push s_rg
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_19}




label(commands_skip)
commands_skip:
       popad
       sub esp,144
custom_originalcode:
mov eax,[subrosadedicated.exe+8BDC4]

custom_exit:
jmp custom_returnhere

"subrosadedicated.exe"+604C6:
jmp custom_newmem
custom_returnhere:


//--------- round state 1 timer sped up -------------------
//used for round mission spawn

alloc(newmem30,2048)
label(returnhere30)
label(mission_originalcode)
label(mission_exit)

//todo: find another place to inject
newmem30:
  cmp [custom_game],GAME_RACE
    je mission_race

cmp ebx,#5300
jl mission_originalcode

  cmp [custom_game],GAME_S3ROUND
    je mission_s3round

jmp mission_originalcode
label(mission_race)
mission_race:
  cmp [game_timer],#5399
    jne mission_exit
mov [race_checkpoint_leading],0
mov [race_players_finished],0


                         pushad
//--- checkpoint markers ---

mov ecx,[race_checkpoint_count]
xor ebx,ebx
label(start_cp)
start_cp:
                 push ecx
                 push ebx
{
push (float)0.5
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)-0.5
mov esi,esp  //orientation
}
push (float)0.5
push (float)0.0
push (float)-0.5
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)0.5
push (float)0.0
push (float)-0.5
mov esi,esp  //orientation
  push (float)0.0
  push (float)0.0
  push (float)0.0
  mov edi,esp //velocity
push [rcp0+rcp_pos+8+ebx]
push [rcp0+rcp_pos+4+ebx]
push [rcp0+rcp_pos+0+ebx]
mov ebp,esp //position

push [rcp0+rcp_color+ebx]
push esi
push edi
push ebp
push #10
call vehicle_spawn_func
               //(type, *float[3] position, *float[3]? velocity, *float[9] orientation, color)
add esp,14+3C
                 pop ebx
                 pop ecx
add ebx,rcp__sizeof
//loop start_cp
  dec ecx
  cmp ecx,0
  jg start_cp

//--- players ----

xor ecx,ecx
xor ebx,ebx //p2
label(start_players)
start_players:

   //mov [player_checkpoints+ecx*4],0
   mov [p20+p2_race_checkpoint+ebx],0

 add ebx,p2s
  inc ecx
  cmp ecx,players_max
  jl start_players

//---- msg --------

{push 0
push -1
push s_msg0
push 0
call message_func
               //(int type, char* message, int channel, int variation)
  mov [esp+4],s_msg1
    call message_func
  mov [esp+4],s_msg2
    call message_func

 //-- best time --
     mov eax,[best_time]
     cmp eax,racing_time_max
     je init_best_time_msg_skip

                push best_name
     push [best_time]
     call timer_to_string_func
     add esp,4
                push tmpbuffer2
                push s_best
                push tmpbuffer
                call msvcrt.sprintf
                add esp,10
  mov [esp+4],tmpbuffer
  call message_func
       label(init_best_time_msg_skip)
       init_best_time_msg_skip:
add esp,10}


              popad
//-------------------------------------------------------
mov [game_timer],#900

jmp mission_exit
label(mission_s3round)
mission_s3round:
       pushad

mov ebp,[game_weekday]
dec ebp
imul ebp,s3round_cash_inc
add ebp,s3round_cash_base

xor ecx,ecx
xor ebx,ebx
label(mission_s3round_players_loop)
mission_s3round_players_loop:
   cmp [p0+ebx],0
     je mission_s3round_players_next
   cmp [p0+p_team+ebx],2
     jg mission_s3round_players_next

   mov [p0+p_cash+ebx],ebp
      pushad
   push ecx
   call player_sync_cash_func
   add esp,4
      popad

label(mission_s3round_players_next)
mission_s3round_players_next:
add ebx,ps
  inc ecx
  cmp ecx,players_max
  jl mission_s3round_players_loop

push ebp
push s3round_days
push [game_weekday]
push s_s3round_day
push tmpbuffer
call msvcrt.sprintf
add esp,14

push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10

       popad
mission_originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

mission_exit:
jmp returnhere30

"subrosadedicated.exe"+84F2B:
jmp newmem30
nop
returnhere30:


//-------- round state 1 -&gt; 2 ---------------------

alloc(newmem6,2048)
label(returnhere6)
label(round12_originalcode)
label(round12_exit)
newmem6:
cmp [custom_game],GAME_RACE
  je round12_race
cmp [custom_game],GAME_S3ROUND
  je round12_s3round
cmp [custom_game],GAME_DUELS
  je round12_duels
jmp round12_originalcode

label(round12_race)
round12_race:
   //...
     push eax
     mov eax,[race_track_time]
mov [game_timer],eax
     pop eax
jmp round12_exit
//-------------------------
label(round12_s3round)
round12_s3round:
   //...
mov [game_timer],s3round_time
jmp round12_antighost
//-------------------------
label(round12_duels)
round12_duels:
   pushad

xor ecx,ecx
xor ebx,ebx
label(round12_duels_loop)
round12_duels_loop:
 cmp [p0+ebx],0
   je round12_duels_next
 cmp [p0+p_h+ebx],-1
   je round12_duels_next
 cmp [p0+p_team+ebx],6
   je round12_duels_next
 cmp [p0+p_team+ebx],7
   je round12_duels_next
      push ebx
      push ecx

{mov eax,[p0+p_h+ebx]
//gun
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  add esp,C}

  call duels_give_gun_func

      pop ecx
      pop ebx
label(round12_duels_next)
round12_duels_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl round12_duels_loop

   popad
mov [game_timer],duels_time
jmp round12_antighost

//----------------------------
label(round12_antighost)
round12_antighost:
               pushad

mov ecx,2
label(start_playground)
start_playground:
push ecx

push (float)0.0
push (float)1.0
push (float)0.0
  push (float)0.0
  push (float)0.0
  push (float)1.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp

imul eax,ecx,C
push [heaven_points+eax+8]
push [heaven_points+eax+4]
push [heaven_points+eax+0]
mov edi,esp

push esi
push 0
push edi
push 22
call item_spawn_func
               //(int item_type, float *pos, [float* velocity], float *orientation)
add esp,10+30

pop ecx
dec ecx
  cmp ecx,0
  jge start_playground

               popad
jmp round12_exit
//-----------------------------

round12_originalcode:
mov [subrosadedicated.exe+8ED176C],ecx

round12_exit:
jmp returnhere6

"subrosadedicated.exe"+84FD1:
jmp newmem6
nop
returnhere6:

//-------- round state 1 timer --------------------

alloc(newmem2,2048)
label(returnhere2)
label(timer1_originalcode)
label(timer1_exit)

newmem2:
cmp [custom_game],GAME_DUELS
  je timer1_duels
jmp timer1_originalcode

label(timer1_duels)
timer1_duels:
  cmp [game_timer],vanilla_mission_spawn_time
    jge timer1_originalcode
  cmp [game_timer],duels_prep
    jle timer1_originalcode
  mov [game_timer],duels_prep
  jmp timer1_exit
timer1_originalcode:
                     cmp [timer_locked],1
                     je timer1_exit
mov [subrosadedicated.exe+8ED176C],ebx

timer1_exit:
jmp returnhere2

"subrosadedicated.exe"+84A50:
jmp newmem2
nop
returnhere2:

//--------- round everyone dead -------------------

alloc(newmem11,2048)
label(returnhere11)
label(roundskipdead_originalcode)
label(roundskipdead_exit)

newmem11:
cmp [custom_game],GAME_DUELS
  je roundskipdead_duels
jmp roundskipdead_originalcode

label(roundskipdead_duels)
roundskipdead_duels:
   jmp roundskipdead_exit

roundskipdead_originalcode:
mov [subrosadedicated.exe+8ED176C],0000003C

roundskipdead_exit:
jmp returnhere11

"subrosadedicated.exe"+85422:
jmp newmem11
nop
nop
nop
nop
nop
returnhere11:

//-------- round human spawn ----------------------

alloc(newmem,2048)
label(returnhere)
label(spawn_originalcode)
label(spawn_exit)

newmem:

cmp [custom_game],GAME_NONE
je spawn_originalcode
     pushad
mov ebp,[esp+20] //pos
mov ecx,[esp+28] //p
imul ebx,ecx,ps  //p*
mov edx,[p0+p_team+ebx]

cmp [custom_game],GAME_RACE
  je spawn_race
cmp [custom_game],GAME_S3ROUND
  je spawn_s3round
cmp [custom_game],GAME_DUELS
  je spawn_duels
jmp spawn_ret

label(spawn_race) //=======================
spawn_race:

  push ecx
  call player_clear_slots
  add esp,4

 popad
 call human_spawn_func
      pushad
//----------- racing vehicle -----

cmp [race_spawn_orientation],1
  je spawn_race_orientation1

push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
jmp spawn_race_orientation_ret

{push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0}

label(spawn_race_orientation1)
spawn_race_orientation1:
push (float)-1.0
push (float)0.0
push (float)0.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)0.0
push (float)0.0
push (float)-1.0

label(spawn_race_orientation_ret)
spawn_race_orientation_ret:
mov esi,esp  //orientation


push [race_spawn_point+8]
push [race_spawn_point+4]
push [race_spawn_point+0]
mov edi,esp //position
//---------------
push (float)race_spacing_width
push (float)race_spacing_depth
  mov edx,[race_players_spawned]
  and edx,race_spacing_columns_bitmask
push edx
  mov edx,[race_players_spawned]
  shr edx,race_spacing_columns_bits
push edx

      cmp [race_spawn_orientation],1
       je spawn_race_spacing_orientation1

           fild [esp+4]
             fmul [esp+C]
             fchs
             fadd [race_spawn_point+8]
             fstp [edi+8]
           fild [esp+0]
             fmul [esp+8]
             //fchs
             fadd [race_spawn_point+0]
             fstp [edi+0]
         jmp spawn_race_spacing_orientation_ret

     label(spawn_race_spacing_orientation1)
     spawn_race_spacing_orientation1:
           fild [esp+4]
             fmul [esp+C]
             fchs
             fadd [race_spawn_point+0]
             fstp [edi+0]
           fild [esp+0]
             fmul [esp+8]
             //fchs
             fadd [race_spawn_point+8]
             fstp [edi+8]
  label(spawn_race_spacing_orientation_ret)
  spawn_race_spacing_orientation_ret:
add esp,10
//---------------

            pushad
        call msvcrt.rand
        and eax,3
        mov [esp+18],eax
            popad
push ecx
push esi
push 0
push edi
push [race_track_car]
call vehicle_spawn_func
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)
add esp,14+30

  mov ecx,[esp+1C] //h
  imul ebx,ecx,hs //h*

    mov [h0+h_car+ebx],eax
    mov [h0+h_seat+ebx],0

      popad
inc [race_players_spawned]

 jmp spawn_exit

label(spawn_s3round) //=======================
spawn_s3round:

  push ecx
  call player_clear_slots
  add esp,4

jmp spawn_ret
label(spawn_duels) //=======================
spawn_duels:

  push ecx
  call player_clear_slots
  add esp,4

  {mov [tmp1],ecx //tmp1 = p
  mov [tmp2],edx //tmp2 = team
    add [p0+p_suit_color+ebx],3}
imul esi,ecx,p2s
mov [p20+p2_duels_gun_progress+esi],0
mov [p20+p2_duels_bounds_timer+esi],0

mov [ebp+0],(float)duels_spawn1_x
mov [ebp+4],(float)duels_spawn1_y
mov [ebp+8],(float)duels_spawn1_z

cmp edx,0
je spawn_duels_team1

mov [ebp+0],(float)duels_spawn2_x
mov [ebp+4],(float)duels_spawn2_y
mov [ebp+8],(float)duels_spawn2_z

label(spawn_duels_team1)
spawn_duels_team1:

       {push ecx
       call player_sync_func
       add esp,4}
  popad
call human_spawn_func

     {  pushad
     mov ecx,[tmp1]
     imul ecx,ps
     mov edx,[tmp2]
     mov [p0+p_suit_color+ecx],edx
       popad}
{
    pushad
//gun
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  pop eax
  add esp,8
  mov [esp+1C],eax
    popad
}
jmp spawn_exit

label(spawn_ret)
spawn_ret:
     popad
spawn_originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
spawn_exit:
jmp returnhere

"subrosadedicated.exe"+84931:
jmp newmem
returnhere:



//-------------- player death -------------------


alloc(newmem23,2048)
label(returnhere23)
label(death_originalcode)
label(death_exit)

newmem23:
cmp [custom_game],GAME_DUELS
  je death_duel
jmp death_originalcode

label(death_duel)
death_duel:
      pushad
mov edi,eax //p_victim
  cmp edi,-1
  je death_duel_break
imul edi,p2s //p2_victim*
  cmp [p20+p2_duels_gun_progress+edi],5
  jge death_duel_break
mov edx,ecx //p_victim*
  cmp [p0+p_team+edx],2
    jg death_duel_break

xor ecx,ecx
xor ebx,ebx
label(death_duel_loop)
death_duel_loop:
  cmp [p0+ebx],0
    je death_duel_next
  cmp ebx,edx
    je death_duel_next
  cmp [p0+p_team+ebx],6
    je death_duel_next
  cmp [p0+p_team+ebx],7
    je death_duel_next

  imul esi,ecx,p2s //p2_killer*
  inc [p20+p2_duels_gun_progress+esi]
  cmp [p20+p2_duels_gun_progress+esi],5
  jge death_duel_victory
//-- frag counted --

  push ecx
  call duels_give_gun_func
  add esp,4

  jmp death_duel_break
  label(death_duel_victory)
  death_duel_victory:
//-- victory --

  mov eax,[p20+p2_duels_gun_last+edi]
    push eax
    push ecx
    call player_put_gun_func
    pop ecx //p
    pop ebx //it

    imul ebx,its
    lea eax,[it0+it_name+ebx]
  push eax
    imul ecx,ps
    lea eax,[p0+p_name+ecx]
  push eax
  push s_duels_win
  push tmpbuffer
  call msvcrt.sprintf
  add esp,10

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

  call log_func

  mov [game_timer],#360
  jmp death_duel_break

label(death_duel_next)
death_duel_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl death_duel_loop
label(death_duel_break)
death_duel_break:


      popad

death_originalcode:
mov [ecx+subrosadedicated.exe+13841688],ebx

death_exit:
jmp returnhere23

"subrosadedicated.exe"+8113D:
jmp newmem23
nop
returnhere23:




//---------- round state 2 timer -----------------


alloc(newmem17,16384)
label(returnhere17)
label(update_originalcode)
label(update_exit)

newmem17:
cmp [custom_game],GAME_RACE
  je update_race
cmp [custom_game],GAME_S3ROUND
  je update_s3round
cmp [custom_game],GAME_DUELS
  je update_duels
jmp update_originalcode


//================= /\/\/\/\/\/\/\/\ =======================
label(update_race)
update_race:
 dec [game_timer]
//------------------------------- update racing -----------------------
                      pushad
       //jmp update_racing_ret
cmp [game_timer],0
  jle update_racing_end
cmp [race_players_finished],0
  je update_racing_start
mov eax,[race_finished_at]
sub eax,#3000
cmp [game_timer],eax
  jle update_racing_end

label(update_racing_start)
update_racing_start:

push 0 //player count

xor ecx,ecx //p
xor ebx,ebx //p*
label(update_race_players)
update_race_players:
  cmp [p0+ebx],0
    je update_race_players_next
  cmp [p0+p_team+ebx],6
    je update_race_players_next
  mov ebp,[p0+p_h+ebx] //h
  cmp ebp,-1
    je update_race_players_next
  imul edx,ebp,hs //h*

      cmp [h0+h_seat+edx],0
      jne update_race_players_next

      //mov esi,[player_checkpoints+ecx*4] //cp
      imul esi,ecx,p2s
	  mov esi,[p20+p2_race_checkpoint+esi]
        cmp esi,[race_checkpoint_count]
          jge update_race_players_next
      imul edi,esi,rcp__sizeof //cp*

             inc [esp]

         push eax
      mov eax,[race_track_time]
      dec eax
    cmp [game_timer],eax
    //cmp [game_timer],0
         pop eax
    jne race_bound_check

//------- first checkpoint message ---------
                pushad
push [rcp0+rcp_name_p]
push s_first
push tmpbuffer
call msvcrt.sprintf
add esp,C
                popad
                pushad
push 0
push ebp
push tmpbuffer
push 1
call message_func
add esp,10
                popad

//================= next checkpoint check ========
  label(race_bound_check)
  race_bound_check:

   push (float)race_checkpoint_radius
      //if( distance(checkpoint.xz, player.xz) &lt; checkpoint_radius )
      fld [rcp0+rcp_pos+0+edi]
      fsub [h0+h_bp0_pos+0+edx]
        fmul st(0)
      fld [rcp0+rcp_pos+8+edi]
      fsub [h0+h_bp0_pos+8+edx]
        fmul st(0)
      faddp st(1)
      fsqrt
      fld [esp]
        fcomip st(1)
        fstp st(0)
        jb race_bounds_skip

          //mov [h0+h_health0+edx],0
          inc esi
          add edi,rcp__sizeof
          //mov [player_checkpoints+ecx*4],esi
		      push eax
			  imul eax,ecx,p2s
			  mov [p20+p2_race_checkpoint+eax],esi
			  pop eax
        cmp esi,[race_checkpoint_count]
          jge race_update_finish

//======== personal checkpoint message ==============================
                   pushad
            push [rcp0+rcp_name_p+edi]
            push [race_checkpoint_count]
            push esi
            push s_cp
            push tmpbuffer
          call msvcrt.sprintf
            add esp,14
                   popad
         pushad
push 0
push ebp
push tmpbuffer
push 1
call message_func
               //(int type, char* message, int channel, int variation)
add esp,10
         popad
//========= lead message ============================================
   cmp esi,[race_checkpoint_leading]
   jle race_bounds_skip
   mov [race_checkpoint_leading],esi
                   pushad
//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
            push tmpbuffer2
//-----------------------------------
            lea eax,[p0+p_name+ebx]
            push eax
            push s_lead
            push tmpbuffer
            call msvcrt.sprintf
            add esp,10
                   popad
       pushad
push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10
       popad
//===================================================================

      jmp race_bounds_skip
        label(race_update_finish)
        race_update_finish:
                   mov [h0+h_car+edx],-1
           inc [race_checkpoint_leading] //?
        inc [race_players_finished]
        cmp [race_players_finished],1
          je race_update_finish_victory

                        pushad
//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
                push tmpbuffer2
//-----------------------------------
                  lea eax,[p0+p_name+ebx]
                  push eax
                  push [race_players_finished]
                  push s_finish
                  push tmpbuffer
                call msvcrt.sprintf
                add esp,10+4
                        popad

            jmp update_race_print
              label(race_update_finish_victory)
              race_update_finish_victory:

    //add [p0+p_cash+ebx],racing_cash_prize

                        pushad

//----------------- time ------------
    pushad
push [game_timer]
call race_timer_to_string_func
add esp,4
    popad
                push tmpbuffer2
//-----------------------------------
                  lea eax,[p0+p_name+ebx]
                  push eax
                  push s_won
                  push tmpbuffer
                call msvcrt.sprintf
                add esp,10
                        popad

     mov eax,[game_timer]
     mov [race_finished_at],eax
{     cmp eax,[race_best_time]
     jge update_race_print

         //----- high score!! ----------
             mov [race_best_time],eax
                          pushad
                lea eax,[p0+p_name+ebx]
                push eax
                push best_name
                call msvcrt.strcpy
                add esp,8
                          popad
         //-----------------------------
}
       label(update_race_print)
       update_race_print:

       pushad
  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

  call log_func
       popad

//------------
        {cmp [race_players_finished],3
          jge bounds_end}
        mov eax,[race_players_spawned]
        cmp [race_players_finished],eax
          jge bounds_end
//------------


    jmp race_bounds_skip

         label(bounds_end)
         bounds_end:
              mov [game_state],3
              mov [game_timer],#600

  label(race_bounds_skip)
  race_bounds_skip:
  fstp st(0)

   add esp,4
//===================================================

//---- kill if out of a car? ----------
    cmp [p0+p_admin+ebx],1
    je update_race_players_next
    cmp [game_timer],0
    je update_race_players_next
    //cmp [h0+h_skin+edx],6
    //je update_race_players_next
    cmp [h0+h_car+edx],-1
    jne update_race_players_next
      mov [h0+h_health0+edx],0


label(update_race_players_next)
update_race_players_next:
 add ebx,ps
  inc ecx
  cmp ecx,players_max
  jl update_race_players

pop eax //player count
  cmp eax,0
  je update_racing_end



jmp update_racing_ret
   label(update_racing_end)
   update_racing_end:
       mov [game_state],3
       mov [game_timer],#600

label(update_racing_ret)
update_racing_ret:
                      popad
jmp update_exit
//=============== /\/\/\/\/\/\/\/\/\ ======================


label(update_s3round)
update_s3round:
    call s3_antighosting_update
 jmp update_originalcode

label(update_duels)
update_duels:
   cmp [game_timer],#400
     jl update_originalcode
              pushad
xor ecx,ecx //p
xor ebx,ebx //p*
label(update_duels_loop)
update_duels_loop:
 cmp [p0+ebx],0
   je update_duels_next
 cmp [p0+p_team+ebx],6
   je update_duels_next
 cmp [p0+p_team+ebx],7
   je update_duels_next
 mov eax,[p0+p_h+ebx] //h
 cmp eax,-1
   jne update_duels_alive
//if dead
     push ebx
     push ecx
//-- respawn ----
push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

sub esp,C
mov ebp,esp //position
      mov [ebp+0],(float)duels_spawn1_x
      mov [ebp+4],(float)duels_spawn1_y
      mov [ebp+8],(float)duels_spawn1_z
  mov edi,[p0+p_team+ebx]
  cmp edi,0
  je update_duels_spawn_team1
      mov [ebp+0],(float)duels_spawn2_x
      mov [ebp+4],(float)duels_spawn2_y
      mov [ebp+8],(float)duels_spawn2_z
  label(update_duels_spawn_team1)
  update_duels_spawn_team1:
       push (float)0.5
          pushad
            push ebp
          call frand1
            mov ebp,[esp]
           fmul [esp+24]
           fadd [ebp+0]
           fstp [ebp+0]
          call frand1
            pop ebp
           fmul [esp+20]
           fadd [ebp+8]
           fstp [ebp+8]
          popad
       add esp,4

     push ecx
     push esi
     push ebp
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,3C
      pop ecx
      pop ebx
   mov [p0+p_h+ebx],eax

//gun
  push ecx
  call duels_give_gun_func
  add esp,4
  {    pushad
  push duels_mags
  push 3 //M-16
  push eax
  call arm_func
  add esp,C
      popad}

jmp update_duels_next
//---------------
label(update_duels_alive)
update_duels_alive:
     push ebx
     push ecx
  imul edx,eax,hs //h*
  imul ebp,ecx,p2s //p2*
fld [h0+h_pos+4+edx]
   push (float)duels_floor
   fld [esp]
   add esp,4
  fcomip st(1)
  ja update_duels_bounds_apply
   push (float)duels_ceil
   fld [esp]
   add esp,4
  fcomip st(1)
  jb update_duels_bounds_apply
mov [p20+p2_duels_bounds_timer+ebp],0
jmp update_duels_bounds_skip
label(update_duels_bounds_apply)
update_duels_bounds_apply:

    inc [p20+p2_duels_bounds_timer+ebp]
mov eax,[p20+p2_duels_bounds_timer+ebp]
cmp eax,#320
jge update_duels_bounds_dead

mov esi,eax
and esi,#63
cmp esi,0
jne update_duels_bounds_skip

shr eax,6
mov esi,#5
sub esi,eax
push esi
push s_format_bounds
push tmpbuffer
call msvcrt.sprintf
add esp,C

      mov ebx,[esp+4] //p*
      mov ecx,[p0+p_h+ebx] //h
push 0
push ecx
push tmpbuffer
push 1
call message_func
add esp,10

jmp update_duels_bounds_skip
label(update_duels_bounds_dead)
update_duels_bounds_dead:
    mov [h0+h_health0+edx],0

label(update_duels_bounds_skip)
update_duels_bounds_skip:
  fstp st(0)
      pop ecx
      pop ebx
label(update_duels_next)
update_duels_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl update_duels_loop

          popad

update_originalcode:
                     cmp [timer_locked],1
                     je update_exit
mov [subrosadedicated.exe+8ED176C],ebx

update_exit:
jmp returnhere17

"subrosadedicated.exe"+85011:
jmp newmem17
nop
returnhere17:



//------------ stock purchase func ---------------

alloc(newmem39,2048)
label(returnhere39)
label(originalcode39)
label(exit39)

newmem39:
   cmp [custom_game],GAME_NONE
     je originalcode39
ret

originalcode39:
push ebx
mov ebx,[esp+08]

exit39:
jmp returnhere39

"subrosadedicated.exe"+6EB0:
jmp newmem39
returnhere39:


//------------- custom /car args -----------------

alloc(newmem57,2048)
label(returnhere57)
label(originalcode57)
label(exit57)

newmem57:
           pushad
cmp byte ptr [ebp+4],0
je car_skip
//---------------- first argument
push s_delim
lea ebx,[ebp+5]
push ebx
call msvcrt.strtok
add esp,8

cmp eax,0
je car_skip

push eax
call msvcrt.atoi
mov [esp+20+4],eax
pop eax
//--------------- second argument
push s_delim
push 0
call msvcrt.strtok
add esp,8

cmp eax,0
je car_skip

push eax
call msvcrt.atoi
mov [esp+20+4+10],eax
pop eax
//----------

label(car_skip)
car_skip:
           popad
originalcode57:
call subrosadedicated.exe+48860
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)

exit57:
jmp returnhere57

"subrosadedicated.exe"+60BD9:
jmp newmem57
returnhere57:


//------------ limo spawn -----------------------

alloc(newmem67,2048)
label(returnhere67)
label(originalcode67)
label(exit67)

newmem67:

cmp [custom_game],GAME_NONE
  je originalcode67
cmp [custom_game],GAME_S3ROUND
  je originalcode67

mov eax,[esp+8] //velocity
  mov [eax+0],(float)8.0
  mov [eax+4],(float)35.0
  mov [eax+8],(float)-10.0

originalcode67:
call subrosadedicated.exe+48860

exit67:
jmp returnhere67

"subrosadedicated.exe"+79DF4:
jmp newmem67
returnhere67:

//------------- item grab func -------------------


alloc(newmem89,2048)
label(returnhere89)
label(grab_originalcode)
label(grab_exit)

newmem89:
  mov eax,[esp+8]
  cmp eax,-1
    je grab_originalcode
  imul eax,hs
  cmp [h0+h_skin+eax],6
    je grab_exit
  cmp [custom_game],GAME_DUELS
    je grab_exit

grab_originalcode:
call subrosadedicated.exe+45120
               //(item_id, idk, character, slot)
grab_exit:
jmp returnhere89

"subrosadedicated.exe"+61C5A:
jmp newmem89
returnhere89:


//---------- "%s Manager: %s" --------------------

alloc(newmem101,2048)
label(returnhere101)
label(originalcode101)
label(exit101)

newmem101:

cmp [custom_game],GAME_NONE
  jne exit101

originalcode101:
call subrosadedicated.exe+7450

exit101:
jmp returnhere101

"subrosadedicated.exe"+84AEE:
jmp newmem101
returnhere101:


//------------ Top 10 list --------------------

alloc(newmem129,2048)
label(returnhere129)
label(endtext_originalcode)
label(endtext_exit)

newmem129:
  cmp [custom_game],GAME_S3ROUND
    je endtext_s3round
  cmp [custom_game],GAME_NONE
    je endtext_originalcode
jmp endtext_exit

label(endtext_s3round)
endtext_s3round:

//todo: print score
jmp endtext_exit

endtext_originalcode:
call subrosadedicated.exe+7450

endtext_exit:
jmp returnhere129

"subrosadedicated.exe"+251CD:
jmp newmem129
returnhere129:




alloc(newmem114,2048)
label(returnhere114)
label(originalcode114)
label(exit114)

newmem114:
  cmp [custom_game],GAME_NONE
  jne exit114

originalcode114:
call subrosadedicated.exe+7450

exit114:
jmp returnhere114

"subrosadedicated.exe"+251A3:
jmp newmem114
returnhere114:

//------------- fall damage ---------------------

alloc(newmem144,2048)
label(returnhere144)
label(originalcode144)
label(exit144)

newmem144:

cmp [custom_game],GAME_NONE
je originalcode144

cmp [h0+h_skin+esi],6
je exit144

originalcode144:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78

exit144:
jmp returnhere144

"subrosadedicated.exe"+7EE92:
jmp newmem144
nop
nop
returnhere144:


//-------------- entering vehicles -------------

alloc(newmem160,2048)
label(returnhere160)
label(originalcode160)
label(exit160)

newmem160:

cmp [h0+h_skin+edi],6
je exit160

cmp [custom_game],GAME_RACE
je exit160

originalcode160:
mov [edi+subrosadedicated.exe+5312E4],edx

exit160:
jmp returnhere160

"subrosadedicated.exe"+61E2B:
jmp newmem160
nop
returnhere160:


//---------------- exiting vehicles ---------------------------

alloc(newmem214,2048)
label(returnhere214)
label(originalcode214)
label(exit214)

newmem214:

test [h0+h_controls+esi],8
jne exitvehicle_seat

cmp [custom_game],GAME_RACE
  jne originalcode214
cmp [game_state],1
  jne originalcode214
jmp exit214

label(exitvehicle_seat)
exitvehicle_seat:
  xor [h0+h_seat+esi],1
  mov [h0+h_carexittimer],0
  jmp exit214

originalcode214:
mov [esi+subrosadedicated.exe+5312E4],FFFFFFFF

exit214:
jmp returnhere214

"subrosadedicated.exe"+80638:
jmp newmem214
nop
nop
nop
nop
nop
returnhere214:

//----------------- vehicle damage ----------------------------

alloc(newmem277,2048)
label(returnhere277)
label(originalcode277)
label(exit277)

newmem277:

cmp [custom_game],GAME_RACE
je exit277


originalcode277:
mov [esi-000000F4],ecx

exit277:
jmp returnhere277

"subrosadedicated.exe"+77864:
jmp newmem277
nop
returnhere277:




//------------ door opening up when everyone's dead -----------


alloc(newmem177,2048)
label(returnhere177)
label(originalcode177)
label(exit177)

newmem177:

cmp [eax+14],ecx
je exit177

   push ebx
mov ebx,[eax+14]
imul ebx,hs
cmp [h0+h_skin+ebx],6
   pop ebx
je exit177

originalcode177:
cmp [eax+14],ecx
jne subrosadedicated.exe+85316

exit177:
jmp returnhere177

"subrosadedicated.exe"+852BA:
jmp newmem177
returnhere177:

//--------- weekly cash reset ----------------


alloc(newmem195,2048)
label(returnhere195)
label(originalcode195)
label(exit195)

newmem195:
  cmp [custom_game],GAME_NONE
    jne exit195

originalcode195:
mov [eax-30],ecx
mov [eax],ebx

exit195:
jmp returnhere195

"subrosadedicated.exe"+7A895:
jmp newmem195
returnhere195:


//----------- send timer -------------------------

alloc(newmem255,2048)
label(returnhere255)
label(originalcode255)
label(exit255)

newmem255:

  cmp [custom_game],GAME_RACE
   jne originalcode255
  cmp [game_state],2
   jne originalcode255

   mov eax,[race_track_time]
   sub eax,[game_timer]
   mov [tmp1],eax

   lea eax,[tmp1]
   mov [esp],eax

originalcode255:
call subrosadedicated.exe+13250

exit255:
jmp returnhere255

"subrosadedicated.exe"+70420:
jmp newmem255
returnhere255:


//-------------- car engines --------------------

alloc(newmem300,2048)
label(returnhere300)
label(originalcode300)
label(exit300)

newmem300:
jne subrosadedicated.exe+77C9B

cmp [custom_game],GAME_RACE
  jne originalcode300
cmp [game_state],1
  je subrosadedicated.exe+77C9B

originalcode300:
//jne subrosadedicated.exe+77C9B
push edi
call subrosadedicated.exe+30D40

exit300:
jmp returnhere300

"subrosadedicated.exe"+77C90:
jmp newmem300
nop
nop
nop
returnhere300:



//------------ round reset (round mode) ------

alloc(newmem350,2048)
label(returnhere350)
label(originalcode350)
label(exit350)

newmem350:

call s3_onreset_func

originalcode350:
mov [subrosadedicated.exe+8ED1774],eax

exit350:
jmp returnhere350

"subrosadedicated.exe"+7A8F8:
jmp newmem350
returnhere350:


//--------- round reset (versus and elim) -----

alloc(newmem324,2048)
label(returnhere324)
label(originalcode324)
label(exit324)

newmem324:

call s3_onreset_func

originalcode324:
mov [subrosadedicated.exe+8ED176C],00000708

exit324:
jmp returnhere324

"subrosadedicated.exe"+7A919:
jmp newmem324
nop
nop
nop
nop
nop
returnhere324:


//---------- round state 2 -&gt; 3 ----------

alloc(newmem376,2048)
label(returnhere376)
label(round23_originalcode)
label(round23_exit)

newmem376:
cmp [custom_game],GAME_S3ROUND
  je round23_s3round
jmp round23_originalcode

label(round23_s3round)
round23_s3round:
      pushad

xor esi,esi //corp
xor edi,edi //corp*
label(round23_s3round_teams_loop)
round23_s3round_teams_loop:

xor ebp,ebp //cash

xor ecx,ecx //p
xor ebx,ebx //p*
label(round23_s3round_teams_players)
round23_s3round_teams_players:
  cmp [p0+ebx],0
    je round23_s3round_teams_players_next
  cmp [p0+p_team+ebx],esi
    jne round23_s3round_teams_players_next

add ebp,[p0+p_cash+ebx]

label(round23_s3round_teams_players_next)
round23_s3round_teams_players_next:
  add ebx,ps
    inc ecx
    cmp ecx,players_max
    jl round23_s3round_teams_players

add [s3round_shift_scores+esi*4],ebp
     pushad
push ebp
push [s3round_shift_scores+esi*4]
  mov eax,[corp_names+esi*4]
  push eax
inc esi
push esi
push s_format_logteamcash
push tmpbuffer
call msvcrt.sprintf
add esp,18

push 0
push -1
push tmpbuffer
push 0
call message_func
add esp,10

call log_func
     popad

label(round23_s3round_teams_next)
round23_s3round_teams_next:
  add edi,corps
    inc esi
    cmp esi,2
    jle round23_s3round_teams_loop



      popad
round23_originalcode:
mov [subrosadedicated.exe+8ED1764],00000003

round23_exit:
jmp returnhere376

"subrosadedicated.exe"+85444:
jmp newmem376
nop
nop
nop
nop
nop
returnhere376:


//----------- versus mode spawn ------------


alloc(newmem403,2048)
label(returnhere403)
label(originalcode403)
label(exit403)

newmem403:
call subrosadedicated.exe+74760
        pushad
mov ecx,[esp+28]
imul ebx,ecx,ps

xor ebp,ebp
  add ebp,[p0+p_slot0+ebx]
 add ebx,p_slots
  add ebp,[p0+p_slot0+ebx]
 add ebx,p_slots
  add ebp,[p0+p_slot0+ebx]
cmp ebp,0
jg versus_empty_skip

  push 5
  push B
  push eax
  call arm_func
  add esp,C

label(versus_empty_skip)
versus_empty_skip:
        popad
originalcode403:
//call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit403:
jmp returnhere403

"subrosadedicated.exe"+838E8:
jmp newmem403
returnhere403:

//------------ versus briefcase ------------------------------------

alloc(newmem431,2048)
label(returnhere431)
label(originalcode431)
label(exit431)

newmem431:

mov eax,[esp+4]
  mov [eax+0],(float)1546.0
  mov [eax+4],(float)34.5
  mov [eax+8],(float)1569.0

originalcode431:
call subrosadedicated.exe+44880
 //(int item_type, float *pos, [float* velocity], float *orientation)
exit431:
jmp returnhere431

"subrosadedicated.exe"+83A16:
jmp newmem431
returnhere431:


//-------------- versus timer 1--------


alloc(newmem460,2048)
label(returnhere460)
label(originalcode460)
label(exit460)

newmem460:

cmp [timer_locked],1
je exit460


originalcode460:
mov [subrosadedicated.exe+8ED176C],eax

exit460:
jmp returnhere460

"subrosadedicated.exe"+8373B:
jmp newmem460
returnhere460:






label(load_racing_map_func)
load_racing_map_func:
     pushad

mov [race_checkpoint_leading],0
mov [race_players_finished],0
mov [race_players_spawned],0

call msvcrt.rand
and eax,3
  cmp eax,1
    je load_racing_map_map2
  cmp eax,2
    je load_racing_map_map3
  cmp eax,3
    je load_racing_map_map4

//-------- map 1 ----------------------------

// BTK's track

mov [race_track_time],#12600
mov [race_track_car],0
mov [race_spawn_orientation],1

mov [race_checkpoint_count],0
xor eax,eax

//START:

  mov [race_spawn_point+0],(float)1953.2 //Taxi
  mov [race_spawn_point+4],(float)24.625
  mov [race_spawn_point+8],(float)1010.9

//CHECKPOINTS:

        inc [race_checkpoint_count] //OXS
         mov [rcp0+rcp_pos+0+eax],(float)1951.6
         mov [rcp0+rcp_pos+4+eax],(float)28.8
         mov [rcp0+rcp_pos+8+eax],(float)1700.4
        mov [rcp0+rcp_color+eax],0
          //mov ebx,[corp_names+8]
          lea ebx,[s_oxs]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Lumber
         mov [rcp0+rcp_pos+0+eax],(float)1693.0
         mov [rcp0+rcp_pos+4+eax],(float)48.8
         mov [rcp0+rcp_pos+8+eax],(float)1418.6
        mov [rcp0+rcp_color+eax],4
          lea ebx,[s_lumber]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //City hall
         mov [rcp0+rcp_pos+0+eax],(float)1311.6
         mov [rcp0+rcp_pos+4+eax],(float)25.8
         mov [rcp0+rcp_pos+8+eax],(float)1778.8
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_cityhall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Monsota
         mov [rcp0+rcp_pos+0+eax],(float)1060.9
         mov [rcp0+rcp_pos+4+eax],(float)26.8
         mov [rcp0+rcp_pos+8+eax],(float)1707.3
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_monsota]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Goldmen
         mov [rcp0+rcp_pos+0+eax],(float)1066.0
         mov [rcp0+rcp_pos+4+eax],(float)24.8
         mov [rcp0+rcp_pos+8+eax],(float)1013.8
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_goldmen]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Water treatment
         mov [rcp0+rcp_pos+0+eax],(float)1981.0
         mov [rcp0+rcp_pos+4+eax],(float)24.9
         mov [rcp0+rcp_pos+8+eax],(float)1123.8
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_water]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof



jmp load_racing_map_ret
//-------- map 2 ----------------------------
label(load_racing_map_map2)
load_racing_map_map2:
// Classic

mov [race_track_time],#12600
mov [race_track_car],0
mov [race_spawn_orientation],0

mov [race_checkpoint_count],0
xor eax,eax

//START:

  mov [race_spawn_point+0],(float)1853.0 //Casino
  mov [race_spawn_point+4],(float)49.0
  mov [race_spawn_point+8],(float)1455.9

//CHECKPOINTS:

        inc [race_checkpoint_count] //Monsota
         mov [rcp0+rcp_pos+0+eax],(float)1060.9
         mov [rcp0+rcp_pos+4+eax],(float)26.8
         mov [rcp0+rcp_pos+8+eax],(float)1707.3
        mov [rcp0+rcp_color+eax],2
          mov ebx,[corp_names+4]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Mall
         mov [rcp0+rcp_pos+0+eax],(float)1341.0
         mov [rcp0+rcp_pos+4+eax],(float)48.8
         mov [rcp0+rcp_pos+8+eax],(float)1338.8
        mov [rcp0+rcp_color+eax],4
          lea ebx,[subrosadedicated.exe+88654]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Goldmen
         mov [rcp0+rcp_pos+0+eax],(float)1066.0
         mov [rcp0+rcp_pos+4+eax],(float)24.8
         mov [rcp0+rcp_pos+8+eax],(float)1013.8
        mov [rcp0+rcp_color+eax],5
          mov ebx,[corp_names+0]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //OXS
         mov [rcp0+rcp_pos+0+eax],(float)1951.6
         mov [rcp0+rcp_pos+4+eax],(float)28.8
         mov [rcp0+rcp_pos+8+eax],(float)1700.4
        mov [rcp0+rcp_color+eax],0
          mov ebx,[corp_names+8]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Isle of Burgers
         mov [rcp0+rcp_pos+0+eax],(float)1450.9
         mov [rcp0+rcp_pos+4+eax],(float)48.7
         mov [rcp0+rcp_pos+8+eax],(float)1479.6
        mov [rcp0+rcp_color+eax],1
          lea ebx,[subrosadedicated.exe+AD2ECDC]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

jmp load_racing_map_ret
//-------- map 3 ----------------------------
label(load_racing_map_map3)
load_racing_map_map3:
//Gray's track

mov [race_track_time],#21600
mov [race_track_car],#14
mov [race_spawn_orientation],1

mov [race_checkpoint_count],0
xor eax,eax

//START:

  mov [race_spawn_point+0],(float)1953.2 //Taxi
  mov [race_spawn_point+4],(float)24.625
  mov [race_spawn_point+8],(float)1010.9

//CHECKPOINTS:

        inc [race_checkpoint_count] //OXS
         mov [rcp0+rcp_pos+0+eax],(float)1951.6
         mov [rcp0+rcp_pos+4+eax],(float)28.8
         mov [rcp0+rcp_pos+8+eax],(float)1700.4
        mov [rcp0+rcp_color+eax],0
          //mov ebx,[corp_names+8]
          lea ebx,[s_oxs]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Basketball
         mov [rcp0+rcp_pos+0+eax],(float)1509.0
         mov [rcp0+rcp_pos+4+eax],(float)48.8
         mov [rcp0+rcp_pos+8+eax],(float)1705.6
        mov [rcp0+rcp_color+eax],4
          lea ebx,[s_basketball]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Museum
         mov [rcp0+rcp_pos+0+eax],(float)1654.0
         mov [rcp0+rcp_pos+4+eax],(float)60.9
         mov [rcp0+rcp_pos+8+eax],(float)1539.6
        mov [rcp0+rcp_color+eax],3
          lea ebx,[s_museum]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Hondo tunnel
         mov [rcp0+rcp_pos+0+eax],(float)1685.0
         mov [rcp0+rcp_pos+4+eax],(float)32.6
         mov [rcp0+rcp_pos+8+eax],(float)1267.1
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_hondo_tunnel]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //RIO
         mov [rcp0+rcp_pos+0+eax],(float)1793.7
         mov [rcp0+rcp_pos+4+eax],(float)24.7
         mov [rcp0+rcp_pos+8+eax],(float)1009.7
        mov [rcp0+rcp_color+eax],1
          lea ebx,[s_rio]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Pizza
         mov [rcp0+rcp_pos+0+eax],(float)1005.2
         mov [rcp0+rcp_pos+4+eax],(float)24.4
         mov [rcp0+rcp_pos+8+eax],(float)1129.7
        mov [rcp0+rcp_color+eax],1
          lea ebx,[s_pizza]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Goldmen
         mov [rcp0+rcp_pos+0+eax],(float)1066.0
         mov [rcp0+rcp_pos+4+eax],(float)24.8
         mov [rcp0+rcp_pos+8+eax],(float)1013.8
        mov [rcp0+rcp_color+eax],5
          mov ebx,[corp_names+0]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //North park
         mov [rcp0+rcp_pos+0+eax],(float)1508.0
         mov [rcp0+rcp_pos+4+eax],(float)24.8
         mov [rcp0+rcp_pos+8+eax],(float)1029.6
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_northpark_ahead]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Isle of Burgers
         mov [rcp0+rcp_pos+0+eax],(float)1450.9
         mov [rcp0+rcp_pos+4+eax],(float)48.7
         mov [rcp0+rcp_pos+8+eax],(float)1479.6
        mov [rcp0+rcp_color+eax],1
          lea ebx,[subrosadedicated.exe+AD2ECDC]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //City hall
         mov [rcp0+rcp_pos+0+eax],(float)1311.6
         mov [rcp0+rcp_pos+4+eax],(float)25.8
         mov [rcp0+rcp_pos+8+eax],(float)1778.8
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_cityhall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Monsota
         mov [rcp0+rcp_pos+0+eax],(float)1060.9
         mov [rcp0+rcp_pos+4+eax],(float)26.8
         mov [rcp0+rcp_pos+8+eax],(float)1707.3
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_monsota]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

{        inc [race_checkpoint_count] //Basketball
         mov [rcp0+rcp_pos+0+eax],(float)1446.6
         mov [rcp0+rcp_pos+4+eax],(float)44.5
         mov [rcp0+rcp_pos+8+eax],(float)1683.1
        mov [rcp0+rcp_color+eax],4
          lea ebx,[s_basketball]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof}

        inc [race_checkpoint_count] //Basketball
         mov [rcp0+rcp_pos+0+eax],(float)1463.4
         mov [rcp0+rcp_pos+4+eax],(float)52.0
         mov [rcp0+rcp_pos+8+eax],(float)1731.1
        mov [rcp0+rcp_color+eax],4
          lea ebx,[s_basketball]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof


jmp load_racing_map_ret
//-------- map 4 ----------------------------
label(load_racing_map_map4)
load_racing_map_map4:

mov [race_track_time],#21600
mov [race_track_car],0
mov [race_spawn_orientation],0

mov [race_checkpoint_count],0
xor eax,eax

//START:

  mov [race_spawn_point+0],(float)1741.7 //flimpo
  mov [race_spawn_point+4],(float)24.5
  mov [race_spawn_point+8],(float)1138.8

//CHECKPOINTS:

   //lap 1
        inc [race_checkpoint_count] //Hotdog
         mov [rcp0+rcp_pos+0+eax],(float)1355.2
         mov [rcp0+rcp_pos+4+eax],(float)24.7
         mov [rcp0+rcp_pos+8+eax],(float)1155.4
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_hotdog]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Mall
         mov [rcp0+rcp_pos+0+eax],(float)1326.0
         mov [rcp0+rcp_pos+4+eax],(float)28.8
         mov [rcp0+rcp_pos+8+eax],(float)1305.6
        mov [rcp0+rcp_color+eax],3
          lea ebx,[s_mall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Red cube
         mov [rcp0+rcp_pos+0+eax],(float)1501.5
         mov [rcp0+rcp_pos+4+eax],(float)36.7
         mov [rcp0+rcp_pos+8+eax],(float)1277.2
        mov [rcp0+rcp_color+eax],1
          lea ebx,[s_redcube]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

   //lap 2
        inc [race_checkpoint_count] //Hotdog
         mov [rcp0+rcp_pos+0+eax],(float)1355.2
         mov [rcp0+rcp_pos+4+eax],(float)0.5
         mov [rcp0+rcp_pos+8+eax],(float)1155.4
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_hotdog]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Mall
         mov [rcp0+rcp_pos+0+eax],(float)1326.0
         mov [rcp0+rcp_pos+4+eax],(float)0.5
         mov [rcp0+rcp_pos+8+eax],(float)1305.6
        mov [rcp0+rcp_color+eax],3
          lea ebx,[s_mall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Red cube
         mov [rcp0+rcp_pos+0+eax],(float)1501.5
         mov [rcp0+rcp_pos+4+eax],(float)0.5
         mov [rcp0+rcp_pos+8+eax],(float)1277.2
        mov [rcp0+rcp_color+eax],1
          lea ebx,[s_redcube]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

   //lap 3
        inc [race_checkpoint_count] //Hotdog
         mov [rcp0+rcp_pos+0+eax],(float)1355.2
         mov [rcp0+rcp_pos+4+eax],(float)1.5
         mov [rcp0+rcp_pos+8+eax],(float)1155.4
        mov [rcp0+rcp_color+eax],5
          lea ebx,[s_hotdog]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Mall
         mov [rcp0+rcp_pos+0+eax],(float)1326.0
         mov [rcp0+rcp_pos+4+eax],(float)1.5
         mov [rcp0+rcp_pos+8+eax],(float)1305.6
        mov [rcp0+rcp_color+eax],3
          lea ebx,[s_mall]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

        inc [race_checkpoint_count] //Red cube
         mov [rcp0+rcp_pos+0+eax],(float)1501.5
         mov [rcp0+rcp_pos+4+eax],(float)1.5
         mov [rcp0+rcp_pos+8+eax],(float)1277.2
        mov [rcp0+rcp_color+eax],1
          lea ebx,[s_redcube]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

   //finish
        inc [race_checkpoint_count] //blue
         mov [rcp0+rcp_pos+0+eax],(float)1480.6
         mov [rcp0+rcp_pos+4+eax],(float)24.5
         mov [rcp0+rcp_pos+8+eax],(float)1035.7
        mov [rcp0+rcp_color+eax],2
          lea ebx,[s_blue]
          mov [rcp0+rcp_name_p+eax],ebx
       add eax,rcp__sizeof

label(load_racing_map_ret)
load_racing_map_ret:
     popad
ret




//---------- initialize the data -----------------
alloc(mycode,16384)
mycode:

mov [custom_game],GAME_NONE
//mov [custom_game],GAME_S3ROUND
//mov [custom_game],GAME_DUELS

mov [heaven_points+0+0],(float)1231.0 //gold
mov [heaven_points+0+4],(float)30.0
mov [heaven_points+0+8],(float)3500.0

mov [heaven_points+C+0],(float)250.0 //mons
mov [heaven_points+C+4],(float)30.0
mov [heaven_points+C+8],(float)250.0

mov [heaven_points+18+0],(float)3700.0 //oxs
mov [heaven_points+18+4],(float)30.0
mov [heaven_points+18+8],(float)150.0

mov [heaven_points+54+0],(float)1000.0 //spec
mov [heaven_points+54+4],(float)30.0
mov [heaven_points+54+8],(float)2550.0

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov ecx,players_max
xor ebx,ebx
label(init_players_loop)
init_players_loop:
      mov [p20+p2_s3p+ebx],-1
add ebx,p2s
loop init_players_loop



//--------- racing ---------

call load_racing_map_func

//--------------------------

ret
createThread(mycode)

//---

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
//push randmax
push 7FFF
fidiv dword [esp]
add esp,8
ret

label(player_clear_slots) //player_clear_slots(player)
player_clear_slots:
   pushad
mov ecx,[esp+24] //p
imul ebx,ecx,ps //p*
//--
mov ecx,p_slots_max
label(player_clear_slots_loop)
player_clear_slots_loop:
   mov [p0+p_slot0+ebx],0
add ebx,p_slots
loop player_clear_slots_loop
//--
   popad
ret


label(player_put_gun_func) //player_put_gun(player, gun)
player_put_gun_func:
       pushad
//--------
      mov eax,[esp+24]
imul eax,ps
mov ecx,p_slots_max
label(custom_putgun_rem_loop)
custom_putgun_rem_loop:
     mov [p0+p_slot0+eax],0
add eax,p_slots
loop custom_putgun_rem_loop
//--------
       mov eax,[esp+28]
       mov ebx,[esp+24]
imul ebx,ps //p*+slot
  mov ebp,eax
  inc ebp //it_mag
imul edx,ebp,its
mov edx,[it0+it_capacity+edx]

//gun
mov [p0+p_slot0+ebx],1
mov [p0+p_slot0+p_slot_item1+ebx],eax
//mov [p0+p_slot0+p_slot_item1+4+ebx],ebp
  mov [p0+p_slot0+p_slot_item1+4+ebx],edx
  mov [p0+p_slot0+p_slot_item1+8+ebx],ebp
//mags
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
add ebx,p_slots
  mov [p0+p_slot0+ebx],2
    mov [p0+p_slot0+p_slot_item1+ebx],ebp
    mov [p0+p_slot0+p_slot_item1+8+ebx],edx
    mov [p0+p_slot0+p_slot_item2+ebx],ebp
    mov [p0+p_slot0+p_slot_item2+8+ebx],edx
//bandage
add ebx,p_slots
add ebx,p_slots
  mov [p0+p_slot0+ebx],1
    mov [p0+p_slot0+p_slot_item1+ebx],E
    mov [p0+p_slot0+p_slot_item1+8+ebx],2
//--------
       popad
ret



label(find_player_func) //int find_player(char* arg_name)
find_player_func:
     pushad
  push [esp+24]
  call msvcrt.atoi
  add esp,4
  push eax //phone?

xor edx,edx //p
xor ebx,ebx //p*
label(find_players_loop)
find_players_loop:
  cmp [p0+ebx],0
  je find_players_next
  cmp [p0+p_team+ebx],6
  je find_players_next
    push ebx
    push edx

  mov eax,[esp+8]
  cmp eax,0
  je find_players_skip_phone
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
      add eax,#2560000
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
      add eax,#10000
      cmp eax,[p0+p_phone+ebx]
        je find_players_found
  label(find_players_skip_phone)
  find_players_skip_phone:

  mov edx,[esp+C+24]
  push edx //arg_name
  lea edx,[p0+p_name+ebx]
  push edx
  //call msvcrt.stricmp
  call msvcrt.strstr
  add esp,8
    cmp eax,0
    //jne find_players_next
    je find_players_skip
    label(find_players_found)
    find_players_found:
        pop edx
        add esp,8
        //mov eax,edx
        mov [esp+1C],edx
        jmp find_players_ret
  label(find_players_skip)
  find_players_skip:
    pop edx
    pop ebx
  label(find_players_next)
  find_players_next:
add ebx,ps
inc edx
  cmp edx,players_max
  jl find_players_loop
add esp,4
mov [esp+1C],-1
       label(find_players_ret)
       find_players_ret:
   popad
ret


label(race_timer_to_string_func)
race_timer_to_string_func:
    mov eax,[race_track_time]
    sub eax,[esp+4]
    push eax
    call timer_to_string_func
    add esp,4
ret


label(timer_to_string_func)
timer_to_string_func:
        push    ebp
        mov     ebp, esp
        sub     esp, #12
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #3600
        idiv    ecx
        mov     [ebp-C], eax
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #3600
        idiv    ecx
        mov     eax, edx
        cdq
        mov     ecx, #60
        idiv    ecx
        mov     [ebp-8], eax
        mov     eax, [ebp+8]
        cdq
        mov     ecx, #60
        idiv    ecx
        mov     eax, edx
        cdq
        mov     ecx, #6
        idiv    ecx
        mov     [ebp-4], eax
        mov     edx, [ebp-4]
        push    edx
        mov     eax, [ebp-8]
        push    eax
        mov     ecx, [ebp-C]
        push    ecx
        push    s_timetest
        push    tmpbuffer2
        call    msvcrt.sprintf
        add     esp, #20
        mov     esp, ebp
        pop     ebp
ret



label(log_func)
log_func:
push s_a
push s_log_s3
call msvcrt.fopen //fopen(path, "a")
add esp,8
  cmp eax,0
  je log_ret
push eax
  push tmpbuffer
  call msvcrt.strlen
  add esp,4
push eax
push 1
push tmpbuffer
call msvcrt.fwrite
add esp,C
  push 2
  push 1
  push s_newline
  call msvcrt.fwrite
  add esp,C
    call msvcrt.fclose
    add esp,4
label(log_ret)
log_ret:
ret


//======= s3 ===============================

label(s3_onreset_func)
s3_onreset_func:
    pushad

mov [race_checkpoint_leading],0
mov [race_players_finished],0
mov [race_players_spawned],0

call load_racing_map_func

    popad
ret


label(s3_antighosting_update)
s3_antighosting_update:
     pushad
mov ecx,players_max
xor ebx,ebx
xor edi,edi
label(antighosting_update_players_loop)
antighosting_update_players_loop:
  cmp [p0+ebx],0
    je antighosting_update_next
  cmp [p0+p_team+ebx],7
    je antighosting_update_obs
  cmp [p0+p_team+ebx],2
    jg antighosting_update_next

jmp antighosting_update_skipobs
label(antighosting_update_obs)
antighosting_update_obs:

   cmp [p0+p_admin+ebx],1
   je antighosting_update_next

label(antighosting_update_skipobs)
antighosting_update_skipobs:

cmp [p0+p_h+ebx],-1
je antighosting_update_respawn

mov eax,[p0+p_h+ebx]
imul eax,hs

cmp [h0+h_skin+eax],6
jne antighosting_update_next

//----- bounds

imul edx,edi,ps
mov edx,[p0+p_team+edx]
imul edx,C

mov esi,[h0+h_bp0_pb+eax]
imul esi,pbs

push (float)100.0
      fld [heaven_points+edx+0]
      fsub [h0+h_bp0_pos+eax+0]
    fld st(0)
    fabs
        fld [esp]
        fcomip st(1)
        fstp st(0)
        ja bounds_skip_x
     fdiv [esp]
     fdiv [esp]
     fst [pb0+pb_vel+esi+0]
  label(bounds_skip_x)
  bounds_skip_x:
  fstp st(0)

      fld [heaven_points+edx+8]
      fsub [h0+h_bp0_pos+eax+8]
    fld st(0)
    fabs
        fld [esp]
        fcomip st(1)
        fstp st(0)
        ja bounds_skip_z
     fdiv [esp]
     fdiv [esp]
     fst [pb0+pb_vel+esi+8]
  label(bounds_skip_z)
  bounds_skip_z:
  fstp st(0)

add esp,4
jmp antighosting_update_next

//---- respawn

label(antighosting_update_respawn)
antighosting_update_respawn:

push ebx
push ecx
push edi
                    pushad
                 imul eax,edi,ps
                 push [p0+p_skin+eax]
                 push edi
                    mov [p0+p_skin+eax],6
					call player_sync_func
                 pop edi
                 pop eax
                  imul edi,ps
                  mov [p0+p_skin+edi],eax
                    popad
push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

sub esp,C
mov ebp,esp  //position

   imul eax,edi,ps
   mov edx,[p0+p_team+eax]

 imul edx,C
  mov eax,[heaven_points+0+edx]
  mov [ebp+0],eax
    mov eax,[heaven_points+4+edx]
    mov [ebp+4],eax
  mov eax,[heaven_points+8+edx]
  mov [ebp+8],eax

      pushad
               call frand1
               mov edx,[esp+8]
               fadd [edx+0]
               fstp [edx+0]

               call frand1
               mov edx,[esp+8]
               fadd [edx+8]
               fstp [edx+8]
      popad

push edi        //player id
push esi        //orientation
push ebp        //position
call human_spawn_func
add esp,8
pop edi //player id
add esp,30

                   pushad
                push edi
                call player_clear_slots
                add esp,4
                   popad

imul edx,edi,ps
mov [p0+p_h+edx],eax

imul eax,hs
mov [h0+h_skin+eax],6

pop edi
pop ecx
pop ebx

label(antighosting_update_next)
antighosting_update_next:
add ebx,ps
inc edi
    dec ecx
    cmp ecx,0
    jge antighosting_update_players_loop

label(antighosting_update_ret)
antighosting_update_ret:
     popad
ret



label(duels_give_gun_func) //duels_give_gun(player)
duels_give_gun_func:
   pushad
mov ecx,[esp+24] //p
imul ebx,ecx,ps //p*
mov edx,[p0+p_h+ebx] //h
  cmp edx,-1
  je duels_give_gun_ret

xor esi,esi
imul edi,edx,hs //h*+slot
label(death_give_gun_remove_loop)
death_give_gun_remove_loop:
  mov eax,[h0+h_slot0+edi]
  cmp eax,2
  jl death_give_gun_remove_1
         pushad
     mov ebp,[h0+h_slot0+8+edi]
     imul eax,ebp,is
     mov [i0+eax],0
      push ebp
      call item_sync_func
      add esp,4
         popad
  label(death_give_gun_remove_1)
  death_give_gun_remove_1:
  cmp eax,1
  jl death_give_gun_remove_0
         pushad
     mov ebp,[h0+h_slot0+4+edi]
     imul eax,ebp,is
     mov [i0+eax],0
      push ebp
      call item_sync_func
      add esp,4
          popad
  label(death_give_gun_remove_0)
  death_give_gun_remove_0:
  mov [h0+h_slot0+edi],0
add edi,h_slots
inc esi
cmp esi,h_slots_max
jl death_give_gun_remove_loop

imul ebp,ecx,p2s //p2*
mov eax,[p20+p2_duels_gun_progress+ebp]

push duels_mags
  cmp eax,1
    je duels_arm1
  cmp eax,2
    je duels_arm2
  cmp eax,3
    je duels_arm3
  cmp eax,4
    je duels_arm4
      push 3 //m16
      jmp duels_arm_apply
    label(duels_arm1)
    duels_arm1:
      push 9 //uzi
      jmp duels_arm_apply
    label(duels_arm2)
    duels_arm2:
      push 1 //ak
      jmp duels_arm_apply
    label(duels_arm3)
    duels_arm3:
      push 7 //mp5
      jmp duels_arm_apply
    label(duels_arm4)
    duels_arm4:
      push B //9mm
      jmp duels_arm_apply
  label(duels_arm_apply)
  duels_arm_apply:
                      mov eax,[esp]
                      mov [p20+p2_duels_gun_last+ebp],eax
push edx
call arm_func
add esp,C

label(duels_give_gun_ret)
duels_give_gun_ret:
   popad
ret




label(s3_set_mode_func) //s3_set_mode(mode)
s3_set_mode_func:
     pushad
mov eax,[esp+24]

mov [custom_game],eax
mov [game_reset],1
//--- spec everyone ---
  mov ecx,players_max
  xor ebx,ebx
label(s3_set_mode_spec_loop)
s3_set_mode_spec_loop:
        mov [p0+p_team+ebx],7
  add ebx,ps
loop s3_set_mode_spec_loop
//----------------------

cmp eax,GAME_NONE
je s3_game_none
cmp eax,GAME_RACE
je s3_game_race
cmp eax,GAME_S3ROUND
je s3_game_s3round
cmp eax,GAME_DUELS
je s3_game_duels
cmp eax,GAME_FINAL
je s3_game_final

label(s3_game_race)
s3_game_race:
   mov [game_mode],3
jmp s3_set_mode_ret

label(s3_game_final)
s3_game_final:
   mov [game_mode],7
   mov [game_weekday],4
   mov [game_reset],1


jmp s3_set_mode_ret

label(s3_game_none)
s3_game_none:

{  push 0
  push -1
  push s_setgame_none
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_game_s3round)
s3_game_s3round:

mov [s3round_shift_scores+0],0
mov [s3round_shift_scores+4],0
mov [s3round_shift_scores+8],0

mov [game_mode],3
mov [game_weekday],0
{  push 0
  push -1
  push s_setgame_s3round
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_game_duels)
s3_game_duels:

mov [game_mode],3
{  push 0
  push -1
  push s_setgame_duels
  push 0
  call message_func
  add esp,10}
jmp s3_set_mode_ret

label(s3_set_mode_ret)
s3_set_mode_ret:
     popad
ret



label(load_s3_registry_func)
load_s3_registry_func:
//--------- load teams --------------
push s_rp
push s_teams_filepath
call msvcrt.fopen //fopen(filepath, "r+")
add esp,8
push eax
    push tmpbuffer_size
    push 1
    lea eax,[tmpbuffer]
    push eax
    call msvcrt.fread
    add esp,C
call msvcrt.fclose
add esp,4
//----------
{
sub esp,8

lea eax,[esp+4]
push eax
push s_newline
push tmpbuffer
call msvcrt.strtok_s
add esp,C

xor ecx,ecx
label(teams_line_token_loop)
teams_line_token_loop:
  push ecx

push eax
push tmpbuffer2
call msvcrt.strcpy
add esp,8

//--- name
  lea eax,[esp+4]
  push eax
  push s_comma
  push tmpbuffer2
  call msvcrt.strtok_s
  add esp,C

    mov ecx,[esp]
    imul ecx,s3ts
  push eax
  lea eax,[s3t0+s3t_name+ecx]
  push eax
  call msvcrt.strcpy
  add esp,8

//--- tag

  lea eax,[esp+4]
  push eax
  push s_comma
  push 0
  call msvcrt.strtok_s
  add esp,C

    mov ecx,[esp]
    imul ecx,s3ts
  push eax
  lea eax,[s3t0+s3t_tag+ecx]
  push eax
  call msvcrt.strcpy
  add esp,8

//--- captain

  lea eax,[esp+4]
  push eax
  push s_comma
  push 0
  call msvcrt.strtok_s
  add esp,C

   //   pushad
   //push 0
   //push -1
   //push eax
   //push 0
   //call message_func
   //add esp,10
   //   popad

  push eax
  call msvcrt.atoi
  add esp,4

  mov ecx,[esp]
  imul ecx,s3ts
  mov [s3t0+s3t_captain+ecx],eax
  //mov [s3t0+s3t_playing+ecx],0

//---

lea eax,[esp+8]
push eax
push s_newline
push 0
call msvcrt.strtok_s
add esp,C

label(teams_line_token_next)
teams_line_token_next:
   pop ecx
   inc ecx
cmp eax,0
jne teams_line_token_loop

add esp,8
}


//-------- load participants --------








ret
createThread(load_s3_registry_func)


[DISABLE]
dealloc(newmem460)
"subrosadedicated.exe"+8373B:
mov [subrosadedicated.exe+8ED176C],eax
//Alt: db A3 6C 17 F5 09
dealloc(newmem431)
"subrosadedicated.exe"+83A16:
call subrosadedicated.exe+44880
//Alt: db E8 65 0E FC FF
dealloc(newmem403)
"subrosadedicated.exe"+838E8:
call subrosadedicated.exe+74760
//Alt: db E8 73 0E FF FF
dealloc(newmem376)
"subrosadedicated.exe"+85444:
mov [subrosadedicated.exe+8ED1764],00000003
//Alt: db C7 05 64 17 F5 09 03 00 00 00
dealloc(newmem350)
"subrosadedicated.exe"+7A8F8:
mov [subrosadedicated.exe+8ED1774],eax
//Alt: db A3 74 17 F5 09
dealloc(newmem324)
"subrosadedicated.exe"+7A919:
mov [subrosadedicated.exe+8ED176C],00000708
//Alt: db C7 05 6C 17 F5 09 08 07 00 00
dealloc(newmem300)
"subrosadedicated.exe"+77C90:
jne subrosadedicated.exe+77C9B
push edi
call subrosadedicated.exe+30D40
//Alt: db 75 09 57 E8 A8 90 FB FF
dealloc(newmem277)
"subrosadedicated.exe"+77864:
mov [esi-000000F4],ecx
//Alt: db 89 8E 0C FF FF FF
dealloc(newmem255)
"subrosadedicated.exe"+70420:
call subrosadedicated.exe+13250
//Alt: db E8 2B 2E FA FF
dealloc(newmem234)
"subrosadedicated.exe"+322E6:
call subrosadedicated.exe+13250
//Alt: db E8 65 0F FE FF
dealloc(newmem214)
"subrosadedicated.exe"+80638:
mov [esi+subrosadedicated.exe+5312E4],FFFFFFFF
//Alt: db C7 86 E4 12 5B 01 FF FF FF FF
dealloc(newmem195)
"subrosadedicated.exe"+7A895:
mov [eax-30],ecx
mov [eax],ebx
//Alt: db 89 48 D0 89 18
dealloc(newmem177)
"subrosadedicated.exe"+852BA:
cmp [eax+14],ecx
jne subrosadedicated.exe+85316
//Alt: db 39 48 14 75 57
dealloc(newmem160)
"subrosadedicated.exe"+61E2B:
mov [edi+subrosadedicated.exe+5312E4],edx
//Alt: db 89 97 E4 12 5B 01
dealloc(newmem144)
"subrosadedicated.exe"+7EE92:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78
//Alt: db 83 86 F8 12 5B 01 88
dealloc(newmem129)
"subrosadedicated.exe"+251CD:
call subrosadedicated.exe+7450
//Alt: db E8 7E 22 FE FF
dealloc(newmem114)
"subrosadedicated.exe"+251A3:
call subrosadedicated.exe+7450
//Alt: db E8 A8 22 FE FF
dealloc(newmem101)
"subrosadedicated.exe"+84AEE:
call subrosadedicated.exe+7450
//Alt: db E8 5D 29 F8 FF
dealloc(newmem89)
"subrosadedicated.exe"+61C5A:
call subrosadedicated.exe+45120
//Alt: db E8 C1 34 FE FF
dealloc(newmem67)
"subrosadedicated.exe"+79DF4:
call subrosadedicated.exe+48860
//Alt: db E8 67 EA FC FF

dealloc(newmem57)
"subrosadedicated.exe"+60BD9:
call subrosadedicated.exe+48860
//Alt: db E8 82 7C FE FF
dealloc(newmem39)
"subrosadedicated.exe"+6EB0:
push ebx
mov ebx,[esp+08]
//Alt: db 53 8B 5C 24 08
dealloc(newmem30)
"subrosadedicated.exe"+84F2B:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(custom_newmem)
"subrosadedicated.exe"+604C6:
mov eax,[subrosadedicated.exe+8BDC4]
//Alt: db A1 C4 BD 94 00
dealloc(newmem23)
"subrosadedicated.exe"+8113D:
mov [ecx+subrosadedicated.exe+13841688],ebx
//Alt: db 89 99 88 16 8C 14
dealloc(newmem17)
"subrosadedicated.exe"+85011:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(newmem11)
"subrosadedicated.exe"+85422:
mov [subrosadedicated.exe+8ED176C],0000003C
//Alt: db C7 05 6C 17 F5 09 3C 00 00 00
dealloc(newmem6)
"subrosadedicated.exe"+84FD1:
mov [subrosadedicated.exe+8ED176C],ecx
//Alt: db 89 0D 6C 17 F5 09
dealloc(newmem2)
"subrosadedicated.exe"+84A50:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 F5 09
dealloc(newmem)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF

dealloc(mydata)
dealloc(mycode)
dealloc(tmpbuffer)
dealloc(strings)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>136</ID>
          <Description>"any means grenade"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(corp0,subrosadedicated.exe+8ED17F4)
define(corp_enabled,54)
define(corp_spawnpos,18)
define(corp_m_type,A0)
define(corp_m_provided,DC)
define(corps,15e4)

define(item_spawn_func,subrosadedicated.exe+44880)
               //(int item_type, float *pos, [float* velocity], float *orientation)

[ENABLE]

//---- at phone spawn -----

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
//esi = corp*
    call item_spawn_func
      pushad
            cmp [corp0+corp_enabled+esi],0
            je anymeans_skip
mov edx,[corp0+corp_m_type+esi]
    cmp edx,1 //limo
      je anymeans_skip
    cmp edx,2 //sell
      je anymeans_skip
    cmp edx,7 //sell double
      je anymeans_skip
    cmp [corp0+corp_m_provided+esi],0 //provided
      jg anymeans_skip


        mov ebp,esp
        push [ebp+2C]
        push [ebp+28]
          mov esi,[ebp+24]
            push (float)0.1
            fld [esp]
            add esp,4
            fadd [esi+8]
            fstp [esi+8]
        push esi
        push D
       call item_spawn_func
       add esp,10
           label(anymeans_skip)
           anymeans_skip:
      popad

originalcode:
//call subrosadedicated.exe+44880

exit:
jmp returnhere

"subrosadedicated.exe"+84CCD:
jmp newmem
returnhere:





 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+84CCD:
call subrosadedicated.exe+44880
//Alt: db E8 AE FB FB FF


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"hidden names"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(ev0,subrosadedicated.exe+94BA7E0)
define(ev_type,0)
 define(ev_player_id,20) //???
define(ev_player_name,40)
define(evs,80)

define(con0,subrosadedicated.exe+1DF6A800)
define(con_p,10)
define(cons,2118c)

define(p0,subrosadedicated.exe+13841600)
define(p_admin,34)
define(p_team,74)
define(p_h,88)
define(ps,381C)
define(players_max,#255)

define(write_bits_func,subrosadedicated.exe+13250)
define(player_sync_func,subrosadedicated.exe+7690)

[ENABLE]



alloc(tmpbuffer,1024)
alloc(mydata,1024)
  define(event_connection,mydata+4)


alloc(mycode,2048)
mycode:

mov ecx,players_max
xor ebx,ebx
label(init_players_loop)
init_players_loop:
  push ebx

  push ecx
    call player_sync_func

  pop ecx
  pop ebx
  add ebx,ps
 dec ecx
 cmp ecx,0
 jge init_players_loop

ret
createThread(mycode)

//--------------

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:
mov [event_connection],eax

originalcode6:
call subrosadedicated.exe+1C210

exit6:
jmp returnhere6

"subrosadedicated.exe"+70B1B:
jmp newmem6
returnhere6:




alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
add esp,08
xor edi,edi

//mov eax,[esp+58]
mov eax,[event_connection]
imul eax,cons
mov eax,[con0+con_p+eax]

{mov cl,[ev0+ev_player_id+esi]
cmp cl,al
je subrosadedicated.exe+1C810}

imul eax,ps
cmp [p0+p_admin+eax],1
je subrosadedicated.exe+1C810

xor ecx,ecx
mov cl,[ev0+ev_player_id+esi]
imul ecx,ps
mov ecx,[p0+p_team+ecx]
cmp ecx,7
je subrosadedicated.exe+1C810
cmp [p0+p_team+eax],ecx
je subrosadedicated.exe+1C810
cmp [p0+p_team+eax],7
je subrosadedicated.exe+1C810

   pushad
mov [tmpbuffer],0
mov ecx,#31
label(namewrite_loop)
namewrite_loop:
  push ecx
push 7
push tmpbuffer
call write_bits_func
add esp,8
  pop ecx
    loop namewrite_loop
   popad
jmp subrosadedicated.exe+1C834


originalcode2:
//add esp,08
//xor edi,edi

exit2:
jmp returnhere2

"subrosadedicated.exe"+1C801:
jmp newmem2
returnhere2:





{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

  pushad
mov ecx,[esp+20+58] //con?
imul ecx,cons
mov ecx,[con0+con_p+ecx]
imul ebx,ecx,ps
cmp [p0+p_admin+ebx],1
  popad
je originalcode

xor eax,eax
jmp exit

originalcode:
movzx eax,byte ptr [esi+edi+subrosadedicated.exe+94BA820]

exit:
jmp returnhere

"subrosadedicated.exe"+1C810:
jmp newmem
nop
nop
nop
returnhere:
}



[DISABLE]
dealloc(newmem6)
"subrosadedicated.exe"+70B1B:
call subrosadedicated.exe+1C210
//Alt: db E8 F0 B6 FA FF
dealloc(newmem2)
"subrosadedicated.exe"+1C801:
add esp,08
xor edi,edi
//Alt: db 83 C4 08 33 FF

dealloc(newmem)
"subrosadedicated.exe"+1C810:
movzx eax,byte ptr [esi+edi+subrosadedicated.exe+94BA820]
//Alt: db 0F B6 84 3E 20 A8 6E 09

dealloc(tmpbuffer)
dealloc(mydata)
dealloc(mycode)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>134</ID>
          <Description>"lock teams"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+766C2:
db 90 90  90 90 90 90

subrosadedicated.exe+76722:
db 90 90  90 90 90 90  90 90 90 90

[DISABLE]

subrosadedicated.exe+766C2:
mov [ebx+subrosadedicated.exe+13841674],esi

subrosadedicated.exe+76722:
mov [ebx+subrosadedicated.exe+13841674],00000007

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>147</ID>
          <Description>"----"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>146</ID>
              <Description>"no base menu"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

subrosadedicated.exe+B29E:
db 90 90  90 90 90 90  90 90 90 90

[DISABLE]

subrosadedicated.exe+B29E:
mov [ebp+subrosadedicated.exe+13841750],00000010

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>145</ID>
              <Description>"No inv clean1!!! 4.1 -&gt; 4.2"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//call subrosadedicated.exe+31CF0

exit:
jmp returnhere

"subrosadedicated.exe"+8566F:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"subrosadedicated.exe"+8566F:
call subrosadedicated.exe+31CF0
//Alt: db E8 7C C6 FA FF
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"---- /// ----"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>114</ID>
              <Description>"grabbing fix"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

subrosadedicated.exe+3E07E:
xor edi,edi
nop


alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

cmp edi,edx
je subrosadedicated.exe+3E5B2

originalcode2:
cmp dword ptr [esi-000001CC],00

exit2:
jmp returnhere2

"subrosadedicated.exe"+3E0B8:
jmp newmem2
nop
nop
returnhere2:


[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+3E0B8:
cmp dword ptr [esi-000001CC],00
//Alt: db 83 BE 34 FE FF FF 00

subrosadedicated.exe+3E07E:
lea edi,[edx+01]

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"exploding cars v4"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//-- nades ----
define(explosion_vehicle_radius,10.0)
  //(radius-based for now)
define(explosion_vehicle_force,0.3)
define(explosion_vehicle_torque,0.5)
define(explosion_vehicle_damage,#60)
//--------------

//define(explosion_force,1.5)
define(explosion_force,1.3)

define(v0,subrosadedicated.exe+80F66E0)
define(v_engine,8)
define(v_hp,C)
define(v_key,20)
define(v_body,24)
define(v_engine_pos,B0)
define(v_axis_h,364C)
define(v_axis_v,3654)
define(vs,50DC)
define(vehicles_max,#512)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_despawn,18)
define(i_pb,50)
define(i_pos,54)
define(is,214)

define(item_spawn_func,subrosadedicated.exe+44880)
define(explode_item_func,subrosadedicated.exe+21DB0)
define(spawn_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

[ENABLE]



//--------- explode_item(int item_id) ---------------

alloc(exp_newmem,2048)
label(exp_returnhere)
label(exp_originalcode)
label(exp_exit)

exp_newmem:
        pushad
mov esi,[esp+24] //arg
imul edx,esi,is //i*

mov edi,[i0+i_pb+edx]
 imul edi,pbs //i_pb*

xor ecx,ecx //v
xor ebx,ebx //v*
label(explode_vehicles_loop)
explode_vehicles_loop:
  cmp [v0+ebx],0
    je explode_vehicles_next
  cmp [v0+v_hp+ebx],0
    //je explode_vehicles_next
    jle explode_vehicles_next

  push (float)explosion_vehicle_radius
    fld [i0+i_pos+0+edx]
    //fld [pb0+pb_pos+0+edi]
    fsub [v0+v_engine_pos+0+ebx]
      fmul st(0)
    fld [i0+i_pos+8+edx]
    //fld [pb0+pb_pos+8+edi]
    fsub [v0+v_engine_pos+8+ebx]
      fmul st(0)
    faddp st(1)
    fsqrt
    fld [esp]
      fcomip st(1)
      //fstp st(0)
          pushfd
        fstp [esp+4]
        mov ebp,[esp+4] //dist
          popfd
        //add esp,4
        pop eax
      jb explode_vehicles_next

  mov eax,[i0+i_pos+0+edx]
  cmp eax,[v0+v_engine_pos+0+ebx]
    jne explode_vehicles_apply
  mov eax,[i0+i_pos+4+edx]
  cmp eax,[v0+v_engine_pos+4+ebx]
    jne explode_vehicles_apply
  mov eax,[i0+i_pos+8+edx]
  cmp eax,[v0+v_engine_pos+8+ebx]
    jne explode_vehicles_apply

jmp explode_vehicles_next
label(explode_vehicles_apply)
explode_vehicles_apply:
    //mov [v0+v_hp+ebx],0

    push ebp //dist
    fld [esp]
    add esp,4

    mov ebp,[v0+v_body+ebx]
    imul ebp,pbs //v_pb*

  //force
    push (float)explosion_vehicle_radius
    push (float)explosion_vehicle_force
        fld [i0+i_pos+0+edx]
          fsub [pb0+pb_pos+0+ebp]
          fdiv [esp+4]
          fmul [esp]
          fadd st(0)
            fchs
          fadd [pb0+pb_vel+0+ebp]
          fstp [pb0+pb_vel+0+ebp]
        fld [i0+i_pos+4+edx]
          fsub [pb0+pb_pos+4+ebp]
          fdiv [esp+4]
          fmul [esp]
            fchs
          fadd [pb0+pb_vel+4+ebp]
          fstp [pb0+pb_vel+4+ebp]
        fld [i0+i_pos+8+edx]
          fsub [pb0+pb_pos+8+ebp]
          fdiv [esp+4]
          fmul [esp]
          fadd st(0)
            fchs
          fadd [pb0+pb_vel+8+ebp]
          fstp [pb0+pb_vel+8+ebp]
    add esp,8

  //torque
    push (float)explosion_vehicle_torque
        push [pb0+pb_torque+8+ebp]
        push [pb0+pb_torque+4+ebp]
        push [pb0+pb_torque+0+ebp]
            pushad
          call frand5
           fmul [esp+2C]
           fadd [esp+20]
           fstp [esp+20]
                  call frand5
                   fmul [esp+2C]
                   fadd [esp+24]
                   fstp [esp+24]
                  call frand5
           fmul [esp+2C]
           fadd [esp+28]
           fstp [esp+28]
            popad
        pop [pb0+pb_torque+0+ebp]
        pop [pb0+pb_torque+4+ebp]
        pop [pb0+pb_torque+8+ebp]
    add esp,4


  //apply damage
    push explosion_vehicle_damage
    push (float)explosion_vehicle_radius
     fdiv [esp]
     fimul [esp+4]
    add esp,8
     fiadd [v0+v_hp+ebx]
     fistp [v0+v_hp+ebx]


label(explode_vehicles_next)
explode_vehicles_next:
  add ebx,vs
    inc ecx
    cmp ecx,vehicles_max
    jle explode_vehicles_loop


        popad
exp_originalcode:
sub esp,18
push ebx
mov ebx,[esp+20]

exp_exit:
jmp exp_returnhere

"subrosadedicated.exe"+21DB0:
jmp exp_newmem
nop 3
exp_returnhere:


//-------- car hp &lt; 0 check -----------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

cmp dword ptr [esi+subrosadedicated.exe+80F66EC],#75
jg exit

cmp dword ptr [esi+subrosadedicated.exe+80F66EC],0
jg sparkles

//cmp [v0+v_engine+esi],0
cmp [v0+v_hp+esi],#-101
je exit

   pushad
//mov [v0+v_engine+esi],0
mov [v0+v_hp+esi],#-101
mov [v0+v_axis_h+esi],(float)0.0
mov [v0+v_axis_v+esi],(float)0.0

mov ecx,[v0+v_body+esi]
imul ecx,pbs
push (float)explosion_force
push [pb0+pb_torque+8+ecx]
push [pb0+pb_torque+4+ecx]
push [pb0+pb_torque+0+ecx]
    pushad
  call frand5
   fmul [esp+2C]
   fadd [esp+20]
   fstp [esp+20]
  call frand5
   fmul [esp+2C]
   fadd [esp+24]
   fstp [esp+24]
  call frand5
   fmul [esp+2C]
   fadd [esp+28]
   fstp [esp+28]
    popad
pop [pb0+pb_torque+0+ecx]
pop [pb0+pb_torque+4+ecx]
pop [pb0+pb_torque+8+ecx]
add esp,4



lea eax,[v0+v_engine_pos+esi]
push eax
push 0
call spawn_particles_func
add esp,4
pop eax

push (float)0.0
push (float)1.0
push (float)0.0
  push (float)0.0
  push (float)0.0
  push (float)1.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp //orientation

push esi
push 0 //velocity
push eax //position
push D //grenade
call item_spawn_func
//add esp,10+24
  //---
    add esp,4
    pop edi
    add esp,8+24
     imul ebx,eax,is //i*
       mov edx,[edi+0]
        mov [i0+i_pos+0+ebx],edx
       mov edx,[edi+4]
        mov [i0+i_pos+4+ebx],edx
       mov edx,[edi+8]
        mov [i0+i_pos+8+ebx],edx
  //---

push eax
call explode_item_func
pop eax

imul eax,is
mov [i0+i_despawn+eax],0

   popad
jmp exit




label(sparkles)
sparkles:
     pushad
mov ebx,[game_timer]
and ebx,#127
cmp ebx,0
jne sparkles_ret

sub [v0+v_hp+esi],4

{
lea eax,[v0+v_engine_pos+esi]
push eax
push 0
call spawn_particles_func
add esp,4
pop eax
}

  push (float)0.0
  push (float)-2.0
  push (float)0.0
  lea eax,[esp]
  push eax
 lea eax,[v0+v_engine_pos+esi]
 push eax
push 2
push 0
call splash_particles_func
add esp,10+C

label(sparkles_ret)
sparkles_ret:
     popad
originalcode:
//cmp dword ptr [esi+subrosadedicated.exe+80F66EC],00

exit:
jmp returnhere

"subrosadedicated.exe"+31196:
jmp newmem
nop
nop
returnhere:




alloc(mycode,2048)
mycode:

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
push 7FFF //randmax
fidiv dword [esp]
add esp,8
ret

label(frand5)
frand5:
call frand1
push (float)0.5
fsub [esp]
pop eax
ret

[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+31196:
cmp dword ptr [esi+subrosadedicated.exe+80F66EC],00
//Alt: db 83 BE EC 66 09 09 00

dealloc(exp_newmem)
"subrosadedicated.exe"+21DB0:
sub esp,18
push ebx
mov ebx,[esp+20]
//Alt: db 83 EC 18 53 8B 5C 24 20


dealloc(mycode)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117</ID>
              <Description>"car hp"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

subrosadedicated.exe+488F5:
mov [esi+subrosadedicated.exe+80F66EC],#200

 
[DISABLE]

subrosadedicated.exe+488F5:
mov [esi+subrosadedicated.exe+80F66EC],#100
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"non-lethal explosions"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(explosion_force,0.1325)
define(explosion_radius,15.0) //default: 8.0
define(explosion_death_radius,6.5) //default: 4.0
define(explosion_damage,#50)
define(explosion_damage_limbs,#45)

//-----------------------------------------------

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_seat,2C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

[ENABLE]



//---------- explosion death radius ----------

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:
push (float)explosion_death_radius
fld [esp]
add esp,4

originalcode11:
//fld dword ptr [subrosadedicated.exe+887DC]

exit11:
jmp returnhere11

"subrosadedicated.exe"+21E19:
jmp newmem11
nop
returnhere11:







//----------- explosion radius ------------

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:
push (float)explosion_radius
fcomp [esp]
add esp,4

originalcode6:
//fcomp dword ptr [subrosadedicated.exe+888D4]

exit6:
jmp returnhere6

"subrosadedicated.exe"+21E38:
jmp newmem6
nop
returnhere6:


//------ explosion force ---------------------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
     pushfd
push (float)explosion_force
fmul [esp]
add esp,4
     popfd
originalcode2:
//fmul qword ptr [subrosadedicated.exe+884C0]

exit2:
jmp returnhere2

"subrosadedicated.exe"+21F47:
jmp newmem2
nop
returnhere2:


//--------- explosion death -------------------------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
       pushad
sub edi,198+3C

mov [h_car+edi],-1

mov ecx,8
mov ebx,edi
label(hp_damage)
hp_damage:
  sub [h_health2+ebx],explosion_damage
add ebx,8
loop hp_damage
sub [h_health2+20+edi],explosion_damage_limbs
sub [h_health2+28+edi],explosion_damage_limbs
sub [h_health2+30+edi],explosion_damage_limbs
sub [h_health2+38+edi],explosion_damage_limbs

       popad
originalcode:
//mov [edi-00000198],00000000

exit:
jmp returnhere

"subrosadedicated.exe"+21E2E:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem11)
"subrosadedicated.exe"+21E19:
fld dword ptr [subrosadedicated.exe+887DC]
//Alt: db D9 05 DC 87 D9 00
dealloc(newmem6)
"subrosadedicated.exe"+21E38:
fcomp dword ptr [subrosadedicated.exe+888D4]
//Alt: db D8 1D D4 88 08 01
dealloc(newmem2)
"subrosadedicated.exe"+21F47:
fmul qword ptr [subrosadedicated.exe+884C0]
//Alt: db DC 0D C0 84 08 01
dealloc(newmem)
"subrosadedicated.exe"+21E2E:
mov [edi-00000198],00000000
//Alt: db C7 87 68 FE FF FF 00 00 00 00


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>119</ID>
              <Description>"fine steering"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_controls,1B4)
define(hs,3540)

[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [h0+h_car+eax],-1
je originalcode
mov ecx,[h0+h_controls+eax]
//and ecx,80000 //z
and ecx,8 //ctrl
cmp ecx,0
je originalcode
    push (float)0.2
    fmul [esp]
    add esp,4
originalcode:
fstp dword ptr [eax+subrosadedicated.exe+5313E4]

exit:
jmp returnhere

"subrosadedicated.exe"+EAF3:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+EAF3:
fstp dword ptr [eax+subrosadedicated.exe+5313E4]
//Alt: db D9 98 E4 13 53 01



</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>120</ID>
              <Description>"goods on the back   v2 (9/24)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)


[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov edi,ecx
mov ecx,[ecx+subrosadedicated.exe+8F011C8]

cmp ecx,2 //check if in hand
jl exit

mov edi,[i0+i_type+edi] //check item type

  cmp edi,B //9mm
    je goods_hide
  cmp edi,9 //Uzi
    je goods_hide

  cmp edi,13 //black disk..
  jl exit
  cmp edi,18 //..red disk
  jg exit

label(goods_show)
goods_show:

mov ecx,2 //slot 1
jmp exit

label(goods_hide)
goods_hide:

mov ecx,3 //slot 2
jmp exit

originalcode:
mov ecx,[ecx+subrosadedicated.exe+8F011C8]

exit:
jmp returnhere

"subrosadedicated.exe"+75E1:
jmp newmem
nop
returnhere:



 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+75E1:
mov ecx,[ecx+subrosadedicated.exe+8F011C8]
//Alt: db 8B 89 C8 11 F0 09



</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>121</ID>
              <Description>"non-lethal runover"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(min_threshold,0.1) //default: 0.20
define(death_threshold,0.4) //default: 0.20
define(damage_ratio,96.0)

//---------

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_seat,2C)
define(h_drunkness,6C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

[ENABLE]


//-------- runover threshold -------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push (float)min_threshold
fcomp [esp]
add esp,4

originalcode2:
//fcomp qword ptr [subrosadedicated.exe+88470]

exit2:
jmp returnhere2

"subrosadedicated.exe"+7F6EC:
jmp newmem2
nop
returnhere2:



//-------- runover death -------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

fld [esp+18]
push (float)death_threshold
fcomp [esp]
add esp,4
fnstsw ax
test ah,41
  fstp st(0)
je originalcode

    pushad
push (float)damage_ratio
fld [esp+3C]
fabs
fchs
fmul [esp]
add esp,4

cmp ebx,0
  je punch2_dmg_crotch
cmp ebx,1
  je punch2_dmg_torso
cmp ebx,2
  je punch2_dmg_torso
cmp ebx,3
  je punch2_dmg_head
cmp ebx,4
  je punch2_dmg_larm
cmp ebx,5
  je punch2_dmg_larm
cmp ebx,6
  je punch2_dmg_larm
cmp ebx,7
  je punch2_dmg_rarm
cmp ebx,8
  je punch2_dmg_rarm
cmp ebx,9
  je punch2_dmg_rarm
cmp ebx,#10
  je punch2_dmg_lleg
cmp ebx,#11
  je punch2_dmg_lleg
cmp ebx,#12
  je punch2_dmg_lleg
cmp ebx,#13
  je punch2_dmg_rleg
cmp ebx,#14
  je punch2_dmg_rleg
cmp ebx,#15
  je punch2_dmg_rleg

label(punch2_dmg_crotch)
punch2_dmg_crotch:
{
        fld [pb0+pb_vel+0+edi]
        fadd [h0+h_walk_dir+0+ecx]
        fld [pb0+pb_vel+4+edi]
        fabs
        fadd [h0+h_walk_dir+4+ecx]
        fld [pb0+pb_vel+8+edi]
        fadd [h0+h_walk_dir+8+ecx]
    cmp [h0+h_drunkness+ecx],#80
    jg grab2_affect
  add [h0+h_drunkness+ecx],screen_blackening
}
    fstp st(0)
jmp runover_ret

label(punch2_dmg_torso)
punch2_dmg_torso:
                 push eax
                  fist [esp]
                  cmp [esp],-8
                 pop eax
  fiadd [h0+h_health2+8+esi]
  fistp [h0+h_health2+8+esi]
                 jg runover_ret
                //mov [h0+h_bleeding+esi],1
jmp runover_ret

label(punch2_dmg_head)
punch2_dmg_head:
  fld st(0)
  fiadd [h0+h_health2+10+esi]
  fistp [h0+h_health2+10+esi]
    //cmp [h0+h_drunkness+esi],#80
    //jg grab2_affect
  //add [h0+h_drunkness+ecx],screen_blackening
  fchs
   fadd st(0)
   fadd st(0)
  fiadd [h0+h_drunkness+esi]
  fistp [h0+h_drunkness+esi]
jmp runover_ret

label(punch2_dmg_larm)
punch2_dmg_larm:
  fiadd [h0+h_health2+18+esi]
  fistp [h0+h_health2+18+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_rarm)
punch2_dmg_rarm:
  fiadd [h0+h_health2+20+esi]
  fistp [h0+h_health2+20+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_lleg)
punch2_dmg_lleg:
  fiadd [h0+h_health2+28+esi]
  fistp [h0+h_health2+28+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_rleg)
punch2_dmg_rleg:
  fiadd [h0+h_health2+30+esi]
  fistp [h0+h_health2+30+esi]
  //fstp st(0)
jmp runover_ret

label(runover_ret)
runover_ret:
    popad
jmp exit
originalcode:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78

exit:
jmp returnhere

"subrosadedicated.exe"+7F6F9:
jmp newmem
nop
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+7F6EC:
fcomp qword ptr [subrosadedicated.exe+88470]
//Alt: db DC 1D 70 84 D9 00
dealloc(newmem)
"subrosadedicated.exe"+7F6F9:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78
//Alt: db 83 86 F8 12 24 01 88


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>122</ID>
              <Description>"punching 8/9    s3"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(punch_knockback,3.5)
define(punch_knockback_eliminator,10.0)
define(punch_damage,135.0)
define(punch_damage_eliminator,300.0)
define(punch_threshold,3.0)

define(punch_extension,1.25)
define(punch_extension_both,1.1)
define(punch_height,1.775)
define(punch_yaw_both,1.1)

define(kick_knockback,0.35)
define(kick_knockback_eliminator,0.775)
define(kick_hp_damage,#2)
//define(kick_collision_radius,0.13)
define(kick_collision_radius,0.1425)
define(kick_threshold,1.0)
define(kick_body_stabilize,0.7)

define(punch_cooldown,#70)
define(kick_cooldown,#70)

//--------------------------------

define(p0,subrosadedicated.exe+13841600)
define(p_h,88)
define(p_skin,3798)
define(ps,381C)
define(players_max,#255)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_controls,1B4)
define(h_elim,38)
define(h_zoom,54)
define(h_grounded,70)
define(h_yaw_global,8C)
define(h_yaw,12C)
define(h_shift_yaw,134)
define(h_bp0_pb,1C0)
define(h_bp0_pos,1C4)
define(h_bps,120)
define(h_grab0,3188)
define(h_grab1,31B4)
define(h_grab_h,4)
define(h_grab_bp,C)
define(h_grabs,2C)
define(h_drunkness,6C)
define(h_health0,34)
define(h_health1,32A0)
define(h_health2,32A4)
define(h_slot0,3038)
define(h_slot1,3060)
define(h_slot2,3088)
define(h_skin,34D8)
define(hs,3540)
define(humans_max,#255)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)

define(spawn_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)
define(game_timer2,subrosadedicated.exe+8ED176C+4)


define(ray_distance_func,subrosadedicated.exe+210C0)
//sub_4210C0(vector3 *out_a1, vector3 *out_a2, float *out_a3, vector3 *a4, vector3 *a5, vector3 *a6, vector3 *a7, float a8)

//define(grab_item_func,subrosadedicated.exe+22C40)
define(grab_item_func,subrosadedicated.exe+45120)

[ENABLE]











//--------------------------


alloc(mydata2,16384)

define(h20,mydata2+200)
define(h2_zoom_last,C)
define(h2_kick_cooldown,10)
define(h2_punch_cooldown,18)
define(h2_shift_yaw_old,20)
define(h2_shift_pitch_old,24)
define(h2s,30)


//round reset (versus and elim)

alloc(newmem178,2048)
label(returnhere178)
label(originalcode178)
label(exit178)

newmem178:
       pushad

mov ecx,players_max
xor ebx,ebx
label(reset2_h2_loop)
reset2_h2_loop:
  mov [h20+h2_zoom_last+ebx],0
  mov [h20+h2_kick_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+4+ebx],0

add ebx,h2s
loop reset2_h2_loop
       popad
originalcode178:
mov [subrosadedicated.exe+8ED1764],esi

exit178:
jmp returnhere178

"subrosadedicated.exe"+7A913:
jmp newmem178
nop
returnhere178:

//round reset (round)

alloc(newmem73,4096)
label(returnhere73)
label(originalcode73)
label(exit73)

newmem73:
       pushad

mov ecx,players_max
xor ebx,ebx
label(reset_h2_loop)
reset_h2_loop:
  mov [h20+h2_zoom_last+ebx],0
  mov [h20+h2_kick_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+4+ebx],0

add ebx,h2s
loop reset_h2_loop

       popad
originalcode73:
mov [subrosadedicated.exe+8ED1764],esi

exit73:
jmp returnhere73

"subrosadedicated.exe"+7A8F2:
jmp newmem73
nop
returnhere73:

//leg motor

alloc(newmem85,2048)
label(returnhere85)
label(originalcode85)
label(exit85)

newmem85:

mov ecx,[esp]
imul edx,ecx,h2s
imul ecx,hs
  mov eax,[h20+h2_kick_cooldown+edx]
  mov [h20+h2_kick_cooldown+edx],0
test [h0+h_grounded+ecx],1
jne originalcode85
  mov [h20+h2_kick_cooldown+edx],eax
test [h0+h_zoom+ecx],2
je originalcode85
cmp [h0+h_health0+ecx],0
jle originalcode85

  //mov [esp+18],(float)0.95
//call subrosadedicated.exe+3F760
    pushad


cmp [game_state],1
je kick_dmg_skip
//-- threshold ---
  //left leg magnitude
  mov ebp,C
  imul ebp,h_bps
  mov ebp,[h0+h_bp0_pb+ecx+ebp]
  imul ebp,pbs
     fld [pb0+pb_vel+0+ebp]
     fmul st(0)
     fld [pb0+pb_vel+4+ebp]
     fmul st(0)
     fld [pb0+pb_vel+8+ebp]
     fmul st(0)
    faddp
    faddp
    fsqrt
  //right leg magnitude
  mov ebp,F
  imul ebp,h_bps
  mov ebp,[h0+h_bp0_pb+ecx+ebp]
  imul ebp,pbs
     fld [pb0+pb_vel+0+ebp]
     fmul st(0)
     fld [pb0+pb_vel+4+ebp]
     fmul st(0)
     fld [pb0+pb_vel+8+ebp]
     fmul st(0)
    faddp
    faddp
    fsqrt
  faddp

  push (float)kick_threshold
  fld [esp]
  add esp,4
  fcomip st(1)
  fstp st(0)
  jb kick_dmg_skip
//-----------------

// -- kick force ----------

mov ebp,humans_max
xor eax,eax
label(kick_check_h_loop)
kick_check_h_loop:
 cmp [h0+eax],0
 je kick_check_h_next
 cmp eax,ecx
 je kick_check_h_next

mov ebp,B
label(kick_check_leg_loop)
kick_check_leg_loop:
  push ebp
  push eax

mov edi,3 //chest -&gt; head
xor ebx,ebx
mov edx,h_bps
label(kick_check_bp_loop)
kick_check_bp_loop:
   push ecx
   push eax
   push edi
   push ebp
   push ebx
   push edx
imul ebp,h_bps

sub esp,1C
push (float)kick_collision_radius
  lea edi,[h0+h_bp0_pos+h_bps+ecx+ebp]
    push edi //b1
  lea edi,[h0+h_bp0_pos+ecx+ebp]
    push edi //b0
  lea edi,[h0+h_bp0_pos+eax+edx]
    push edi //a1
  lea edi,[h0+h_bp0_pos+eax+ebx]
    push edi //a0

{
  lea edi,[h0+h_bp0_pos+h_bps+ecx+ebp]
    push edi //b1
  lea edi,[h0+h_bp0_pos+eax+edx]
    push edi //a1
  lea edi,[h0+h_bp0_pos+ecx+ebp]
    push edi //b0
  lea edi,[h0+h_bp0_pos+eax+ebx]
    push edi //a0
}

  lea edi,[esp+14]
    push edi //a3_out
  lea edi,[edi+4]
    push edi //a2_out
  lea edi,[edi+C]
    push edi //a1_out
call ray_distance_func
//sub_4210C0(vector3 *out_a1, vector3 *out_a2, float *out_a3, vector3 *a4, vector3 *a5, vector3 *a6, vector3 *a7, float a8)
add esp,3C
mov esi,eax

   pop edx
   pop ebx
   pop ebp
   pop edi
   pop eax
   pop ecx

test esi,esi
je kick_fail

//--- drop items ------
{
cmp [h0+h_slot0+eax],0
je kick_dmg_skip_slot0

        pushad
  push -1
  push 0
  push 1
  push [h0+h_slot0+4+eax]
  call grab_item_func
  add esp,10
        popad

label(kick_dmg_skip_slot0)
kick_dmg_skip_slot0:
cmp [h0+h_slot1+eax],0
je kick_dmg_skip_slot1

        pushad
  push -1
  push 1
  push 1
  push [h0+h_slot1+4+eax]
  call grab_item_func
  add esp,10
        popad

label(kick_dmg_skip_slot1)
kick_dmg_skip_slot1:
}
//---- hp damage -------

cmp [h0+h_skin+eax],6
je kick_skip_hp_damage

//sub [h0+h_health1+eax],kick_hp_damage
sub [h0+h_health2+8+eax],kick_hp_damage
sub [h0+h_health2+10+eax],kick_hp_damage
add [h0+h_drunkness+eax],#3

label(kick_skip_hp_damage)
kick_skip_hp_damage:

//---- force ------------

  push edi
  push ebp
mov edi,[h0+h_bp0_pb+eax+ebx]
imul edi,pbs

imul ebp,h_bps
mov ebp,[h0+h_bp0_pb+ecx+ebp]
imul ebp,pbs

push (float)kick_knockback
    cmp [h0+h_elim+ecx],0
    je kick_dmg_elim_skip
       mov [esp],(float)kick_knockback_eliminator
    label(kick_dmg_elim_skip)
    kick_dmg_elim_skip:

  fld [pb0+pb_vel+0+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+0+edi]
    fstp [pb0+pb_vel+0+edi]
 //---
  fld [pb0+pb_vel+4+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+4+edi]
    fstp [pb0+pb_vel+4+edi]
 //---
  fld [pb0+pb_vel+8+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+8+edi]
    fstp [pb0+pb_vel+8+edi]
//--- particles ---
     pushad
  lea eax,[pb0+pb_vel+edi]
  push eax
 lea eax,[pb0+pb_pos+edi]
 push eax
push 1
push 0
call splash_particles_func
add esp,10
      popad
//-----------------
add esp,4

  pop ebp
  pop edi

label(kick_fail)
kick_fail:

add ebx,h_bps
add edx,h_bps
dec edi
cmp edi,1
jge kick_check_bp_loop

  pop eax
  pop ebp
add ebp,3
cmp ebp,E
jle kick_check_leg_loop

label(kick_check_h_next)
kick_check_h_next:
add eax,hs
dec ebp
cmp ebp,0
jge kick_check_h_loop

// -------------------------
     popad
     pushad
label(kick_dmg_skip)
kick_dmg_skip:

//--- stabilize pelvis torque ----
mov eax,[h0+h_bp0_pb+ecx]
imul eax,pbs
  push (float)kick_body_stabilize
    fld [pb0+pb_torque+0+eax]
    fmul [esp]
    fstp [pb0+pb_torque+0+eax]
      fld [pb0+pb_torque+4+eax]
      fmul [esp]
      fstp [pb0+pb_torque+4+eax]
    fld [pb0+pb_torque+8+eax]
    fmul [esp]
    fstp [pb0+pb_torque+8+eax]
  add esp,4
//--------- -----------------------

mov eax,[game_timer2]
mov ecx,[esp+20]
imul ecx,h2s
cmp eax,[h20+h2_kick_cooldown+ecx]
jl leg_ret
add eax,kick_cooldown
mov [h20+h2_kick_cooldown+ecx],eax


// -- kick animation --

mov ecx,[esp+20]
  push ecx
  imul ecx,h2s
  test [h20+h2_zoom_last+ecx],2
  pop ecx
  jne leg_ret
imul ecx,hs

push (float)0.75 //velocity force

//------ left thigh --------
{
mov ebx,A
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)100.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4
}
//------ left knee --------

mov ebx,B
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)-10.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4

//---- right thigh ------
{
mov ebx,D
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)35.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4
}
//----- right knee --------

mov ebx,E
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)10.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4

//-----------------------

mov ebx,0
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs
   mov [esp],(float)-0.0675
    fld [esp]
    fadd [pb0+pb_torque+4+ebx]
    fstp [pb0+pb_torque+4+ebx]


add esp,4






label(leg_apply)
leg_apply:
    popad
//call subrosadedicated.exe+3F760
jmp exit85

label(leg_ret)
leg_ret:
    popad
jmp exit85

originalcode85:
call subrosadedicated.exe+3F760

exit85:
jmp returnhere85

"subrosadedicated.exe"+6C83B:
jmp newmem85
returnhere85:

//leg motor (jump state)

alloc(newmem112,2048)
label(returnhere112)
label(originalcode112)
label(exit112)

newmem112:

imul ecx,hs
test [h0+h_zoom+ecx],2
jne exit112

originalcode112:
call subrosadedicated.exe+3F760

exit112:
jmp returnhere112

"subrosadedicated.exe"+66523:
jmp newmem112
returnhere112:


//mid-air
{
alloc(newmem98,2048)
label(returnhere98)
label(originalcode98)
label(exit98)

newmem98:
test [h0+h_zoom+esi],2
je originalcode98
         pushad
//...
push A
push 0

mov esi,[h0+h_p+esi]
imul esi,ps
mov esi,[p0+p_h+esi]
push esi

call subrosadedicated.exe+3F760
add esp,34


label(midair_ret)
midair_ret:
         popad
originalcode98:
test byte ptr [esi+subrosadedicated.exe+531478],08

exit98:
jmp returnhere98

"subrosadedicated.exe"+6C3CF:
jmp newmem98
nop
nop
returnhere98:
}



//grab check 3

alloc(newmem41,2048)
label(returnhere41)
label(originalcode41)
label(exit41)

 //edx = src h*
 //ebp = hand limb
 //[esp+50] = dst h
 //[esp+18] = dst limb
newmem41:

cmp [game_state],1
je subrosadedicated.exe+3E44C
//je subrosadedicated.exe+3E5E2

test [edx+subrosadedicated.exe+531478],0800
je subrosadedicated.exe+3E44C
    pushad

mov edi,ebp //bp
imul edi,h_bps //bp*
mov edi,[h0+h_bp0_pb+edx+edi] //hand pb
imul edi,pbs

mov ebx,0
  cmp ebp,6
  jne grab3_1
mov ebx,1
label(grab3_1)
grab3_1:
  inc ebx
mov eax,[h0+h_controls+edx]
test eax,ebx
je grab3_ret
  dec ebx

  push ebx
imul ebx,h_grabs
cmp [h0+h_grab0+ebx+edx],1
  pop ebx
je grab3_ret


                   push ebx
    mov eax,[h0+h_p+edx]
    imul eax,ps
    mov eax,[p0+p_h+eax]
    imul eax,h2s
    lea eax,[eax+ebx*4]
      mov ebx,[game_timer2]
      sub ebx,[h20+h2_punch_cooldown+eax]
        cmp ebx,0
                   pop ebx
        jl grab3_ret


mov ecx,[esp+20+50]
imul ecx,hs //dst h*
  push ebx
//mov ebx,[esp+20+18]
mov ebx,[esp+24+18]
imul esi,ebx,h_bps
mov esi,[h0+h_bp0_pb+ecx+esi] //limb pb
imul esi,pbs

   //mov [pb0+pb_vel+4+esi],(float)0.15
   //mov [pb0+pb_vel+4+edi],(float)0.3

//magnitude

  sub esp,14
  fstp [esp] //fpu stack overflow, saving some values
  fstp [esp+4]
  fstp [esp+8]
  fstp [esp+C]

fld [pb0+pb_vel+0+edi]
      fsub [pb0+pb_vel+0+esi]
  fmul st(0)
fld [pb0+pb_vel+4+edi]
      fsub [pb0+pb_vel+4+esi]
  fmul st(0)
fld [pb0+pb_vel+8+edi]
      fsub [pb0+pb_vel+8+esi]
  fmul st(0)
faddp
faddp
fsqrt

mov [esp+10],(float)punch_damage
   cmp [h0+h_elim+edx],0
   je punch_dmg_elim_skip
      mov [esp+10],(float)punch_damage_eliminator
   label(punch_dmg_elim_skip)
   punch_dmg_elim_skip:
fmul [esp+10]
fchs
fstp [esp+10]
   fld [esp+C] //restoring
   fld [esp+8]
   fld [esp+4]
   fld [esp]
fld [esp+10]
add esp,14

//-- threshold ---
  push (float)-punch_threshold
  fld [esp]
  add esp,4
  fcomip st(1)
  jb punch_dmg_skip
//-----------------


//apply force

push (float)punch_knockback

    cmp [h0+h_elim+edx],0
    je punch_force_elim_skip
      mov [esp],(float)punch_knockback_eliminator
    label(punch_force_elim_skip)
    punch_force_elim_skip:

  fld [pb0+pb_vel+0+edi]
  fmul [esp]
    fadd [pb0+pb_vel+0+esi]
    fstp [pb0+pb_vel+0+esi]
  fld [pb0+pb_vel+4+edi]
  fmul [esp]
    fadd [pb0+pb_vel+4+esi]
    fstp [pb0+pb_vel+4+esi]
  fld [pb0+pb_vel+8+edi]
  fmul [esp]
    fadd [pb0+pb_vel+8+esi]
    fstp [pb0+pb_vel+8+esi]
add esp,4

//apply damage

     cmp [h0+h_skin+ecx],6
     je punch_dmg_crotch //!!!!!!!!
cmp ebx,0
  je punch_dmg_crotch
cmp ebx,1
  je punch_dmg_torso
cmp ebx,2
  je punch_dmg_torso
cmp ebx,3
  je punch_dmg_head

cmp ebx,4
  je punch_dmg_larm
cmp ebx,5
  je punch_dmg_larm
cmp ebx,6
  je punch_dmg_larm
cmp ebx,7
  je punch_dmg_rarm
cmp ebx,8
  je punch_dmg_rarm
cmp ebx,9
  je punch_dmg_rarm
cmp ebx,#10
  je punch_dmg_lleg
cmp ebx,#11
  je punch_dmg_lleg
cmp ebx,#12
  je punch_dmg_lleg
cmp ebx,#13
  je punch_dmg_rleg
cmp ebx,#14
  je punch_dmg_rleg
cmp ebx,#15
  je punch_dmg_rleg

label(punch_dmg_crotch)
punch_dmg_crotch:
    fstp st(0)
jmp grab_affect

label(punch_dmg_torso)
punch_dmg_torso:
                 push eax
                  fist [esp]
                  cmp [esp],-8
                 pop eax
  fiadd [h0+h_health2+8+ecx]
  fistp [h0+h_health2+8+ecx]
                 jg grab_affect
                //mov [h0+h_bleeding+ecx],1
jmp grab_affect

label(punch_dmg_head)
punch_dmg_head:
  fld st(0)
  fiadd [h0+h_health2+10+ecx]
  fistp [h0+h_health2+10+ecx]
  fchs
   fadd st(0)
   fadd st(0)
  fiadd [h0+h_drunkness+ecx]
  fistp [h0+h_drunkness+ecx]
jmp grab_affect

label(punch_dmg_larm)
punch_dmg_larm:
  fiadd [h0+h_health2+18+ecx]
  fistp [h0+h_health2+18+ecx]
jmp grab_affect

label(punch_dmg_rarm)
punch_dmg_rarm:
  fiadd [h0+h_health2+20+ecx]
  fistp [h0+h_health2+20+ecx]
jmp grab_affect

label(punch_dmg_lleg)
punch_dmg_lleg:
  fiadd [h0+h_health2+28+ecx]
  fistp [h0+h_health2+28+ecx]
jmp grab_affect

label(punch_dmg_rleg)
punch_dmg_rleg:
  fiadd [h0+h_health2+30+ecx]
  fistp [h0+h_health2+30+ecx]
jmp grab_affect

label(grab_affect)
grab_affect:


   pop ebx

    mov eax,[h0+h_p+edx]
    imul eax,ps
    mov eax,[p0+p_h+eax]
    imul eax,h2s
    lea eax,[eax+ebx*4]
      mov ebx,[game_timer2]
      add ebx,punch_cooldown
      mov [h20+h2_punch_cooldown+eax],ebx


  lea eax,[pb0+pb_vel+edi]
  push eax
 lea eax,[pb0+pb_pos+edi]
 push eax
push 1
push 0
call splash_particles_func
add esp,10

jmp grab3_ret
label(punch_dmg_skip)
punch_dmg_skip:
fstp st(0)
add esp,4

label(grab3_ret)
grab3_ret:
    popad
jmp subrosadedicated.exe+3E5E2

originalcode41:
test [edx+subrosadedicated.exe+531478],0800

exit41:
jmp returnhere41

"subrosadedicated.exe"+3E43C:
jmp newmem41
nop
nop
nop
nop
nop
returnhere41:

//grab check 2


alloc(newmem32,2048)
label(returnhere32)
label(originalcode32)
label(exit32)

newmem32:

test [ebp+subrosadedicated.exe+531478],eax
  jne subrosadedicated.exe+64D75
  test [ebp+subrosadedicated.exe+53147C],eax
  je subrosadedicated.exe+64D75
jmp subrosadedicated.exe+64BE9

originalcode32:
test [ebp+subrosadedicated.exe+531478],eax
  //je subrosadedicated.exe+64D75
  //test [ebp+subrosadedicated.exe+53147C],eax
  //jne subrosadedicated.exe+64D75


exit32:
jmp returnhere32


"subrosadedicated.exe"+64BD1:
jmp newmem32
nop
returnhere32:



//grab check 1

alloc(newmem24,2048)
label(returnhere24)
label(originalcode24)
label(exit24)

newmem24:

 inc ebx
push eax
mov eax,[ebp+subrosadedicated.exe+531478]
and eax,ebx
 dec ebx
cmp eax,0
  pop eax
je subrosadedicated.exe+64D81
jmp subrosadedicated.exe+64D8F

originalcode24:
test [ebp+subrosadedicated.exe+531478],0800
  //jne subrosadedicated.exe+64D8F


exit24:
jmp returnhere24


"subrosadedicated.exe"+64D75:
jmp newmem24
nop
nop
nop
nop
nop
returnhere24:



//arm extension check

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:
  pushad
test eax,800
jne ext_apply
 inc ebx
  not ebx
  and ebx,3
and eax,ebx
  not ebx
  and ebx,3
 dec ebx
cmp eax,0
je ext_ret

label(ext_apply)
ext_apply:
  popad
  jmp exit6
label(ext_ret)
ext_ret:
  popad
  jmp subrosadedicated.exe+6411E
originalcode6:
test eax,00000800
je subrosadedicated.exe+6411E

exit6:
jmp returnhere6

"subrosadedicated.exe"+640A7:
jmp newmem6
returnhere6:


//arm retract check

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:

test eax,800
je subrosadedicated.exe+640CC

push eax
 inc ebx
  not ebx
  and ebx,3
and eax,ebx
  not ebx
  and ebx,3
 dec ebx
cmp eax,0
pop eax
je originalcode11

mov [esp+30],(float)punch_extension
mov [esp+10],(float)punch_height


   push eax
  and eax,3
  cmp eax,3
   pop eax
  jne subrosadedicated.exe+640CC
     mov [esp+30],(float)punch_extension_both


jmp subrosadedicated.exe+640CC

originalcode11:
//test al,02
//je subrosadedicated.exe+640CC
fld dword ptr [subrosadedicated.exe+887C0]

exit11:
jmp returnhere11

"subrosadedicated.exe"+640BE:
jmp newmem11
nop
nop
nop
nop
nop
returnhere11:

//grab pitch check

alloc(newmem17,2048)
label(returnhere17)
label(originalcode17)
label(exit17)

newmem17:
jp subrosadedicated.exe+640EF
 push edx
 mov edx,[h0+h_controls+esi]
 and edx,800
cmp edx,0
 pop edx
jne subrosadedicated.exe+640EF

originalcode17:
//jp subrosadedicated.exe+640EF
fld dword ptr [esi+subrosadedicated.exe+531354]

exit17:
jmp returnhere17

"subrosadedicated.exe"+640D9:
jmp newmem17
nop
nop
nop
returnhere17:

//grab yaw check

alloc(newmem62,2048)
label(returnhere62)
label(originalcode62)
label(exit62)

newmem62:
   push eax
mov eax,[h0+h_grab0+esi]
add eax,[h0+h_grab1+esi]
cmp eax,1
    pop eax
  je originalcode62
    push eax
mov eax,[h0+h_controls+esi]
test eax,800
   pop eax
je originalcode62
   push eax
mov eax,[h0+h_controls+esi]
and eax,3
cmp eax,3
   pop eax
jne originalcode62

push (float)punch_yaw_both
fld [esp]

test ebx,ebx
jne grab_yaw_ret
   fchs
label(grab_yaw_ret)
grab_yaw_ret:
  add esp,4
  fstp [esp+14]
jmp subrosadedicated.exe+64122



originalcode62:
test ebx,ebx
jne subrosadedicated.exe+64112
fld dword ptr [subrosadedicated.exe+888E8]

exit62:
jmp returnhere62

"subrosadedicated.exe"+64102:
jmp newmem62
nop
nop
nop
nop
nop
returnhere62:

//arm motor

alloc(newmem143,2048)
label(returnhere143)
label(originalcode143)
label(exit143)

newmem143:
      push edi
imul edi,hs
test [h0+h_controls+edi],800
je originalcode143
mov eax,[h0+h_slot0+edi]
add eax,[h0+h_slot1+edi]
cmp eax,2
jne originalcode143

mov eax,[esp+4+C]
  mov [eax+0],(float)-0.95
cmp [esp+4+8],4
je originalcode143
  mov [eax+0],(float)0.95

originalcode143:
     pop edi
call subrosadedicated.exe+3F760

exit143:
jmp returnhere143

"subrosadedicated.exe"+64711:
jmp newmem143
returnhere143:

//gun grip rotation

alloc(newmem160,2048)
label(returnhere160)
label(originalcode160)
label(exit160)

newmem160:

mov ecx,[esp+C]
imul ecx,hs
test [h0+h_controls+ecx],800
je originalcode160
mov eax,[h0+h_slot0+ecx]
add eax,[h0+h_slot1+ecx]
cmp eax,2
jne originalcode160

mov [edx+0],(float)0.25
mov [edx+4],(float)0.0
mov [edx+8],(float)-0.75

mov eax,[esp+14]
cmp [h0+h_slot0+4+ecx],eax
jne originalcode160

mov [edx+0],(float)-0.25
mov [edx+4],(float)0.0
mov [edx+8],(float)0.75

originalcode160:
call subrosadedicated.exe+11170

exit160:
jmp returnhere160

"subrosadedicated.exe"+3DB79:
jmp newmem160
returnhere160:


//freelook rotation

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

  pushfd
  push edx
  push ebp
  push esi
mov [ecx-C],(float)0.0
mov [ecx-8],(float)0.0
    imul esi,edi,hs
    mov edx,[h0+h_controls+esi]
  mov ebp,edx
  and ebp,10
  cmp ebp,0
  je freelook_shift_skip

fld [eax-14]
fadd [ecx-C]
fstp [ecx-C]

fld [eax-10]
fadd [ecx-8]
fstp [ecx-8]

label(freelook_shift_skip)
freelook_shift_skip:
  mov ebp,edx
  and ebp,#32
  cmp ebp,0
  jne freelook_abort

  mov ebp,edx
  and ebp,2
  cmp ebp,0
  je freelook_ret

      imul esi,edi,h2s
    fld [eax-C]
    fsub [h20+h2_shift_yaw_old+esi]
    fadd [eax-14]
    fstp [ecx-14]

    fld [eax-8]
    fsub [h20+h2_shift_pitch_old+esi]
    fadd [eax-10]
    fstp [ecx-10]

   label(freelook_ret)
   freelook_ret:
      imul esi,edi,h2s
        mov ebp,[eax-C]
        mov [h20+h2_shift_yaw_old+esi],ebp
        mov ebp,[eax-8]
        mov [h20+h2_shift_pitch_old+esi],ebp
  pop esi
  pop ebp
  pop edx
  popfd
jmp subrosadedicated.exe+EA40

label(freelook_abort)
freelook_abort:
  pop esi
  pop ebp
  pop edx
  popfd

originalcode2:
fld dword ptr [eax-0C]
fstp dword ptr [ecx-0C]

exit2:
jmp returnhere2

"subrosadedicated.exe"+EA34:
jmp newmem2
nop
returnhere2:

//zoom

alloc(newmem127,2048)
label(returnhere127)
label(originalcode127)
label(exit127)

newmem127:
  push eax
  push ebx
mov eax,[h0+h_p+edx]
cmp eax,-1
je zoom_ret
imul eax,ps
mov eax,[p0+p_h+eax]
cmp eax,-1
je zoom_ret
imul eax,h2s

mov ebx,[h0+h_zoom+edx]
mov [h20+h2_zoom_last+eax],ebx

//----------
    cmp [h0+h_grounded+edx],1
    jne zoom_ret

    mov [h20+h2_zoom_last+eax],0
//---------

label(zoom_ret)
zoom_ret:
  pop ebx
  pop eax
originalcode127:
mov [edx+subrosadedicated.exe+531318],ecx

exit127:
jmp returnhere127

"subrosadedicated.exe"+EB4D:
jmp newmem127
nop
returnhere127:


//hand action

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//ebp = h
newmem:

cmp ebx,1
je action_larm

test al,1
jne action_apply

jmp action_ret
label(action_larm)
action_larm:

cmp [h0+h_slot1+ebp],0
je action_ret
  push ebx
mov ebx,[h0+h_slot1+4+ebp]
imul ebx,is
cmp [i0+i_type+ebx],F
  pop ebx
je action_ret

test al,2
jne action_apply

jmp action_ret
label(action_apply)
action_apply:
jmp subrosadedicated.exe+6486D

label(action_ret)
action_ret:
jmp subrosadedicated.exe+64875

originalcode:
test al,01
je subrosadedicated.exe+64875
cmp ebx,ecx

exit:
jmp returnhere

"subrosadedicated.exe"+64856:
jmp newmem
nop
returnhere:


//mouselook torso

subrosadedicated.exe+62001:
test byte ptr [esi+subrosadedicated.exe+531478],10

//mouselook arms

subrosadedicated.exe+632EA:
test byte ptr [esi+subrosadedicated.exe+531478],10



[DISABLE]
dealloc(newmem178)
"subrosadedicated.exe"+7A913:
mov [subrosadedicated.exe+8ED1764],esi
//Alt: db 89 35 64 17 DF 09
dealloc(newmem160)
"subrosadedicated.exe"+3DB79:
call subrosadedicated.exe+11170
//Alt: db E8 F2 35 FD FF
dealloc(newmem143)
"subrosadedicated.exe"+64711:
call subrosadedicated.exe+3F760
//Alt: db E8 4A B0 FD FF
dealloc(newmem127)
"subrosadedicated.exe"+EB4D:
mov [edx+subrosadedicated.exe+531318],ecx
//Alt: db 89 8A 18 13 0D 01
dealloc(newmem112)
"subrosadedicated.exe"+66523:
call subrosadedicated.exe+3F760
//Alt: db E8 38 92 FD FF
dealloc(newmem98)
"subrosadedicated.exe"+6C3CF:
test byte ptr [esi+subrosadedicated.exe+531478],08
//Alt: db F6 86 78 14 D3 00 08
dealloc(newmem85)
"subrosadedicated.exe"+6C83B:
call subrosadedicated.exe+3F760
//Alt: db E8 20 2F FD FF
dealloc(newmem73)
"subrosadedicated.exe"+7A8F2:
mov [subrosadedicated.exe+8ED1764],esi
//Alt: db 89 35 64 17 6E 09
dealloc(newmem62)
"subrosadedicated.exe"+64102:
test ebx,ebx
jne subrosadedicated.exe+64112
fld dword ptr [subrosadedicated.exe+888E8]
//Alt: db 85 DB 75 0C D9 05 E8 88 89 00
dealloc(newmem41)
"subrosadedicated.exe"+3E43C:
test [edx+subrosadedicated.exe+531478],0800
//Alt: db F7 82 78 14 D4 00 00 08 00 00
dealloc(newmem32)
"subrosadedicated.exe"+64BD1:
test [ebp+subrosadedicated.exe+531478],eax
//Alt: db 85 85 78 14 8F 01
dealloc(newmem24)
"subrosadedicated.exe"+64D75:
test [ebp+subrosadedicated.exe+531478],0800
//Alt: db F7 85 78 14 8F 01 00 08 00 00
dealloc(newmem17)
"subrosadedicated.exe"+640D9:
jp subrosadedicated.exe+640EF
fld dword ptr [esi+subrosadedicated.exe+531354]
//Alt: db 7A 14 D9 86 54 13 8F 01
dealloc(newmem11)
"subrosadedicated.exe"+640BE:
test al,02
je subrosadedicated.exe+640CC
fld dword ptr [subrosadedicated.exe+887C0]
//Alt: db A8 02 74 0A D9 05 C0 87 44 01
dealloc(newmem6)
"subrosadedicated.exe"+640A7:
test eax,00000800
//Alt: db A9 00 08 00 00

dealloc(newmem2)
"subrosadedicated.exe"+EA34:
fld dword ptr [eax-0C]
fstp dword ptr [ecx-0C]
//Alt: db D9 40 F4 D9 59 F4
dealloc(newmem)
"subrosadedicated.exe"+64856:
test al,01
je subrosadedicated.exe+64875
cmp ebx,ecx
//Alt: db A8 01 74 1B 3B D9


subrosadedicated.exe+62001:
test byte ptr [esi+subrosadedicated.exe+531478],02

subrosadedicated.exe+632EA:
test byte ptr [esi+subrosadedicated.exe+531478],02


dealloc(mydata2)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>123</ID>
              <Description>"knockback_ak"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//which gun has knockback:
  //define(knockback_gun,2) //9mm, mp5, uzi
  //define(knockback_gun,3) //magnum
  //define(knockback_gun,1) //m16
  define(knockback_gun,0) //ak
  //define(knockback_gun,-1) //all

define(kickback_force,0.0125)
define(kickback_hp,1.0)

//----------------------------------------------------------------------


define(bt0,subrosadedicated.exe+1EC760)
define(b_type,0)
define(b_owner,8)
define(b_vel,2C)
define(bs,5C)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_controls,1B4)
define(h_yaw,12C)
define(h_shift_yaw,134)
define(h_bp0_pb,1C0)
define(h_bps,120)
define(h_grab0,3188)
define(h_grab1,31B4)
define(h_grab_h,4)
define(h_grab_bp,C)
define(h_grabs,2C)
define(h_drunkness,6C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)



[ENABLE]

//ApplyDamage(h, bp, 0, hp)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//esi = bullet*
newmem:
        pushad

mov eax,knockback_gun
cmp eax,-1
je shot_check_skip
cmp [bt0+b_type+esi],eax
jne shot_ret
label(shot_check_skip)
shot_check_skip:

   push (float)kickback_force

   mov edi,[esp+28]
   imul edi,hs

   mov ebx,[esp+28+4]
   imul ebx,h_bps
    mov edx,[h0+h_bp0_pb+ebx+edi]
    imul edx,pbs

  fld [bt0+b_vel+0+esi]
  fmul [esp]
  fadd [pb0+pb_vel+0+edx]
  fstp [pb0+pb_vel+0+edx]

  fld [bt0+b_vel+4+esi]
      fabs
  fmul [esp]
  fadd [pb0+pb_vel+4+edx]
  fstp [pb0+pb_vel+4+edx]

  fld [bt0+b_vel+8+esi]
  fmul [esp]
  fadd [pb0+pb_vel+8+edx]
  fstp [pb0+pb_vel+8+edx]

  add esp,4

  //hp
    fild [esp+24+C]
       push (float)kickback_hp
       fmul [esp]
       add esp,4
    fistp [esp+24+C]

label(shot_ret)
shot_ret:
        popad
originalcode:
push ebx
mov ebx,[esp+0C]

exit:
jmp returnhere

"subrosadedicated.exe"+8BF0:
jmp newmem
returnhere:





[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+8BF0:
push ebx
mov ebx,[esp+0C]
//Alt: db 53 8B 5C 24 0C


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>124</ID>
              <Description>"z + ctrl to play dead    v2"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_controls,1B4)
define(hs,3540)


[ENABLE]






alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[h0+h_controls+esi]
and eax,80008
cmp eax,80008
je subrosadedicated.exe+80EE2


originalcode:
cmp dword ptr [esi+subrosadedicated.exe+5312F8],00

exit:
jmp returnhere

"subrosadedicated.exe"+80ECC:
jmp newmem
nop
nop
returnhere:




alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

test [h0+h_controls+esi],8
jne subrosadedicated.exe+7EF9D


originalcode2:
fld dword ptr [subrosadedicated.exe+88C24]

exit2:
jmp returnhere2

"subrosadedicated.exe"+7EF93:
jmp newmem2
nop
returnhere2:




 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+7EF93:
fld dword ptr [subrosadedicated.exe+88C24]
//Alt: db D9 05 24 8C EB 00

dealloc(newmem)
"subrosadedicated.exe"+80ECC:
cmp dword ptr [esi+subrosadedicated.exe+5312F8],00
//Alt: db 83 BE F8 12 F8 00 00


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>128</ID>
              <Description>"discount cars s3"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(vt0,subrosadedicated.exe+AD2FF50)
define(vt_price,20)
define(vts,18548)

[ENABLE]

alloc(mycode,2048)
mycode:

mov ebx,0 //Town Car
imul ebx,vts
mov [vt0+vt_price+ebx],#750

mov ebx,4 //Turbo
imul ebx,vts
mov [vt0+vt_price+ebx],#1750

mov ebx,5 //Turbo S
imul ebx,vts
mov [vt0+vt_price+ebx],#1850

mov ebx,6 //Beamer
imul ebx,vts
mov [vt0+vt_price+ebx],#1500

mov ebx,7 //Van
imul ebx,vts
mov [vt0+vt_price+ebx],#1250

mov ebx,8 //Minivan
imul ebx,vts
mov [vt0+vt_price+ebx],#500

mov ebx,E //Hatchback
imul ebx,vts
mov [vt0+vt_price+ebx],#1000

mov ecx,#24
xor ebx,ebx
label(shop_loop)
shop_loop:

 mov [ebx+subrosadedicated.exe+204CDD44],0


add ebx,#16
loop shop_loop

ret
createThread(mycode)

[DISABLE]

dealloc(mycode)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>135</ID>
              <Description>"resetgame override (mode switch fix)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

subrosadedicated.exe+861DE:
db 90  90  90 90 90 90
 
[DISABLE]

subrosadedicated.exe+861DE:
mov [subrosadedicated.exe+8ED1548],ecx

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>127</ID>
              <Description>"nerf traffic"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(traffic_cars,#25)

[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov [esp+4],traffic_cars

originalcode:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00

exit:
jmp returnhere

"subrosadedicated.exe"+6FE70:
jmp newmem
nop
nop
nop
nop
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+6FE70:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00
//Alt: db 83 EC 0C 83 3D 2C 8B 52 13 00


</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>131</ID>
                  <Description>"no traffic"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>define(traffic_cars,#0)

[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov [esp+4],traffic_cars

originalcode:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00

exit:
jmp returnhere

"subrosadedicated.exe"+6FE70:
jmp newmem
nop
nop
nop
nop
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+6FE70:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00
//Alt: db 83 EC 0C 83 3D 2C 8B 52 13 00


</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"[dont use; not compat w/ melee] inv action animations"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_animating,3330)
define(hs,3540)

[ENABLE]



alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

cmp [h0+h_animating+esi],-1
je originalcode

   push eax
mov eax,[game_timer]
and eax,#31
   push eax
   push (float)9.2
fild [esp+4]
fmul [esp]
fld1
faddp
fchs
   add esp,8
   pop eax
jmp subrosadedicated.exe+640B4

originalcode:
test eax,00000800

exit:
jmp returnhere

"subrosadedicated.exe"+640A7:
jmp newmem
returnhere:


 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+640A7:
test eax,00000800
//Alt: db A9 00 08 00 00

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>151</ID>
              <Description>"reworked regeneration"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(limb_break_threshold,#16)
define(limb_bandage_restore,#10)

//-------------

define(h0,subrosadedicated.exe+5312C4)
define(h_controls,1B4)
define(h_health0,34)
define(h_health1,32A0)
define(h_health2,32A4)
define(h_bleeding,32A8)
define(h_health_la,32BC)
define(h_health_ra,32C4)
define(h_health_ll,32CC)
define(h_health_rl,32D4)
define(hs,3540)
define(humans_max,#255)

[ENABLE]




//------------- bandage bleeding check ---------

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:

cmp [edi+322C-h_bleeding+h_health_la],limb_break_threshold
  jle subrosadedicated.exe+6D2ED
cmp [edi+322C-h_bleeding+h_health_ra],limb_break_threshold
  jle subrosadedicated.exe+6D2ED
cmp [edi+322C-h_bleeding+h_health_ll],limb_break_threshold
  jle subrosadedicated.exe+6D2ED
cmp [edi+322C-h_bleeding+h_health_rl],limb_break_threshold
  jle subrosadedicated.exe+6D2ED

originalcode6:
cmp dword ptr [edi+0000322C],00
     //jne subrosadedicated.exe+6D2ED

exit6:
jmp returnhere6

"subrosadedicated.exe"+6D2DB:
jmp newmem6
nop 2
returnhere6:


//-------- bandage stop bleeding -------

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:

//-- left arm --

cmp [h0+h_health_la+eax],limb_break_threshold
jg stopbleed_skip_la

    add [h0+h_health_la+eax],limb_bandage_restore

label(stopbleed_skip_la)
stopbleed_skip_la:

//-- right arm --

cmp [h0+h_health_ra+eax],limb_break_threshold
jg stopbleed_skip_ra

    add [h0+h_health_ra+eax],limb_bandage_restore

label(stopbleed_skip_ra)
stopbleed_skip_ra:

//-- left leg --

cmp [h0+h_health_ll+eax],limb_break_threshold
jg stopbleed_skip_ll

    add [h0+h_health_ll+eax],limb_bandage_restore

label(stopbleed_skip_ll)
stopbleed_skip_ll:

//-- right leg --

cmp [h0+h_health_rl+eax],limb_break_threshold
jg stopbleed_skip_rl

    add [h0+h_health_rl+eax],limb_bandage_restore

label(stopbleed_skip_rl)
stopbleed_skip_rl:



originalcode11:
mov [eax+subrosadedicated.exe+53456C],ecx

exit11:
jmp returnhere11

"subrosadedicated.exe"+6D423:
jmp newmem11
nop
returnhere11:






//----------- left arm regen ------------

alloc(newmem24,2048)
label(returnhere24)
label(la_originalcode)
label(la_exit)

newmem24:

cmp ecx,limb_break_threshold
  jl la_exit

la_originalcode:
mov [eax+subrosadedicated.exe+534580],ecx

la_exit:
jmp returnhere24

"subrosadedicated.exe"+201D7:
jmp newmem24
nop
returnhere24:


//---------- right arm regen ---------

alloc(newmem17,2048)
label(returnhere17)
label(ra_originalcode)
label(ra_exit)

newmem17:

cmp ecx,limb_break_threshold
  jl ra_exit

ra_originalcode:
mov [eax+subrosadedicated.exe+534588],ecx

ra_exit:
jmp returnhere17

"subrosadedicated.exe"+201E9:
jmp newmem17
nop
returnhere17:



//---------- left leg regen ----------

alloc(newmem2,2048)
label(returnhere2)
label(ll_originalcode)
label(ll_exit)

newmem2:

cmp ecx,limb_break_threshold
  jl ll_exit

ll_originalcode:
mov [eax+subrosadedicated.exe+534590],ecx

ll_exit:
jmp returnhere2

"subrosadedicated.exe"+201FB:
jmp newmem2
nop
returnhere2:




//---------- right leg regen ---------------

alloc(newmem,2048)
label(returnhere)
label(rl_originalcode)
label(rl_exit)

newmem:

cmp ecx,limb_break_threshold
  jl rl_exit

rl_originalcode:
mov [eax+subrosadedicated.exe+534598],ecx

rl_exit:
jmp returnhere

"subrosadedicated.exe"+2020D:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem24)
"subrosadedicated.exe"+201D7:
mov [eax+subrosadedicated.exe+534580],ecx
//Alt: db 89 88 80 45 64 00
dealloc(newmem17)
"subrosadedicated.exe"+201E9:
mov [eax+subrosadedicated.exe+534588],ecx
//Alt: db 89 88 88 45 64 00
dealloc(newmem11)
"subrosadedicated.exe"+6D423:
mov [eax+subrosadedicated.exe+53456C],ecx
//Alt: db 89 88 6C 45 64 00
dealloc(newmem6)
"subrosadedicated.exe"+6D2DB:
cmp dword ptr [edi+0000322C],00
//Alt: db 83 BF 2C 32 00 00 00
dealloc(newmem2)
"subrosadedicated.exe"+201FB:
mov [eax+subrosadedicated.exe+534590],ecx
//Alt: db 89 88 90 45 64 00
dealloc(newmem)
"subrosadedicated.exe"+2020D:
mov [eax+subrosadedicated.exe+534598],ecx
//Alt: db 89 88 98 45 64 00

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"---- misc ----"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>139</ID>
              <Description>"week day"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+8ED175C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"uzi mag size"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+192D1560+D88*a+1C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>143</ID>
              <Description>"9mm mag size"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+192D1560+D88*c+1C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>144</ID>
              <Description>"time of the day"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+33E58A20</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"---scripts"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"any means heli"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(corp0,subrosadedicated.exe+8ED17F4)
define(corp_enabled,54)
define(corp_spawnpos,18)
define(corp_m_type,A0)
define(corp_m_provided,DC)
define(corps,15e4)

define(vehicle_spawn_func,subrosadedicated.exe+48860)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

[ENABLE]



alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
jng subrosadedicated.exe+4AB41

cmp [game_state],1
je subrosadedicated.exe+4AB41

originalcode2:
//jng subrosadedicated.exe+4AB41

exit2:
jmp returnhere2

"subrosadedicated.exe"+49F42:
jmp newmem2
nop
returnhere2:





alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [game_timer],#5100
jne originalcode
            pushad

xor ecx,ecx
xor ebx,ebx
label(corps_loop)
corps_loop:
          push ecx
          push ebx
cmp [corp0+corp_enabled+ebx],0
je corps_loop_next

mov edx,[corp0+corp_m_type+ebx]
    cmp edx,1 //limo
      je corps_loop_next
    cmp edx,2 //sell
      je corps_loop_next
    cmp edx,7 //sell double
      je corps_loop_next
    cmp [corp0+corp_m_provided+ebx],0 //provided
      jg corps_loop_next

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

{push (float)1050.0
push (float)25.0
push (float)1065.0}
push [corp0+corp_spawnpos+8+ebx]
push [corp0+corp_spawnpos+4+ebx]
push [corp0+corp_spawnpos+0+ebx]
mov edi,esp //pos
           push (float)12.0
           fld [esp]
           fadd [edi+4]
           fstp [edi+4]
           add esp,4

            pushad
        call msvcrt.rand
        and eax,7
        mov [esp+18],eax
            popad
push ecx
push esi
push 0
push edi
push B
call vehicle_spawn_func
               //(type, *float[3] position, [*float[3] velocity], *float[9] orientation, color)
add esp,14+30

label(corps_loop_next)
corps_loop_next:
    pop ebx
    add ebx,corps
    pop ecx
inc ecx
cmp ecx,3
jle corps_loop



            popad
originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

exit:
jmp returnhere

"subrosadedicated.exe"+84A50:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+49F42:
jng subrosadedicated.exe+4AB41
//Alt: db 0F 8E F9 0B 00 00
dealloc(newmem)
"subrosadedicated.exe"+84A50:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 2C 09



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"nerf traffic"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(traffic_cars,#50)

[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov [esp+4],traffic_cars

originalcode:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00

exit:
jmp returnhere

"subrosadedicated.exe"+6FE70:
jmp newmem
nop
nop
nop
nop
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+6FE70:
sub esp,0C
cmp dword ptr [subrosadedicated.exe+13138B2C],00
//Alt: db 83 EC 0C 83 3D 2C 8B 52 13 00


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"motd"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)
define(game_timer2,subrosadedicated.exe+8ED176C+4)
define(game_counter,subrosadedicated.exe+8ED175C)

define(message_func,subrosadedicated.exe+7450)

[ENABLE]



alloc(tmpbuffer,4096)
alloc(mydata,4096)
mydata:
label(s_newline)
s_newline:
db D A 0
//db A 0
label(s_r)
s_r:
db 'r' 0
label(s_motd_path)
s_motd_path:
db 'm' 'o' 't' 'd' '.' 't' 'x' 't' 0

define(motd_last_shown_round,mydata+50)
define(const_2,mydata+54)
define(const_5,mydata+58)
define(motd_len,mydata+100)
define(motd_msg,mydata+104)

alloc(mycode,4096)
mycode:
  mov [motd_last_shown_round],-1
  mov [const_2],2
  mov [const_5],5
ret
createThread(mycode)

{
alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:

push const_5

originalcode11:
//push subrosadedicated.exe+8ED1548

exit11:
jmp returnhere11

"subrosadedicated.exe"+70117:
jmp newmem11
returnhere11:
}




alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
          pushad
mov eax,[game_counter]
cmp [motd_last_shown_round],eax
je motd_skip
mov [motd_last_shown_round],eax


push s_r
push s_motd_path
call msvcrt.fopen
add esp,8
  cmp eax,0
  je motd_skip

push eax
push #3000
push 1
push motd_msg
call msvcrt.fread
add esp,C
  mov [motd_len],eax

call msvcrt.fclose
pop eax



push s_newline
push motd_msg
call msvcrt.strtok
add esp,8
  cmp eax,0
  je motd_skip

label(lines_loop)
lines_loop:

   push 0
   push -1
   push eax
   push 0
   call message_func
   add esp,10

push s_newline
push 0
call msvcrt.strtok
add esp,8
     mov ebx,[motd_len]
     lea ebx,[motd_skip+eax]
     cmp eax,ebx
     jge motd_skip
  cmp eax,0
  jne lines_loop




label(motd_skip)
motd_skip:
          popad
originalcode:
add eax,0000E070

exit:
jmp returnhere

"subrosadedicated.exe"+86196:
jmp newmem
returnhere:




 
 
[DISABLE]
dealloc(newmem11)
"subrosadedicated.exe"+70117:
push subrosadedicated.exe+8ED1548
//Alt: db 68 48 15 B6 09

dealloc(newmem)
"subrosadedicated.exe"+86196:
add eax,0000E070
//Alt: db 05 70 E0 00 00

dealloc(mydata)
dealloc(mycode)
dealloc(tmpbuffer)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"!! grabbing fix"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+3E07E:
xor edi,edi
nop


alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

cmp edi,edx
je subrosadedicated.exe+3E5B2

originalcode2:
cmp dword ptr [esi-000001CC],00

exit2:
jmp returnhere2

"subrosadedicated.exe"+3E0B8:
jmp newmem2
nop
nop
returnhere2:


[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+3E0B8:
cmp dword ptr [esi-000001CC],00
//Alt: db 83 BE 34 FE FF FF 00

subrosadedicated.exe+3E07E:
lea edi,[edx+01]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"open doors"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+64D56:
jmp subrosadedicated.exe+64D71
 
[DISABLE]

subrosadedicated.exe+64D56:
jne subrosadedicated.exe+64D71

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"inv action animations"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_animating,3330)
define(hs,3540)

[ENABLE]



alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

cmp [h0+h_animating+esi],-1
je originalcode

   push eax
mov eax,[game_timer]
and eax,#31
   push eax
   push (float)9.2
fild [esp+4]
fmul [esp]
fld1
faddp
fchs
   add esp,8
   pop eax
jmp subrosadedicated.exe+640B4

originalcode:
test eax,00000800

exit:
jmp returnhere

"subrosadedicated.exe"+640A7:
jmp newmem
returnhere:


 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+640A7:
test eax,00000800
//Alt: db A9 00 08 00 00

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>77</ID>
          <Description>"exploding cars v3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(explosion_force,1.5)

define(v0,subrosadedicated.exe+80F66E0)
define(v_engine,8)
define(v_hp,C)
define(v_key,20)
define(v_body,24)
define(v_engine_pos,B0)
define(v_axis_h,364C)
define(v_axis_v,3654)
define(vs,50DC)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_despawn,18)
define(is,214)

define(item_spawn_func,subrosadedicated.exe+44880)
define(explode_item_func,subrosadedicated.exe+21DB0)
define(spawn_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

[ENABLE]


//-------- car hp &lt; 0 check -----------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

cmp dword ptr [esi+subrosadedicated.exe+80F66EC],#75
jg exit

cmp dword ptr [esi+subrosadedicated.exe+80F66EC],0
jg sparkles

//cmp [v0+v_engine+esi],0
cmp [v0+v_hp+esi],#-101
je exit

   pushad
//mov [v0+v_engine+esi],0
mov [v0+v_hp+esi],#-101
mov [v0+v_axis_h+esi],(float)0.0
mov [v0+v_axis_v+esi],(float)0.0

mov ecx,[v0+v_body+esi]
imul ecx,pbs
push (float)explosion_force
push [pb0+pb_torque+8+ecx]
push [pb0+pb_torque+4+ecx]
push [pb0+pb_torque+0+ecx]
    pushad
  call frand5
   fmul [esp+2C]
   fadd [esp+20]
   fstp [esp+20]
  call frand5
   fmul [esp+2C]
   fadd [esp+24]
   fstp [esp+24]
  call frand5
   fmul [esp+2C]
   fadd [esp+28]
   fstp [esp+28]
    popad
pop [pb0+pb_torque+0+ecx]
pop [pb0+pb_torque+4+ecx]
pop [pb0+pb_torque+8+ecx]
add esp,4



lea eax,[v0+v_engine_pos+esi]
push eax
push 0
call spawn_particles_func
add esp,4
pop eax

push (float)0.0
push (float)1.0
push (float)0.0
  push (float)0.0
  push (float)0.0
  push (float)1.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp //orientation

push esi
push 0 //velocity
push eax //position
push D //grenade
call item_spawn_func
add esp,10+24

push eax
call explode_item_func
pop eax

imul eax,is
mov [i0+i_despawn+eax],0

   popad
jmp exit




label(sparkles)
sparkles:
     pushad
mov ebx,[game_timer]
and ebx,#127
cmp ebx,0
jne sparkles_ret

sub [v0+v_hp+esi],4

{
lea eax,[v0+v_engine_pos+esi]
push eax
push 0
call spawn_particles_func
add esp,4
pop eax
}

  push (float)0.0
  push (float)-2.0
  push (float)0.0
  lea eax,[esp]
  push eax
 lea eax,[v0+v_engine_pos+esi]
 push eax
push 2
push 0
call splash_particles_func
add esp,10+C

label(sparkles_ret)
sparkles_ret:
     popad
originalcode:
//cmp dword ptr [esi+subrosadedicated.exe+80F66EC],00

exit:
jmp returnhere

"subrosadedicated.exe"+31196:
jmp newmem
nop
nop
returnhere:




alloc(mycode,2048)
mycode:

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
push 7FFF //randmax
fidiv dword [esp]
add esp,8
ret

label(frand5)
frand5:
call frand1
push (float)0.5
fsub [esp]
pop eax
ret

[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+31196:
cmp dword ptr [esi+subrosadedicated.exe+80F66EC],00
//Alt: db 83 BE EC 66 09 09 00

dealloc(mycode)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>75</ID>
          <Description>"car hp"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+488F5:
mov [esi+subrosadedicated.exe+80F66EC],#200

 
[DISABLE]

subrosadedicated.exe+488F5:
mov [esi+subrosadedicated.exe+80F66EC],#100
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>78</ID>
          <Description>"print_happy32.srpc"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(scale,0.04)
define(scale,0.1)
//define(scale,0.15)
{define(pos_x,1285.9)
define(pos_y,115.8)
define(pos_z,1572.1)}
{define(pos_x,1126.9)
define(pos_y,25.8)
define(pos_z,1717.1)}
define(pos_x,1165.0)
define(pos_y,34.4)
define(pos_z,1217.5)
define(swap_xz,0)
{define(pos_x,1161.4)
define(pos_y,47.6)
define(pos_z,1464.2)
define(swap_xz,0)}

define(explosion_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

[ENABLE]







alloc(strings,2048)
strings:
{label(s_filepath)
s_filepath:
db 's' 'p' 'h' 'e' 'r' 'e' '.' 's' 'r' 'p' 'c' 0
//db 'h' 'a' 'p' 'p' 'y' 31 '.' 's' 'r' 'p' 'c' 0
}
label(s_rp)
s_rp:
db 'r' '+' 0

alloc(mydata0,0)
mydata0:
//alloc(mydata,163840)
alloc(mydata,65536)
//loadbinary(mydata,sphere.srpc)
//loadbinary(mydata,happy3.srpc)
loadbinary(mydata,happy32.srpc)

mydata:
define(model_loaded,mydata+0)
define(current_vertex,mydata+4)
define(total_vertices,mydata+8)
define(model_data,mydata+C)

alloc(mycode,4096)
mycode:

label(pcprint_func)
pcprint_func:

cmp [model_loaded],1
je pcprint_print
//---------------- loading
{
push s_rp
push s_filepath
call msvcrt.fopen //fopen(filepath, "r+")
add esp,8
push eax

push 4
push 1
lea eax,[total_vertices]
push eax
call msvcrt.fread
add esp,C

pop eax
xor ebx,ebx
mov ecx,[total_vertices]
label(vertex_loading_loop)
vertex_loading_loop:
 dec ecx
   push ecx
   push ebx
   push eax

push #24
push 1
lea edx,[model_data+ebx]
push edx
call msvcrt.fread
add esp,C

   pop eax
   pop ebx
   add ebx,#24
   pop ecx
cmp ecx,0
jge vertex_loading_loop
push eax

call msvcrt.fclose
add esp,4
}
mov [model_loaded],1
jmp pcprint_ret
label(pcprint_print)
pcprint_print:
//----------------- printing

mov edx,[total_vertices]
cmp [current_vertex],edx
jge pcprint_ret

push (float)scale
push (float)pos_z
push (float)pos_y
push (float)pos_x
mov ebp,esp

mov ecx,[current_vertex]
imul ecx,#24

  push [model_data+8+ecx]
  push [model_data+4+ecx]
  push [model_data+0+ecx]
     fld [ebp+C]
     fmul [esp+0]
       //fchs
     fadd [ebp+0]
     fstp [esp+0]
       fld [ebp+C]
       fmul [esp+4]
       fadd [ebp+4]
       fstp [esp+4]
     fld [ebp+C]
     fmul [esp+8]
        //fchs
     fadd [ebp+8]
     fstp [esp+8]
  mov esi,esp

  push [model_data+14+ecx]
  push [model_data+10+ecx]
  push [model_data+C+ecx]
  mov edi,esp

push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C

{
push (float)1572.1
push (float)116.8
push (float)1278.0
mov esi,esp
   push (float)3.0
   push (float)5.0
   push (float)-2.0
   mov edi,esp
push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C
}


inc [current_vertex]
add esp,10
label(pcprint_ret)
pcprint_ret:
ret



//--- state 2 timer ---

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
        pushad
call pcprint_func
   call pcprint_func
        popad
originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

exit:
jmp returnhere

"subrosadedicated.exe"+85011:
jmp newmem
nop
returnhere:

//--- state 1 timer ---

alloc(newmem5,2048)
label(returnhere5)
label(originalcode5)
label(exit5)

newmem5:
        pushad
call pcprint_func
        popad
originalcode5:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74

exit5:
jmp returnhere5

"subrosadedicated.exe"+84A56:
jmp newmem5
nop
returnhere5:

//--- round reset ---

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov [current_vertex],0

originalcode2:
mov [subrosadedicated.exe+8ED1774],eax

exit2:
jmp returnhere2

"subrosadedicated.exe"+7A8F8:
jmp newmem2
returnhere2:


[DISABLE]
dealloc(newmem5)
"subrosadedicated.exe"+84A56:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74
//Alt: db 39 7C 24 20 75 18
dealloc(newmem2)
"subrosadedicated.exe"+7A8F8:
mov [subrosadedicated.exe+8ED1774],eax
//Alt: db A3 74 17 1B 09
dealloc(newmem)
"subrosadedicated.exe"+85011:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 1B 09

dealloc(mycode)
dealloc(mydata)
dealloc(strings)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>80</ID>
          <Description>"print_elephant.srpc"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(scale,0.04)
define(scale,0.075)
//define(scale,0.15)
{define(pos_x,1285.9)
define(pos_y,115.8)
define(pos_z,1572.1)}
{define(pos_x,1126.9)
define(pos_y,25.8)
define(pos_z,1717.1)}
define(pos_x,1290.0)
define(pos_y,39.9)
define(pos_z,1637.3)
define(swap_xz,0)

define(explosion_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

[ENABLE]







alloc(strings,2048)
strings:
{label(s_filepath)
s_filepath:
db 's' 'p' 'h' 'e' 'r' 'e' '.' 's' 'r' 'p' 'c' 0
//db 'h' 'a' 'p' 'p' 'y' 31 '.' 's' 'r' 'p' 'c' 0
}
label(s_rp)
s_rp:
db 'r' '+' 0

alloc(mydata0,0)
mydata0:
//alloc(mydata,163840)
alloc(mydata,65536)
loadbinary(mydata,elephant.srpc)

mydata:
define(model_loaded,mydata+0)
define(current_vertex,mydata+4)
define(total_vertices,mydata+8)
define(model_data,mydata+C)

alloc(mycode,4096)
mycode:

label(pcprint_func)
pcprint_func:

cmp [model_loaded],1
je pcprint_print
//---------------- loading
{
push s_rp
push s_filepath
call msvcrt.fopen //fopen(filepath, "r+")
add esp,8
push eax

push 4
push 1
lea eax,[total_vertices]
push eax
call msvcrt.fread
add esp,C

pop eax
xor ebx,ebx
mov ecx,[total_vertices]
label(vertex_loading_loop)
vertex_loading_loop:
 dec ecx
   push ecx
   push ebx
   push eax

push #24
push 1
lea edx,[model_data+ebx]
push edx
call msvcrt.fread
add esp,C

   pop eax
   pop ebx
   add ebx,#24
   pop ecx
cmp ecx,0
jge vertex_loading_loop
push eax

call msvcrt.fclose
add esp,4
}
mov [model_loaded],1
jmp pcprint_ret
label(pcprint_print)
pcprint_print:
//----------------- printing

mov edx,[total_vertices]
cmp [current_vertex],edx
jge pcprint_ret

push (float)scale
push (float)pos_z
push (float)pos_y
push (float)pos_x
mov ebp,esp

mov ecx,[current_vertex]
imul ecx,#24

  push [model_data+8+ecx]
  push [model_data+4+ecx]
  push [model_data+0+ecx]
     fld [ebp+C]
     fmul [esp+0]
       fchs
     fadd [ebp+0]
     fstp [esp+0]
       fld [ebp+C]
       fmul [esp+4]
       fadd [ebp+4]
       fstp [esp+4]
     fld [ebp+C]
     fmul [esp+8]
        //fchs
     fadd [ebp+8]
     fstp [esp+8]
  mov esi,esp

  push [model_data+14+ecx]
  push [model_data+10+ecx]
  push [model_data+C+ecx]
  mov edi,esp

push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C

{
push (float)1572.1
push (float)116.8
push (float)1278.0
mov esi,esp
   push (float)3.0
   push (float)5.0
   push (float)-2.0
   mov edi,esp
push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C
}


inc [current_vertex]
add esp,10
label(pcprint_ret)
pcprint_ret:
ret



//--- state 2 timer ---

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
        pushad
call pcprint_func
   call pcprint_func
        popad
originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

exit:
jmp returnhere

"subrosadedicated.exe"+85011:
jmp newmem
nop
returnhere:

//--- state 1 timer ---

alloc(newmem5,2048)
label(returnhere5)
label(originalcode5)
label(exit5)

newmem5:
        pushad
call pcprint_func
        popad
originalcode5:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74

exit5:
jmp returnhere5

"subrosadedicated.exe"+84A56:
jmp newmem5
nop
returnhere5:

//--- round reset ---

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov [current_vertex],0

originalcode2:
mov [subrosadedicated.exe+8ED1774],eax

exit2:
jmp returnhere2

"subrosadedicated.exe"+7A8F8:
jmp newmem2
returnhere2:


[DISABLE]
dealloc(newmem5)
"subrosadedicated.exe"+84A56:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74
//Alt: db 39 7C 24 20 75 18
dealloc(newmem2)
"subrosadedicated.exe"+7A8F8:
mov [subrosadedicated.exe+8ED1774],eax
//Alt: db A3 74 17 1B 09
dealloc(newmem)
"subrosadedicated.exe"+85011:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 1B 09

dealloc(mycode)
dealloc(mydata)
dealloc(strings)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"non-lethal explosions"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(explosion_force,0.1325)
define(explosion_radius,15.0) //default: 8.0
define(explosion_death_radius,6.5) //default: 4.0
define(explosion_damage,#50)
define(explosion_damage_limbs,#45)

//-----------------------------------------------

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_seat,2C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

[ENABLE]



//---------- explosion death radius ----------

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:
push (float)explosion_death_radius
fld [esp]
add esp,4

originalcode11:
//fld dword ptr [subrosadedicated.exe+887DC]

exit11:
jmp returnhere11

"subrosadedicated.exe"+21E19:
jmp newmem11
nop
returnhere11:







//----------- explosion radius ------------

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:
push (float)explosion_radius
fcomp [esp]
add esp,4

originalcode6:
//fcomp dword ptr [subrosadedicated.exe+888D4]

exit6:
jmp returnhere6

"subrosadedicated.exe"+21E38:
jmp newmem6
nop
returnhere6:


//------ explosion force ---------------------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
     pushfd
push (float)explosion_force
fmul [esp]
add esp,4
     popfd
originalcode2:
//fmul qword ptr [subrosadedicated.exe+884C0]

exit2:
jmp returnhere2

"subrosadedicated.exe"+21F47:
jmp newmem2
nop
returnhere2:


//--------- explosion death -------------------------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
       pushad
sub edi,198+3C

mov [h_car+edi],-1

mov ecx,8
mov ebx,edi
label(hp_damage)
hp_damage:
  sub [h_health2+ebx],explosion_damage
add ebx,8
loop hp_damage
sub [h_health2+20+edi],explosion_damage_limbs
sub [h_health2+28+edi],explosion_damage_limbs
sub [h_health2+30+edi],explosion_damage_limbs
sub [h_health2+38+edi],explosion_damage_limbs

       popad
originalcode:
//mov [edi-00000198],00000000

exit:
jmp returnhere

"subrosadedicated.exe"+21E2E:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem11)
"subrosadedicated.exe"+21E19:
fld dword ptr [subrosadedicated.exe+887DC]
//Alt: db D9 05 DC 87 D9 00
dealloc(newmem6)
"subrosadedicated.exe"+21E38:
fcomp dword ptr [subrosadedicated.exe+888D4]
//Alt: db D8 1D D4 88 08 01
dealloc(newmem2)
"subrosadedicated.exe"+21F47:
fmul qword ptr [subrosadedicated.exe+884C0]
//Alt: db DC 0D C0 84 08 01
dealloc(newmem)
"subrosadedicated.exe"+21E2E:
mov [edi-00000198],00000000
//Alt: db C7 87 68 FE FF FF 00 00 00 00


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>82</ID>
          <Description>"fine steering"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_controls,1B4)
define(hs,3540)

[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [h0+h_car+eax],-1
je originalcode
mov ecx,[h0+h_controls+eax]
//and ecx,80000 //z
and ecx,8 //ctrl
cmp ecx,0
je originalcode
    push (float)0.2
    fmul [esp]
    add esp,4
originalcode:
fstp dword ptr [eax+subrosadedicated.exe+5313E4]

exit:
jmp returnhere

"subrosadedicated.exe"+EAF3:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+EAF3:
fstp dword ptr [eax+subrosadedicated.exe+5313E4]
//Alt: db D9 98 E4 13 53 01



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>83</ID>
          <Description>"goods on the back"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)


[ENABLE]


alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov edi,ecx
mov ecx,[ecx+subrosadedicated.exe+8F011C8]

cmp ecx,2 //check if in hand
jl exit

mov edi,[i0+i_type+edi] //check if disk/cash
  cmp edi,12
  jl exit
  cmp edi,18
  jg exit

mov ecx,2 //slot 1

originalcode:
//mov ecx,[ecx+subrosadedicated.exe+8F011C8]

exit:
jmp returnhere

"subrosadedicated.exe"+75E1:
jmp newmem
nop
returnhere:



 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+75E1:
mov ecx,[ecx+subrosadedicated.exe+8F011C8]
//Alt: db 8B 89 C8 11 F0 09



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>85</ID>
          <Description>"non-lethal runover"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(min_threshold,0.1) //default: 0.20
define(death_threshold,0.4) //default: 0.20
define(damage_ratio,96.0)

//---------

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)

define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_seat,2C)
define(h_drunkness,6C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

[ENABLE]


//-------- runover threshold -------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push (float)min_threshold
fcomp [esp]
add esp,4

originalcode2:
//fcomp qword ptr [subrosadedicated.exe+88470]

exit2:
jmp returnhere2

"subrosadedicated.exe"+7F6EC:
jmp newmem2
nop
returnhere2:



//-------- runover death -------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

fld [esp+18]
push (float)death_threshold
fcomp [esp]
add esp,4
fnstsw ax
test ah,41
  fstp st(0)
je originalcode

    pushad
push (float)damage_ratio
fld [esp+3C]
fabs
fchs
fmul [esp]
add esp,4

cmp ebx,0
  je punch2_dmg_crotch
cmp ebx,1
  je punch2_dmg_torso
cmp ebx,2
  je punch2_dmg_torso
cmp ebx,3
  je punch2_dmg_head
cmp ebx,4
  je punch2_dmg_larm
cmp ebx,5
  je punch2_dmg_larm
cmp ebx,6
  je punch2_dmg_larm
cmp ebx,7
  je punch2_dmg_rarm
cmp ebx,8
  je punch2_dmg_rarm
cmp ebx,9
  je punch2_dmg_rarm
cmp ebx,#10
  je punch2_dmg_lleg
cmp ebx,#11
  je punch2_dmg_lleg
cmp ebx,#12
  je punch2_dmg_lleg
cmp ebx,#13
  je punch2_dmg_rleg
cmp ebx,#14
  je punch2_dmg_rleg
cmp ebx,#15
  je punch2_dmg_rleg

label(punch2_dmg_crotch)
punch2_dmg_crotch:
{
        fld [pb0+pb_vel+0+edi]
        fadd [h0+h_walk_dir+0+ecx]
        fld [pb0+pb_vel+4+edi]
        fabs
        fadd [h0+h_walk_dir+4+ecx]
        fld [pb0+pb_vel+8+edi]
        fadd [h0+h_walk_dir+8+ecx]
    cmp [h0+h_drunkness+ecx],#80
    jg grab2_affect
  add [h0+h_drunkness+ecx],screen_blackening
}
    fstp st(0)
jmp runover_ret

label(punch2_dmg_torso)
punch2_dmg_torso:
                 push eax
                  fist [esp]
                  cmp [esp],-8
                 pop eax
  fiadd [h0+h_health2+8+esi]
  fistp [h0+h_health2+8+esi]
                 jg runover_ret
                //mov [h0+h_bleeding+esi],1
jmp runover_ret

label(punch2_dmg_head)
punch2_dmg_head:
  fld st(0)
  fiadd [h0+h_health2+10+esi]
  fistp [h0+h_health2+10+esi]
    //cmp [h0+h_drunkness+esi],#80
    //jg grab2_affect
  //add [h0+h_drunkness+ecx],screen_blackening
  fchs
   fadd st(0)
   fadd st(0)
  fiadd [h0+h_drunkness+esi]
  fistp [h0+h_drunkness+esi]
jmp runover_ret

label(punch2_dmg_larm)
punch2_dmg_larm:
  fiadd [h0+h_health2+18+esi]
  fistp [h0+h_health2+18+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_rarm)
punch2_dmg_rarm:
  fiadd [h0+h_health2+20+esi]
  fistp [h0+h_health2+20+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_lleg)
punch2_dmg_lleg:
  fiadd [h0+h_health2+28+esi]
  fistp [h0+h_health2+28+esi]
  //fstp st(0)
jmp runover_ret

label(punch2_dmg_rleg)
punch2_dmg_rleg:
  fiadd [h0+h_health2+30+esi]
  fistp [h0+h_health2+30+esi]
  //fstp st(0)
jmp runover_ret

label(runover_ret)
runover_ret:
    popad
jmp exit
originalcode:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78

exit:
jmp returnhere

"subrosadedicated.exe"+7F6F9:
jmp newmem
nop
nop
returnhere:



 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+7F6EC:
fcomp qword ptr [subrosadedicated.exe+88470]
//Alt: db DC 1D 70 84 D9 00
dealloc(newmem)
"subrosadedicated.exe"+7F6F9:
add dword ptr [esi+subrosadedicated.exe+5312F8],-78
//Alt: db 83 86 F8 12 24 01 88


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>104</ID>
          <Description>"punching 8/9"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(punch_knockback,3.5)
define(punch_knockback_eliminator,10.0)
define(punch_damage,135.0)
define(punch_damage_eliminator,300.0)
define(punch_threshold,3.0)

define(punch_extension,1.25)
define(punch_extension_both,1.1)
define(punch_height,1.775)
define(punch_yaw_both,1.1)

define(kick_knockback,0.35)
define(kick_knockback_eliminator,0.775)
define(kick_hp_damage,#2)
//define(kick_collision_radius,0.13)
define(kick_collision_radius,0.1425)
define(kick_threshold,1.0)
define(kick_body_stabilize,0.7)

define(punch_cooldown,#70)
define(kick_cooldown,#70)

//--------------------------------

define(p0,subrosadedicated.exe+13841600)
define(p_h,88)
define(ps,381C)
define(players_max,#255)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_controls,1B4)
define(h_elim,38)
define(h_zoom,54)
define(h_grounded,70)
define(h_yaw_global,8C)
define(h_yaw,12C)
define(h_shift_yaw,134)
define(h_bp0_pb,1C0)
define(h_bp0_pos,1C4)
define(h_bps,120)
define(h_grab0,3188)
define(h_grab1,31B4)
define(h_grab_h,4)
define(h_grab_bp,C)
define(h_grabs,2C)
define(h_drunkness,6C)
define(h_health0,34)
define(h_health1,32A0)
define(h_health2,32A4)
define(h_slot0,3038)
define(h_slot1,3060)
define(h_slot2,3088)
define(hs,3540)
define(humans_max,#255)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)

define(i0,subrosadedicated.exe+8F011A0)
define(i_type,10)
define(i_despawn,18)
define(is,214)

define(spawn_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)
define(game_timer2,subrosadedicated.exe+8ED176C+4)


define(ray_distance_func,subrosadedicated.exe+210C0)
//sub_4210C0(vector3 *out_a1, vector3 *out_a2, float *out_a3, vector3 *a4, vector3 *a5, vector3 *a6, vector3 *a7, float a8)

define(grab_item_func,subrosadedicated.exe+22C40)

[ENABLE]











//--------------------------


alloc(mydata2,16384)

define(h20,mydata2+200)
define(h2_zoom_last,C)
define(h2_kick_cooldown,10)
define(h2_punch_cooldown,18)
define(h2_shift_yaw_old,20)
define(h2_shift_pitch_old,24)
define(h2s,30)


//round reset (versus and elim)

alloc(newmem178,2048)
label(returnhere178)
label(originalcode178)
label(exit178)

newmem178:
       pushad

mov ecx,players_max
xor ebx,ebx
label(reset2_h2_loop)
reset2_h2_loop:
  mov [h20+h2_zoom_last+ebx],0
  mov [h20+h2_kick_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+4+ebx],0

add ebx,h2s
loop reset2_h2_loop
       popad
originalcode178:
mov [subrosadedicated.exe+8ED1764],esi

exit178:
jmp returnhere178

"subrosadedicated.exe"+7A913:
jmp newmem178
nop
returnhere178:

//round reset (round)

alloc(newmem73,4096)
label(returnhere73)
label(originalcode73)
label(exit73)

newmem73:
       pushad

mov ecx,players_max
xor ebx,ebx
label(reset_h2_loop)
reset_h2_loop:
  mov [h20+h2_zoom_last+ebx],0
  mov [h20+h2_kick_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+ebx],0
  mov [h20+h2_punch_cooldown+4+ebx],0

add ebx,h2s
loop reset_h2_loop

       popad
originalcode73:
mov [subrosadedicated.exe+8ED1764],esi

exit73:
jmp returnhere73

"subrosadedicated.exe"+7A8F2:
jmp newmem73
nop
returnhere73:

//leg motor

alloc(newmem85,2048)
label(returnhere85)
label(originalcode85)
label(exit85)

newmem85:

mov ecx,[esp]
imul edx,ecx,h2s
imul ecx,hs
  mov eax,[h20+h2_kick_cooldown+edx]
  mov [h20+h2_kick_cooldown+edx],0
test [h0+h_grounded+ecx],1
jne originalcode85
  mov [h20+h2_kick_cooldown+edx],eax
test [h0+h_zoom+ecx],2
je originalcode85
cmp [h0+h_health0+ecx],0
jle originalcode85

  //mov [esp+18],(float)0.95
//call subrosadedicated.exe+3F760
    pushad


cmp [game_state],1
je kick_dmg_skip
//-- threshold ---
  //left leg magnitude
  mov ebp,C
  imul ebp,h_bps
  mov ebp,[h0+h_bp0_pb+ecx+ebp]
  imul ebp,pbs
     fld [pb0+pb_vel+0+ebp]
     fmul st(0)
     fld [pb0+pb_vel+4+ebp]
     fmul st(0)
     fld [pb0+pb_vel+8+ebp]
     fmul st(0)
    faddp
    faddp
    fsqrt
  //right leg magnitude
  mov ebp,F
  imul ebp,h_bps
  mov ebp,[h0+h_bp0_pb+ecx+ebp]
  imul ebp,pbs
     fld [pb0+pb_vel+0+ebp]
     fmul st(0)
     fld [pb0+pb_vel+4+ebp]
     fmul st(0)
     fld [pb0+pb_vel+8+ebp]
     fmul st(0)
    faddp
    faddp
    fsqrt
  faddp

  push (float)kick_threshold
  fld [esp]
  add esp,4
  fcomip st(1)
  fstp st(0)
  jb kick_dmg_skip
//-----------------

// -- kick force ----------

mov ebp,humans_max
xor eax,eax
label(kick_check_h_loop)
kick_check_h_loop:
 cmp [h0+eax],0
 je kick_check_h_next
 cmp eax,ecx
 je kick_check_h_next

mov ebp,B
label(kick_check_leg_loop)
kick_check_leg_loop:
  push ebp
  push eax

mov edi,3 //chest -&gt; head
xor ebx,ebx
mov edx,h_bps
label(kick_check_bp_loop)
kick_check_bp_loop:
   push ecx
   push eax
   push edi
   push ebp
   push ebx
   push edx
imul ebp,h_bps

sub esp,1C
push (float)kick_collision_radius
  lea edi,[h0+h_bp0_pos+h_bps+ecx+ebp]
    push edi //b1
  lea edi,[h0+h_bp0_pos+ecx+ebp]
    push edi //b0
  lea edi,[h0+h_bp0_pos+eax+edx]
    push edi //a1
  lea edi,[h0+h_bp0_pos+eax+ebx]
    push edi //a0

{
  lea edi,[h0+h_bp0_pos+h_bps+ecx+ebp]
    push edi //b1
  lea edi,[h0+h_bp0_pos+eax+edx]
    push edi //a1
  lea edi,[h0+h_bp0_pos+ecx+ebp]
    push edi //b0
  lea edi,[h0+h_bp0_pos+eax+ebx]
    push edi //a0
}

  lea edi,[esp+14]
    push edi //a3_out
  lea edi,[edi+4]
    push edi //a2_out
  lea edi,[edi+C]
    push edi //a1_out
call ray_distance_func
//sub_4210C0(vector3 *out_a1, vector3 *out_a2, float *out_a3, vector3 *a4, vector3 *a5, vector3 *a6, vector3 *a7, float a8)
add esp,3C
mov esi,eax

   pop edx
   pop ebx
   pop ebp
   pop edi
   pop eax
   pop ecx

test esi,esi
je kick_fail

//--- drop items ------

cmp [h0+h_slot0+eax],0
je kick_dmg_skip_slot0

        pushad
  push -1
  push 0
  push 1
  push [h0+h_slot0+4+eax]
  call grab_item_func
  add esp,10
        popad

label(kick_dmg_skip_slot0)
kick_dmg_skip_slot0:
cmp [h0+h_slot1+eax],0
je kick_dmg_skip_slot1

        pushad
  push -1
  push 1
  push 1
  push [h0+h_slot1+4+eax]
  call grab_item_func
  add esp,10
        popad

label(kick_dmg_skip_slot1)
kick_dmg_skip_slot1:

//---- hp damage -------

//sub [h0+h_health1+eax],kick_hp_damage
sub [h0+h_health2+8+eax],kick_hp_damage
sub [h0+h_health2+10+eax],kick_hp_damage
add [h0+h_drunkness+eax],#3

//---- force ------------

  push edi
  push ebp
mov edi,[h0+h_bp0_pb+eax+ebx]
imul edi,pbs

imul ebp,h_bps
mov ebp,[h0+h_bp0_pb+ecx+ebp]
imul ebp,pbs

push (float)kick_knockback
    cmp [h0+h_elim+ecx],0
    je kick_dmg_elim_skip
       mov [esp],(float)kick_knockback_eliminator
    label(kick_dmg_elim_skip)
    kick_dmg_elim_skip:

  fld [pb0+pb_vel+0+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+0+edi]
    fstp [pb0+pb_vel+0+edi]
 //---
  fld [pb0+pb_vel+4+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+4+edi]
    fstp [pb0+pb_vel+4+edi]
 //---
  fld [pb0+pb_vel+8+ebp]
  fmul [esp]
    fadd [pb0+pb_vel+8+edi]
    fstp [pb0+pb_vel+8+edi]
//--- particles ---
     pushad
  lea eax,[pb0+pb_vel+edi]
  push eax
 lea eax,[pb0+pb_pos+edi]
 push eax
push 1
push 0
call splash_particles_func
add esp,10
      popad
//-----------------
add esp,4

  pop ebp
  pop edi

label(kick_fail)
kick_fail:

add ebx,h_bps
add edx,h_bps
dec edi
cmp edi,1
jge kick_check_bp_loop

  pop eax
  pop ebp
add ebp,3
cmp ebp,E
jle kick_check_leg_loop

label(kick_check_h_next)
kick_check_h_next:
add eax,hs
dec ebp
cmp ebp,0
jge kick_check_h_loop

// -------------------------
     popad
     pushad
label(kick_dmg_skip)
kick_dmg_skip:

//--- stabilize pelvis torque ----
mov eax,[h0+h_bp0_pb+ecx]
imul eax,pbs
  push (float)kick_body_stabilize
    fld [pb0+pb_torque+0+eax]
    fmul [esp]
    fstp [pb0+pb_torque+0+eax]
      fld [pb0+pb_torque+4+eax]
      fmul [esp]
      fstp [pb0+pb_torque+4+eax]
    fld [pb0+pb_torque+8+eax]
    fmul [esp]
    fstp [pb0+pb_torque+8+eax]
  add esp,4
//--------- -----------------------

mov eax,[game_timer2]
mov ecx,[esp+20]
imul ecx,h2s
cmp eax,[h20+h2_kick_cooldown+ecx]
jl leg_ret
add eax,kick_cooldown
mov [h20+h2_kick_cooldown+ecx],eax


// -- kick animation --

mov ecx,[esp+20]
  push ecx
  imul ecx,h2s
  test [h20+h2_zoom_last+ecx],2
  pop ecx
  jne leg_ret
imul ecx,hs

push (float)0.75 //velocity force

//------ left thigh --------
{
mov ebx,A
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)100.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4
}
//------ left knee --------

mov ebx,B
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)-10.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4

//---- right thigh ------
{
mov ebx,D
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)35.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4
}
//----- right knee --------

mov ebx,E
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs

push (float)10.0
fld [h0+h_yaw_global+ecx]
 fld st(0)
  fsin
              fld st(0)
              fmul [esp+4]
              fchs
              fadd [pb0+pb_vel+0+ebx]
              fstp [pb0+pb_vel+0+ebx]
  fmul [esp]
  fadd [pb0+pb_torque+8+ebx]
  fstp [pb0+pb_torque+8+ebx]
    fcos
              fld st(0)
              fmul [esp+4]
              fadd [pb0+pb_vel+8+ebx]
              fstp [pb0+pb_vel+8+ebx]
    fmul [esp]
    fadd [pb0+pb_torque+0+ebx]
    fstp [pb0+pb_torque+0+ebx]
add esp,4

//-----------------------

mov ebx,0
imul ebx,h_bps
mov ebx,[h0+h_bp0_pb+ebx+ecx]
imul ebx,pbs
   mov [esp],(float)-0.0675
    fld [esp]
    fadd [pb0+pb_torque+4+ebx]
    fstp [pb0+pb_torque+4+ebx]


add esp,4






label(leg_apply)
leg_apply:
    popad
//call subrosadedicated.exe+3F760
jmp exit85

label(leg_ret)
leg_ret:
    popad
jmp exit85

originalcode85:
call subrosadedicated.exe+3F760

exit85:
jmp returnhere85

"subrosadedicated.exe"+6C83B:
jmp newmem85
returnhere85:

//leg motor (jump state)

alloc(newmem112,2048)
label(returnhere112)
label(originalcode112)
label(exit112)

newmem112:

imul ecx,hs
test [h0+h_zoom+ecx],2
jne exit112

originalcode112:
call subrosadedicated.exe+3F760

exit112:
jmp returnhere112

"subrosadedicated.exe"+66523:
jmp newmem112
returnhere112:


//mid-air
{
alloc(newmem98,2048)
label(returnhere98)
label(originalcode98)
label(exit98)

newmem98:
test [h0+h_zoom+esi],2
je originalcode98
         pushad
//...
push A
push 0

mov esi,[h0+h_p+esi]
imul esi,ps
mov esi,[p0+p_h+esi]
push esi

call subrosadedicated.exe+3F760
add esp,34


label(midair_ret)
midair_ret:
         popad
originalcode98:
test byte ptr [esi+subrosadedicated.exe+531478],08

exit98:
jmp returnhere98

"subrosadedicated.exe"+6C3CF:
jmp newmem98
nop
nop
returnhere98:
}



//grab check 3

alloc(newmem41,2048)
label(returnhere41)
label(originalcode41)
label(exit41)

 //edx = src h*
 //ebp = hand limb
 //[esp+50] = dst h
 //[esp+18] = dst limb
newmem41:

cmp [game_state],1
je subrosadedicated.exe+3E44C
//je subrosadedicated.exe+3E5E2

test [edx+subrosadedicated.exe+531478],0800
je subrosadedicated.exe+3E44C
    pushad

mov edi,ebp //bp
imul edi,h_bps //bp*
mov edi,[h0+h_bp0_pb+edx+edi] //hand pb
imul edi,pbs

mov ebx,0
  cmp ebp,6
  jne grab3_1
mov ebx,1
label(grab3_1)
grab3_1:
  inc ebx
mov eax,[h0+h_controls+edx]
test eax,ebx
je grab3_ret
  dec ebx

  push ebx
imul ebx,h_grabs
cmp [h0+h_grab0+ebx+edx],1
  pop ebx
je grab3_ret


                   push ebx
    mov eax,[h0+h_p+edx]
    imul eax,ps
    mov eax,[p0+p_h+eax]
    imul eax,h2s
    lea eax,[eax+ebx*4]
      mov ebx,[game_timer2]
      sub ebx,[h20+h2_punch_cooldown+eax]
        cmp ebx,0
                   pop ebx
        jl grab3_ret


mov ecx,[esp+20+50]
imul ecx,hs //dst h*
  push ebx
//mov ebx,[esp+20+18]
mov ebx,[esp+24+18]
imul esi,ebx,h_bps
mov esi,[h0+h_bp0_pb+ecx+esi] //limb pb
imul esi,pbs

   //mov [pb0+pb_vel+4+esi],(float)0.15
   //mov [pb0+pb_vel+4+edi],(float)0.3

//magnitude

  sub esp,14
  fstp [esp] //fpu stack overflow, saving some values
  fstp [esp+4]
  fstp [esp+8]
  fstp [esp+C]

fld [pb0+pb_vel+0+edi]
      fsub [pb0+pb_vel+0+esi]
  fmul st(0)
fld [pb0+pb_vel+4+edi]
      fsub [pb0+pb_vel+4+esi]
  fmul st(0)
fld [pb0+pb_vel+8+edi]
      fsub [pb0+pb_vel+8+esi]
  fmul st(0)
faddp
faddp
fsqrt

mov [esp+10],(float)punch_damage
   cmp [h0+h_elim+edx],0
   je punch_dmg_elim_skip
      mov [esp+10],(float)punch_damage_eliminator
   label(punch_dmg_elim_skip)
   punch_dmg_elim_skip:
fmul [esp+10]
fchs
fstp [esp+10]
   fld [esp+C] //restoring
   fld [esp+8]
   fld [esp+4]
   fld [esp]
fld [esp+10]
add esp,14

//-- threshold ---
  push (float)-punch_threshold
  fld [esp]
  add esp,4
  fcomip st(1)
  jb punch_dmg_skip
//-----------------


//apply force

push (float)punch_knockback

    cmp [h0+h_elim+edx],0
    je punch_force_elim_skip
      mov [esp],(float)punch_knockback_eliminator
    label(punch_force_elim_skip)
    punch_force_elim_skip:

  fld [pb0+pb_vel+0+edi]
  fmul [esp]
    fadd [pb0+pb_vel+0+esi]
    fstp [pb0+pb_vel+0+esi]
  fld [pb0+pb_vel+4+edi]
  fmul [esp]
    fadd [pb0+pb_vel+4+esi]
    fstp [pb0+pb_vel+4+esi]
  fld [pb0+pb_vel+8+edi]
  fmul [esp]
    fadd [pb0+pb_vel+8+esi]
    fstp [pb0+pb_vel+8+esi]
add esp,4

//apply damage

cmp ebx,0
  je punch_dmg_crotch
cmp ebx,1
  je punch_dmg_torso
cmp ebx,2
  je punch_dmg_torso
cmp ebx,3
  je punch_dmg_head

cmp ebx,4
  je punch_dmg_larm
cmp ebx,5
  je punch_dmg_larm
cmp ebx,6
  je punch_dmg_larm
cmp ebx,7
  je punch_dmg_rarm
cmp ebx,8
  je punch_dmg_rarm
cmp ebx,9
  je punch_dmg_rarm
cmp ebx,#10
  je punch_dmg_lleg
cmp ebx,#11
  je punch_dmg_lleg
cmp ebx,#12
  je punch_dmg_lleg
cmp ebx,#13
  je punch_dmg_rleg
cmp ebx,#14
  je punch_dmg_rleg
cmp ebx,#15
  je punch_dmg_rleg

label(punch_dmg_crotch)
punch_dmg_crotch:
    fstp st(0)
jmp grab_affect

label(punch_dmg_torso)
punch_dmg_torso:
                 push eax
                  fist [esp]
                  cmp [esp],-8
                 pop eax
  fiadd [h0+h_health2+8+ecx]
  fistp [h0+h_health2+8+ecx]
                 jg grab_affect
                //mov [h0+h_bleeding+ecx],1
jmp grab_affect

label(punch_dmg_head)
punch_dmg_head:
  fld st(0)
  fiadd [h0+h_health2+10+ecx]
  fistp [h0+h_health2+10+ecx]
  fchs
   fadd st(0)
   fadd st(0)
  fiadd [h0+h_drunkness+ecx]
  fistp [h0+h_drunkness+ecx]
jmp grab_affect

label(punch_dmg_larm)
punch_dmg_larm:
  fiadd [h0+h_health2+18+ecx]
  fistp [h0+h_health2+18+ecx]
jmp grab_affect

label(punch_dmg_rarm)
punch_dmg_rarm:
  fiadd [h0+h_health2+20+ecx]
  fistp [h0+h_health2+20+ecx]
jmp grab_affect

label(punch_dmg_lleg)
punch_dmg_lleg:
  fiadd [h0+h_health2+28+ecx]
  fistp [h0+h_health2+28+ecx]
jmp grab_affect

label(punch_dmg_rleg)
punch_dmg_rleg:
  fiadd [h0+h_health2+30+ecx]
  fistp [h0+h_health2+30+ecx]
jmp grab_affect

label(grab_affect)
grab_affect:


   pop ebx

    mov eax,[h0+h_p+edx]
    imul eax,ps
    mov eax,[p0+p_h+eax]
    imul eax,h2s
    lea eax,[eax+ebx*4]
      mov ebx,[game_timer2]
      add ebx,punch_cooldown
      mov [h20+h2_punch_cooldown+eax],ebx


  lea eax,[pb0+pb_vel+edi]
  push eax
 lea eax,[pb0+pb_pos+edi]
 push eax
push 1
push 0
call splash_particles_func
add esp,10

jmp grab3_ret
label(punch_dmg_skip)
punch_dmg_skip:
fstp st(0)
add esp,4

label(grab3_ret)
grab3_ret:
    popad
jmp subrosadedicated.exe+3E5E2

originalcode41:
test [edx+subrosadedicated.exe+531478],0800

exit41:
jmp returnhere41

"subrosadedicated.exe"+3E43C:
jmp newmem41
nop
nop
nop
nop
nop
returnhere41:

//grab check 2


alloc(newmem32,2048)
label(returnhere32)
label(originalcode32)
label(exit32)

newmem32:

test [ebp+subrosadedicated.exe+531478],eax
  jne subrosadedicated.exe+64D75
  test [ebp+subrosadedicated.exe+53147C],eax
  je subrosadedicated.exe+64D75
jmp subrosadedicated.exe+64BE9

originalcode32:
test [ebp+subrosadedicated.exe+531478],eax
  //je subrosadedicated.exe+64D75
  //test [ebp+subrosadedicated.exe+53147C],eax
  //jne subrosadedicated.exe+64D75


exit32:
jmp returnhere32


"subrosadedicated.exe"+64BD1:
jmp newmem32
nop
returnhere32:



//grab check 1

alloc(newmem24,2048)
label(returnhere24)
label(originalcode24)
label(exit24)

newmem24:

 inc ebx
push eax
mov eax,[ebp+subrosadedicated.exe+531478]
and eax,ebx
 dec ebx
cmp eax,0
  pop eax
je subrosadedicated.exe+64D81
jmp subrosadedicated.exe+64D8F

originalcode24:
test [ebp+subrosadedicated.exe+531478],0800
  //jne subrosadedicated.exe+64D8F


exit24:
jmp returnhere24


"subrosadedicated.exe"+64D75:
jmp newmem24
nop
nop
nop
nop
nop
returnhere24:



//arm extension check

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6:
  pushad
test eax,800
jne ext_apply
 inc ebx
  not ebx
  and ebx,3
and eax,ebx
  not ebx
  and ebx,3
 dec ebx
cmp eax,0
je ext_ret

label(ext_apply)
ext_apply:
  popad
  jmp exit6
label(ext_ret)
ext_ret:
  popad
  jmp subrosadedicated.exe+6411E
originalcode6:
test eax,00000800
je subrosadedicated.exe+6411E

exit6:
jmp returnhere6

"subrosadedicated.exe"+640A7:
jmp newmem6
returnhere6:


//arm retract check

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11:

test eax,800
je subrosadedicated.exe+640CC

push eax
 inc ebx
  not ebx
  and ebx,3
and eax,ebx
  not ebx
  and ebx,3
 dec ebx
cmp eax,0
pop eax
je originalcode11

mov [esp+30],(float)punch_extension
mov [esp+10],(float)punch_height


   push eax
  and eax,3
  cmp eax,3
   pop eax
  jne subrosadedicated.exe+640CC
     mov [esp+30],(float)punch_extension_both


jmp subrosadedicated.exe+640CC

originalcode11:
//test al,02
//je subrosadedicated.exe+640CC
fld dword ptr [subrosadedicated.exe+887C0]

exit11:
jmp returnhere11

"subrosadedicated.exe"+640BE:
jmp newmem11
nop
nop
nop
nop
nop
returnhere11:

//grab pitch check

alloc(newmem17,2048)
label(returnhere17)
label(originalcode17)
label(exit17)

newmem17:
jp subrosadedicated.exe+640EF
 push edx
 mov edx,[h0+h_controls+esi]
 and edx,800
cmp edx,0
 pop edx
jne subrosadedicated.exe+640EF

originalcode17:
//jp subrosadedicated.exe+640EF
fld dword ptr [esi+subrosadedicated.exe+531354]

exit17:
jmp returnhere17

"subrosadedicated.exe"+640D9:
jmp newmem17
nop
nop
nop
returnhere17:

//grab yaw check

alloc(newmem62,2048)
label(returnhere62)
label(originalcode62)
label(exit62)

newmem62:
   push eax
mov eax,[h0+h_grab0+esi]
add eax,[h0+h_grab1+esi]
cmp eax,1
    pop eax
  je originalcode62
    push eax
mov eax,[h0+h_controls+esi]
test eax,800
   pop eax
je originalcode62
   push eax
mov eax,[h0+h_controls+esi]
and eax,3
cmp eax,3
   pop eax
jne originalcode62

push (float)punch_yaw_both
fld [esp]

test ebx,ebx
jne grab_yaw_ret
   fchs
label(grab_yaw_ret)
grab_yaw_ret:
  add esp,4
  fstp [esp+14]
jmp subrosadedicated.exe+64122



originalcode62:
test ebx,ebx
jne subrosadedicated.exe+64112
fld dword ptr [subrosadedicated.exe+888E8]

exit62:
jmp returnhere62

"subrosadedicated.exe"+64102:
jmp newmem62
nop
nop
nop
nop
nop
returnhere62:

//arm motor

alloc(newmem143,2048)
label(returnhere143)
label(originalcode143)
label(exit143)

newmem143:
      push edi
imul edi,hs
test [h0+h_controls+edi],800
je originalcode143
mov eax,[h0+h_slot0+edi]
add eax,[h0+h_slot1+edi]
cmp eax,2
jne originalcode143

mov eax,[esp+4+C]
  mov [eax+0],(float)-0.95
cmp [esp+4+8],4
je originalcode143
  mov [eax+0],(float)0.95

originalcode143:
     pop edi
call subrosadedicated.exe+3F760

exit143:
jmp returnhere143

"subrosadedicated.exe"+64711:
jmp newmem143
returnhere143:

//gun grip rotation

alloc(newmem160,2048)
label(returnhere160)
label(originalcode160)
label(exit160)

newmem160:

mov ecx,[esp+C]
imul ecx,hs
test [h0+h_controls+ecx],800
je originalcode160
mov eax,[h0+h_slot0+ecx]
add eax,[h0+h_slot1+ecx]
cmp eax,2
jne originalcode160

mov [edx+0],(float)0.25
mov [edx+4],(float)0.0
mov [edx+8],(float)-0.75

mov eax,[esp+14]
cmp [h0+h_slot0+4+ecx],eax
jne originalcode160

mov [edx+0],(float)-0.25
mov [edx+4],(float)0.0
mov [edx+8],(float)0.75

originalcode160:
call subrosadedicated.exe+11170

exit160:
jmp returnhere160

"subrosadedicated.exe"+3DB79:
jmp newmem160
returnhere160:


//freelook rotation

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

  pushfd
  push edx
  push ebp
  push esi
mov [ecx-C],(float)0.0
mov [ecx-8],(float)0.0
    imul esi,edi,hs
    mov edx,[h0+h_controls+esi]
  mov ebp,edx
  and ebp,10
  cmp ebp,0
  je freelook_shift_skip

fld [eax-14]
fadd [ecx-C]
fstp [ecx-C]

fld [eax-10]
fadd [ecx-8]
fstp [ecx-8]

label(freelook_shift_skip)
freelook_shift_skip:
  mov ebp,edx
  and ebp,#32
  cmp ebp,0
  jne freelook_abort

  mov ebp,edx
  and ebp,2
  cmp ebp,0
  je freelook_ret

      imul esi,edi,h2s
    fld [eax-C]
    fsub [h20+h2_shift_yaw_old+esi]
    fadd [eax-14]
    fstp [ecx-14]

    fld [eax-8]
    fsub [h20+h2_shift_pitch_old+esi]
    fadd [eax-10]
    fstp [ecx-10]

   label(freelook_ret)
   freelook_ret:
      imul esi,edi,h2s
        mov ebp,[eax-C]
        mov [h20+h2_shift_yaw_old+esi],ebp
        mov ebp,[eax-8]
        mov [h20+h2_shift_pitch_old+esi],ebp
  pop esi
  pop ebp
  pop edx
  popfd
jmp subrosadedicated.exe+EA40

label(freelook_abort)
freelook_abort:
  pop esi
  pop ebp
  pop edx
  popfd

originalcode2:
fld dword ptr [eax-0C]
fstp dword ptr [ecx-0C]

exit2:
jmp returnhere2

"subrosadedicated.exe"+EA34:
jmp newmem2
nop
returnhere2:

//zoom

alloc(newmem127,2048)
label(returnhere127)
label(originalcode127)
label(exit127)

newmem127:
  push eax
  push ebx
mov eax,[h0+h_p+edx]
cmp eax,-1
je zoom_ret
imul eax,ps
mov eax,[p0+p_h+eax]
cmp eax,-1
je zoom_ret
imul eax,h2s

mov ebx,[h0+h_zoom+edx]
mov [h20+h2_zoom_last+eax],ebx

//----------
    cmp [h0+h_grounded+edx],1
    jne zoom_ret

    mov [h20+h2_zoom_last+eax],0
//---------

label(zoom_ret)
zoom_ret:
  pop ebx
  pop eax
originalcode127:
mov [edx+subrosadedicated.exe+531318],ecx

exit127:
jmp returnhere127

"subrosadedicated.exe"+EB4D:
jmp newmem127
nop
returnhere127:


//hand action

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//ebp = h
newmem:

cmp ebx,1
je action_larm

test al,1
jne action_apply

jmp action_ret
label(action_larm)
action_larm:

cmp [h0+h_slot1+ebp],0
je action_ret
  push ebx
mov ebx,[h0+h_slot1+4+ebp]
imul ebx,is
cmp [i0+i_type+ebx],F
  pop ebx
je action_ret

test al,2
jne action_apply

jmp action_ret
label(action_apply)
action_apply:
jmp subrosadedicated.exe+6486D

label(action_ret)
action_ret:
jmp subrosadedicated.exe+64875

originalcode:
test al,01
je subrosadedicated.exe+64875
cmp ebx,ecx

exit:
jmp returnhere

"subrosadedicated.exe"+64856:
jmp newmem
nop
returnhere:


//mouselook torso

subrosadedicated.exe+62001:
test byte ptr [esi+subrosadedicated.exe+531478],10

//mouselook arms

subrosadedicated.exe+632EA:
test byte ptr [esi+subrosadedicated.exe+531478],10



[DISABLE]
dealloc(newmem178)
"subrosadedicated.exe"+7A913:
mov [subrosadedicated.exe+8ED1764],esi
//Alt: db 89 35 64 17 DF 09
dealloc(newmem160)
"subrosadedicated.exe"+3DB79:
call subrosadedicated.exe+11170
//Alt: db E8 F2 35 FD FF
dealloc(newmem143)
"subrosadedicated.exe"+64711:
call subrosadedicated.exe+3F760
//Alt: db E8 4A B0 FD FF
dealloc(newmem127)
"subrosadedicated.exe"+EB4D:
mov [edx+subrosadedicated.exe+531318],ecx
//Alt: db 89 8A 18 13 0D 01
dealloc(newmem112)
"subrosadedicated.exe"+66523:
call subrosadedicated.exe+3F760
//Alt: db E8 38 92 FD FF
dealloc(newmem98)
"subrosadedicated.exe"+6C3CF:
test byte ptr [esi+subrosadedicated.exe+531478],08
//Alt: db F6 86 78 14 D3 00 08
dealloc(newmem85)
"subrosadedicated.exe"+6C83B:
call subrosadedicated.exe+3F760
//Alt: db E8 20 2F FD FF
dealloc(newmem73)
"subrosadedicated.exe"+7A8F2:
mov [subrosadedicated.exe+8ED1764],esi
//Alt: db 89 35 64 17 6E 09
dealloc(newmem62)
"subrosadedicated.exe"+64102:
test ebx,ebx
jne subrosadedicated.exe+64112
fld dword ptr [subrosadedicated.exe+888E8]
//Alt: db 85 DB 75 0C D9 05 E8 88 89 00
dealloc(newmem41)
"subrosadedicated.exe"+3E43C:
test [edx+subrosadedicated.exe+531478],0800
//Alt: db F7 82 78 14 D4 00 00 08 00 00
dealloc(newmem32)
"subrosadedicated.exe"+64BD1:
test [ebp+subrosadedicated.exe+531478],eax
//Alt: db 85 85 78 14 8F 01
dealloc(newmem24)
"subrosadedicated.exe"+64D75:
test [ebp+subrosadedicated.exe+531478],0800
//Alt: db F7 85 78 14 8F 01 00 08 00 00
dealloc(newmem17)
"subrosadedicated.exe"+640D9:
jp subrosadedicated.exe+640EF
fld dword ptr [esi+subrosadedicated.exe+531354]
//Alt: db 7A 14 D9 86 54 13 8F 01
dealloc(newmem11)
"subrosadedicated.exe"+640BE:
test al,02
je subrosadedicated.exe+640CC
fld dword ptr [subrosadedicated.exe+887C0]
//Alt: db A8 02 74 0A D9 05 C0 87 44 01
dealloc(newmem6)
"subrosadedicated.exe"+640A7:
test eax,00000800
//Alt: db A9 00 08 00 00

dealloc(newmem2)
"subrosadedicated.exe"+EA34:
fld dword ptr [eax-0C]
fstp dword ptr [ecx-0C]
//Alt: db D9 40 F4 D9 59 F4
dealloc(newmem)
"subrosadedicated.exe"+64856:
test al,01
je subrosadedicated.exe+64875
cmp ebx,ecx
//Alt: db A8 01 74 1B 3B D9


subrosadedicated.exe+62001:
test byte ptr [esi+subrosadedicated.exe+531478],02

subrosadedicated.exe+632EA:
test byte ptr [esi+subrosadedicated.exe+531478],02


dealloc(mydata2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"knockback_ak"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//which gun has knockback:
  //define(knockback_gun,2) //9mm, mp5, uzi
  //define(knockback_gun,3) //magnum
  //define(knockback_gun,1) //m16
  define(knockback_gun,0) //ak
  //define(knockback_gun,-1) //all

define(kickback_force,0.0325)
define(kickback_hp,1.0)

//----------------------------------------------------------------------


define(bt0,subrosadedicated.exe+1EC760)
define(b_type,0)
define(b_owner,8)
define(b_vel,2C)
define(bs,5C)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_controls,1B4)
define(h_yaw,12C)
define(h_shift_yaw,134)
define(h_bp0_pb,1C0)
define(h_bps,120)
define(h_grab0,3188)
define(h_grab1,31B4)
define(h_grab_h,4)
define(h_grab_bp,C)
define(h_grabs,2C)
define(h_drunkness,6C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)



[ENABLE]

//ApplyDamage(h, bp, 0, hp)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//esi = bullet*
newmem:
        pushad

mov eax,knockback_gun
cmp eax,-1
je shot_check_skip
cmp [bt0+b_type+esi],eax
jne shot_ret
label(shot_check_skip)
shot_check_skip:

   push (float)kickback_force

   mov edi,[esp+28]
   imul edi,hs

   mov ebx,[esp+28+4]
   imul ebx,h_bps
    mov edx,[h0+h_bp0_pb+ebx+edi]
    imul edx,pbs

  fld [bt0+b_vel+0+esi]
  fmul [esp]
  fadd [pb0+pb_vel+0+edx]
  fstp [pb0+pb_vel+0+edx]

  fld [bt0+b_vel+4+esi]
      fabs
  fmul [esp]
  fadd [pb0+pb_vel+4+edx]
  fstp [pb0+pb_vel+4+edx]

  fld [bt0+b_vel+8+esi]
  fmul [esp]
  fadd [pb0+pb_vel+8+edx]
  fstp [pb0+pb_vel+8+edx]

  add esp,4

  //hp
    fild [esp+24+C]
       push (float)kickback_hp
       fmul [esp]
       add esp,4
    fistp [esp+24+C]

label(shot_ret)
shot_ret:
        popad
originalcode:
push ebx
mov ebx,[esp+0C]

exit:
jmp returnhere

"subrosadedicated.exe"+8BF0:
jmp newmem
returnhere:





[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+8BF0:
push ebx
mov ebx,[esp+0C]
//Alt: db 53 8B 5C 24 0C


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"knockback_9mm_mp5_uzi"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//which gun has knockback:
  define(knockback_gun,2) //9mm, mp5, uzi
  //define(knockback_gun,3) //magnum
  //define(knockback_gun,1) //m16
  //define(knockback_gun,0) //ak
  //define(knockback_gun,-1) //all

define(kickback_force,0.0525)
define(kickback_hp,3.6)

//----------------------------------------------------------------------


define(bt0,subrosadedicated.exe+1EC760)
define(b_type,0)
define(b_owner,8)
define(b_vel,2C)
define(bs,5C)

define(h0,subrosadedicated.exe+5312C4)
define(h_p,8)
define(h_controls,1B4)
define(h_yaw,12C)
define(h_shift_yaw,134)
define(h_bp0_pb,1C0)
define(h_bps,120)
define(h_grab0,3188)
define(h_grab1,31B4)
define(h_grab_h,4)
define(h_grab_bp,C)
define(h_grabs,2C)
define(h_drunkness,6C)
define(h_health1,32A0)
define(h_health2,32A4)
define(hs,3540)

define(pb0,subrosadedicated.exe+8F850)
define(pb_pos,4)
define(pb_vel,10)
define(pb_torque,4C)
define(pbs,AC)



[ENABLE]

//ApplyDamage(h, bp, 0, hp)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//esi = bullet*
newmem:
        pushad

mov eax,knockback_gun
cmp eax,-1
je shot_check_skip
cmp [bt0+b_type+esi],eax
jne shot_ret
label(shot_check_skip)
shot_check_skip:

   push (float)kickback_force

   mov edi,[esp+28]
   imul edi,hs

   mov ebx,[esp+28+4]
   imul ebx,h_bps
    mov edx,[h0+h_bp0_pb+ebx+edi]
    imul edx,pbs

  fld [bt0+b_vel+0+esi]
  fmul [esp]
  fadd [pb0+pb_vel+0+edx]
  fstp [pb0+pb_vel+0+edx]

  fld [bt0+b_vel+4+esi]
      fabs
  fmul [esp]
  fadd [pb0+pb_vel+4+edx]
  fstp [pb0+pb_vel+4+edx]

  fld [bt0+b_vel+8+esi]
  fmul [esp]
  fadd [pb0+pb_vel+8+edx]
  fstp [pb0+pb_vel+8+edx]

  add esp,4

  //hp
    fild [esp+24+C]
       push (float)kickback_hp
       fmul [esp]
       add esp,4
    fistp [esp+24+C]

label(shot_ret)
shot_ret:
        popad
originalcode:
push ebx
mov ebx,[esp+0C]

exit:
jmp returnhere

"subrosadedicated.exe"+8BF0:
jmp newmem
returnhere:





[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+8BF0:
push ebx
mov ebx,[esp+0C]
//Alt: db 53 8B 5C 24 0C


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"multiple windows"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_acc,3C)
define(p_h,88)
define(ps,381C)
define(players_max,#128)

[ENABLE]

alloc(mycode,2048)
mycode:

mov ecx,players_max
xor ebx,ebx
label(players_loop)
players_loop:

cmp [p0+ebx],0
je players_next
   pushad
     call msvcrt.rand
     and eax,#4095
     mov [esp+1C],eax
   popad
mov [p0+p_acc+ebx],eax
   pushad
     call msvcrt.rand
     and eax,#31
     add eax,#40
     mov [esp+1C],eax
   popad
mov [p0+p_name+5+ebx],eax

label(players_next)
players_next:
add ebx,ps
loop players_loop

ret
createthread(mycode)
 
[DISABLE]

dealloc(mycode)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"hide from the server list"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+711FB:
db 90  90 90 90 90

[DISABLE]

subrosadedicated.exe+711FB:
call subrosadedicated.exe+12FD0

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>94</ID>
          <Description>"no base menu"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

subrosadedicated.exe+B29E:
db 90 90  90 90 90 90  90 90 90 90

[DISABLE]

subrosadedicated.exe+B29E:
mov [ebp+subrosadedicated.exe+13841750],00000010

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"spawn at boxing ring"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode2:
call subrosadedicated.exe+74760

exit2:
jmp returnhere2

"subrosadedicated.exe"+84931:
jmp newmem2
returnhere2:



{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit:
jmp returnhere

"subrosadedicated.exe"+79E9F:
jmp newmem
returnhere:

}


 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF
dealloc(newmem)
"subrosadedicated.exe"+79E9F:
call subrosadedicated.exe+74760
//Alt: db E8 BC A8 FF FF


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>98</ID>
              <Description>"spawn at towers"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov eax,[esp]
mov [eax+0],(float)1216.3
mov [eax+4],(float)69.1
mov [eax+8],(float)1779.7

originalcode2:
call subrosadedicated.exe+74760

exit2:
jmp returnhere2

"subrosadedicated.exe"+84931:
jmp newmem2
returnhere2:



{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit:
jmp returnhere

"subrosadedicated.exe"+79E9F:
jmp newmem
returnhere:

}


 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF
dealloc(newmem)
"subrosadedicated.exe"+79E9F:
call subrosadedicated.exe+74760
//Alt: db E8 BC A8 FF FF


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>99</ID>
              <Description>"spawn at pyrrha"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov eax,[esp]
mov [eax+0],(float)1128.4
mov [eax+4],(float)132.8
mov [eax+8],(float)1494.3

originalcode2:
call subrosadedicated.exe+74760

exit2:
jmp returnhere2

"subrosadedicated.exe"+84931:
jmp newmem2
returnhere2:



{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit:
jmp returnhere

"subrosadedicated.exe"+79E9F:
jmp newmem
returnhere:

}


 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF
dealloc(newmem)
"subrosadedicated.exe"+79E9F:
call subrosadedicated.exe+74760
//Alt: db E8 BC A8 FF FF


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>100</ID>
              <Description>"spawn at museum"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov eax,[esp]
mov [eax+0],(float)1659.9
mov [eax+4],(float)65.5
mov [eax+8],(float)1509.6

originalcode2:
call subrosadedicated.exe+74760

exit2:
jmp returnhere2

"subrosadedicated.exe"+84931:
jmp newmem2
returnhere2:



{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit:
jmp returnhere

"subrosadedicated.exe"+79E9F:
jmp newmem
returnhere:

}


 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF
dealloc(newmem)
"subrosadedicated.exe"+79E9F:
call subrosadedicated.exe+74760
//Alt: db E8 BC A8 FF FF


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>149</ID>
              <Description>"spawn at barrel"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov eax,[esp]
mov [eax+0],(float)1910.6
mov [eax+4],(float)84.8
mov [eax+8],(float)1160.6

originalcode2:
call subrosadedicated.exe+74760

exit2:
jmp returnhere2

"subrosadedicated.exe"+84931:
jmp newmem2
returnhere2:



{
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[esp]
mov [eax+0],(float)1586.8
mov [eax+4],(float)26.5
mov [eax+8],(float)1195.1

originalcode:
call subrosadedicated.exe+74760
               //(float* position, float* rotation, int player_id)
exit:
jmp returnhere

"subrosadedicated.exe"+79E9F:
jmp newmem
returnhere:

}


 
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84931:
call subrosadedicated.exe+74760
//Alt: db E8 2A FE FE FF
dealloc(newmem)
"subrosadedicated.exe"+79E9F:
call subrosadedicated.exe+74760
//Alt: db E8 BC A8 FF FF


</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>103</ID>
          <Description>"versus join random team"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]



alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
push eax
   pushad
call msvcrt.rand
and eax,1
mov [esp+1C],eax
   popad
mov [esi+subrosadedicated.exe+13841674],eax
pop eax

originalcode:
//mov [esi+subrosadedicated.exe+13841674],00000007

exit:
jmp returnhere

"subrosadedicated.exe"+31BA4:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+31BA4:
mov [esi+subrosadedicated.exe+13841674],00000007
//Alt: db C7 86 74 16 4F 14 07 00 00 00


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"z + ctrl to play dead    v2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_controls,1B4)
define(hs,3540)


[ENABLE]






alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

mov eax,[h0+h_controls+esi]
and eax,80008
cmp eax,80008
je subrosadedicated.exe+80EE2


originalcode:
cmp dword ptr [esi+subrosadedicated.exe+5312F8],00

exit:
jmp returnhere

"subrosadedicated.exe"+80ECC:
jmp newmem
nop
nop
returnhere:




alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

test [h0+h_controls+esi],8
jne subrosadedicated.exe+7EF9D


originalcode2:
fld dword ptr [subrosadedicated.exe+88C24]

exit2:
jmp returnhere2

"subrosadedicated.exe"+7EF93:
jmp newmem2
nop
returnhere2:




 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+7EF93:
fld dword ptr [subrosadedicated.exe+88C24]
//Alt: db D9 05 24 8C EB 00

dealloc(newmem)
"subrosadedicated.exe"+80ECC:
cmp dword ptr [esi+subrosadedicated.exe+5312F8],00
//Alt: db 83 BE F8 12 F8 00 00


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"discount cars"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(vt0,subrosadedicated.exe+AD2FF50)
define(vt_price,20)
define(vts,18548)

[ENABLE]

alloc(mycode,2048)
mycode:

mov ebx,0 //Town Car
imul ebx,vts
mov [vt0+vt_price+ebx],#1000

mov ebx,4 //Turbo
imul ebx,vts
mov [vt0+vt_price+ebx],#5000

mov ebx,5 //Turbo S
imul ebx,vts
mov [vt0+vt_price+ebx],#10000

mov ebx,6 //Beamer
imul ebx,vts
mov [vt0+vt_price+ebx],#2500

mov ebx,7 //Van
imul ebx,vts
mov [vt0+vt_price+ebx],#2000

mov ebx,E //Hatchback
imul ebx,vts
mov [vt0+vt_price+ebx],#1500

mov ecx,#24
xor ebx,ebx
label(shop_loop)
shop_loop:

 mov [ebx+subrosadedicated.exe+204CDD44],0


add ebx,#16
loop shop_loop

ret
createThread(mycode)

[DISABLE]

dealloc(mycode)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>129</ID>
          <Description>"add fake player (goldmen)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(team,0)



//---------------------

define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_admin,34)
define(p_acc,3C)
define(p_ready,48)
define(p_team,74)
define(p_h,88)
define(ps,381C)
define(players_max,#128)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(create_player_func,subrosadedicated.exe+31B50)
define(player_sync_func,subrosadedicated.exe+7690)

[ENABLE]

alloc(mycode,2048)
mycode:

call create_player_func

imul ebx,eax,ps
mov [p0+p_name+ebx],#6451042 //"bob"
mov [p0+p_team+ebx],team
mov [p0+p_acc+ebx],-1
mov [p0+p_ready+ebx],1

push eax
call player_sync_func
add esp,4

ret
createthread(mycode)
 
[DISABLE]

dealloc(mycode)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>137</ID>
              <Description>"add fake player (monsota)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(team,1)



//---------------------

define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_admin,34)
define(p_acc,3C)
define(p_ready,48)
define(p_team,74)
define(p_h,88)
define(ps,381C)
define(players_max,#128)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(create_player_func,subrosadedicated.exe+31B50)
define(player_sync_func,subrosadedicated.exe+7690)

[ENABLE]

alloc(mycode,2048)
mycode:

call create_player_func

imul ebx,eax,ps
mov [p0+p_name+ebx],#6451042 //"bob"
mov [p0+p_team+ebx],team
mov [p0+p_acc+ebx],-1
mov [p0+p_ready+ebx],1

push eax
call player_sync_func
add esp,4

ret
createthread(mycode)
 
[DISABLE]

dealloc(mycode)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>138</ID>
              <Description>"add fake player (oxs)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(team,2)



//---------------------

define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_admin,34)
define(p_acc,3C)
define(p_ready,48)
define(p_team,74)
define(p_h,88)
define(ps,381C)
define(players_max,#128)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(create_player_func,subrosadedicated.exe+31B50)
define(player_sync_func,subrosadedicated.exe+7690)

[ENABLE]

alloc(mycode,2048)
mycode:

call create_player_func

imul ebx,eax,ps
mov [p0+p_name+ebx],#6451042 //"bob"
mov [p0+p_team+ebx],team
mov [p0+p_acc+ebx],-1
mov [p0+p_ready+ebx],1

push eax
call player_sync_func
add esp,4

ret
createthread(mycode)
 
[DISABLE]

dealloc(mycode)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>130</ID>
              <Description>"remove fake players"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(p0,subrosadedicated.exe+13841600)
define(p_name,4)
define(p_admin,34)
define(p_acc,3C)
define(p_team,74)
define(p_h,88)
define(ps,381C)
define(players_max,#128)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(create_player_func,subrosadedicated.exe+31B50)
define(remove_player_func,subrosadedicated.exe+E880)

[ENABLE]

alloc(mycode,2048)
mycode:

xor ecx,ecx
xor ebx,ebx
label(players_loop)
players_loop:
  cmp [p0+ebx],0
    je players_next
  cmp [p0+p_team+ebx],6
    je players_next
  cmp [p0+p_acc+ebx],-1
    jne players_next

    pushad
 push ecx
 call remove_player_func
 add esp,4
    popad

label(players_next)
players_next:
add ebx,ps
inc ecx
cmp ecx,players_max
jl players_loop

ret
createthread(mycode)

[DISABLE]

dealloc(mycode)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"--guns"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"uzi mag size"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+192D1560+D88*a+1C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>84</ID>
          <Description>"9mm mag size"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+192D1560+D88*c+1C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"---misc"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"game state"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8ED1764</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"game timer"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8ED176C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"piles + extended commands"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(mydata,subrosadedicated.exe+80F6500)
define(pile0,mydata+20)
define(pile_cnt,0)
define(pile_it,4)
define(pile_pos,8)
define(piles,14)
define(piles_max,#10)

define(p0,subrosadedicated.exe+13841600)
define(p_admin,34)
define(p_team,74)
define(p_h,88)
define(ps,381C)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(item_spawn_func,subrosadedicated.exe+44880)
define(message_func,subrosadedicated.exe+7450)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)


define(create_player_func,subrosadedicated.exe+31B50)

define(human_spawn_func,subrosadedicated.exe+74760)
               //(float* position, float* rotation, int player_id)

[ENABLE]

alloc(tmpbuffer,4096)
alloc(strings,2048)
strings:
label(s_pos)
s_pos:
db '/' 'p' 'o' 's' 0
label(s_posformat)
s_posformat:
db 'p' 'o' 's' ':' ' ' '%' 'f' ',' ' ' '%' 'f' ',' ' ' '%' 'f' 0
label(s_bot)
s_bot:
db '/' 'b' 'o' 't' 0

//-------- state 1 -&gt; 2 --------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
           pushad

mov ecx,piles_max
xor ebx,ebx
label(piles_loop)
piles_loop:
    push ecx
    push ebx
mov edx,[pile0+pile_cnt+ebx]
cmp edx,0
jle piles_next

label(pile_items_loop)
pile_items_loop:
   push edx

push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

push [pile0+pile_pos+8+ebx]
push [pile0+pile_pos+4+ebx]
push [pile0+pile_pos+0+ebx]
     pushad
       call frand5
         fadd [esp+28]
         fstp [esp+28]
       //call frand5
       //  fadd [esp+24]
       //  fstp [esp+24]
       call frand5
         fadd [esp+20]
         fstp [esp+20]
     popad
mov ebp,esp //position

push esi
push 0 //float* velocity
push ebp
push [pile0+pile_it+ebx] //type
call item_spawn_func
add esp,10+30

   pop edx
dec edx
cmp edx,0
jg pile_items_loop

label(piles_next)
piles_next:
    pop ebx
    pop ecx
add ebx,piles
dec ecx
cmp ecx,0
jg piles_loop


           popad
originalcode2:
mov [subrosadedicated.exe+8ED176C],ecx

exit2:
jmp returnhere2

"subrosadedicated.exe"+84FD1:
jmp newmem2
nop
returnhere2:


//-------- commmands -----------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
       add esp,144
       pushad
//esi = *msg
//edi = p
imul ebx,edi,ps //p*
cmp [p0+p_admin+ebx],0
je commands_skip

//-------------- /pos
  push edi
push 4
push s_pos
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_1

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul eax,ecx,hs //h*
  sub esp,18
  fld [h0+h_pos+0+eax]
  fld [h0+h_pos+4+eax]
  fld [h0+h_pos+8+eax]
  fstp qword [esp+10]
  fstp qword [esp+8]
  fstp qword [esp+0]

  push s_posformat
  push tmpbuffer
  call msvcrt.sprintf
  add esp,20

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

//-------------- /bot
label(commands_1)
commands_1:
  push edi
push 4
push s_bot
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_2

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul edx,ecx,hs //h*

  pushad
    call create_player_func
    mov [esp+1C],eax
  popad
mov ebp,eax //p2

imul edi,ebp,ps
mov [p0+2D04+edi],1
mov [p0+3794+edi],1
mov [p0+37AC+edi],1
mov [p0+37A8+edi],2
mov [p0+p_team+edi],2

  pushad

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp
     push ebp
     push esi
     lea esi,[h0+h_pos+edx]
     push esi
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,C+24
     mov [esp+1C],eax
  popad

mov [p0+p_h+edi],eax



label(commands_2)
commands_2:

label(commands_skip)
commands_skip:
       popad
       sub esp,144
originalcode:
mov eax,[subrosadedicated.exe+8BDC4]

exit:
jmp returnhere

"subrosadedicated.exe"+604C6:
jmp newmem
returnhere:



alloc(mycode,2048)
mycode:

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
push 7FFF //randmax
fidiv dword [esp]
add esp,8
ret

label(frand5)
frand5:
call frand1
push (float)0.5
fsub [esp]
pop eax
ret
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84FD1:
mov [subrosadedicated.exe+8ED176C],ecx
//Alt: db 89 0D 6C 17 79 09
dealloc(newmem)
"subrosadedicated.exe"+604C6:
mov eax,[subrosadedicated.exe+8BDC4]
//Alt: db A1 C4 BD 94 00

dealloc(strings)
dealloc(tmpbuffer)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>22</ID>
              <Description>"pile1_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6500+20+14*0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"pile1_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6500+20+14*0+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"pile1_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6500+20+14*0+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>25</ID>
              <Description>"pile1_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6500+20+14*0+C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>24</ID>
              <Description>"pile1_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6500+20+14*0+10</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>26</ID>
              <Description>"pile2_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6534</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>27</ID>
              <Description>"pile2_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6538</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"pile2_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F653C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>29</ID>
              <Description>"pile2_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6540</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>30</ID>
              <Description>"pile2_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6544</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"pile3_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6548</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"pile3_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F654C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"pile3_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6550</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>34</ID>
              <Description>"pile3_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6554</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>35</ID>
              <Description>"pile3_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6558</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>37</ID>
              <Description>"pile4_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F655C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>38</ID>
              <Description>"pile4_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6560</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>39</ID>
              <Description>"pile4_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6564</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>40</ID>
              <Description>"pile4_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6568</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>41</ID>
              <Description>"pile4_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F656C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>42</ID>
              <Description>"pile5_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6570</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>43</ID>
              <Description>"pile5_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6574</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>44</ID>
              <Description>"pile5_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6578</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>45</ID>
              <Description>"pile5_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F657C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>46</ID>
              <Description>"pile5_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6580</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>47</ID>
              <Description>"pile6_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6584</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>48</ID>
              <Description>"pile6_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6588</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>49</ID>
              <Description>"pile6_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F658C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"pile6_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6590</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"pile6_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F6594</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"pile7_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F6598</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"pile7_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F659C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>54</ID>
              <Description>"pile7_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65A0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>55</ID>
              <Description>"pile7_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65A4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"pile7_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65A8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"pile8_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65AC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>58</ID>
              <Description>"pile8_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65B0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"pile8_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65B4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>60</ID>
              <Description>"pile8_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65B8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"pile8_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65BC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>62</ID>
              <Description>"pile9_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65C0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>63</ID>
              <Description>"pile9_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65C4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"pile9_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65C8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"pile9_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65CC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>66</ID>
              <Description>"pile9_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65D0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>67</ID>
              <Description>"pile10_amount"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65D4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>68</ID>
              <Description>"pile10_item"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>subrosadedicated.exe+80F65D8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>69</ID>
              <Description>"pile10_x"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65DC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>70</ID>
              <Description>"pile10_y"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65E0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>71</ID>
              <Description>"pile10_z"</Description>
              <VariableType>Float</VariableType>
              <Address>subrosadedicated.exe+80F65E4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"---structs"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"human"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+5312C4+3540*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"vehicle"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+80F66E0+50DC*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"player"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+13841600+381C*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"corp"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8ED17F4+15e4*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"item type"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+192D1560+D88*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"item"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8F011A0+214*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>76</ID>
          <Description>"rigidbody"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+8F850+AC*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"net event?"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+94BA7E0+80*0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"connection?"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>subrosadedicated.exe+1DF6A800+2118c*0</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>79</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//define(scale,0.04)
//define(scale,0.1)
define(scale,0.11)
{define(pos_x,1285.9)
define(pos_y,115.8)
define(pos_z,1572.1)}
define(pos_x,1126.9)
define(pos_y,24.7)
define(pos_z,1703.1)
{define(pos_x,1165.0)
define(pos_y,34.4)
define(pos_z,1217.5)
define(swap_xz,0)}
{define(pos_x,1161.4)
define(pos_y,47.6)
define(pos_z,1464.2)
define(swap_xz,0)}

define(explosion_particles_func,subrosadedicated.exe+1C190)
define(splash_particles_func,subrosadedicated.exe+1BEC0)

[ENABLE]







alloc(strings,2048)
strings:
{label(s_filepath)
s_filepath:
db 's' 'p' 'h' 'e' 'r' 'e' '.' 's' 'r' 'p' 'c' 0
//db 'h' 'a' 'p' 'p' 'y' 31 '.' 's' 'r' 'p' 'c' 0
}
label(s_rp)
s_rp:
db 'r' '+' 0

alloc(mydata0,0)
mydata0:
//alloc(mydata,163840)
alloc(mydata,65536)
//loadbinary(mydata,sphere.srpc)
//loadbinary(mydata,happy3.srpc)
loadbinary(mydata,teapot.srpc)

mydata:
define(model_loaded,mydata+0)
define(current_vertex,mydata+4)
define(total_vertices,mydata+8)
define(model_data,mydata+C)

alloc(mycode,4096)
mycode:

label(pcprint_func)
pcprint_func:

cmp [model_loaded],1
je pcprint_print
//---------------- loading
{
push s_rp
push s_filepath
call msvcrt.fopen //fopen(filepath, "r+")
add esp,8
push eax

push 4
push 1
lea eax,[total_vertices]
push eax
call msvcrt.fread
add esp,C

pop eax
xor ebx,ebx
mov ecx,[total_vertices]
label(vertex_loading_loop)
vertex_loading_loop:
 dec ecx
   push ecx
   push ebx
   push eax

push #24
push 1
lea edx,[model_data+ebx]
push edx
call msvcrt.fread
add esp,C

   pop eax
   pop ebx
   add ebx,#24
   pop ecx
cmp ecx,0
jge vertex_loading_loop
push eax

call msvcrt.fclose
add esp,4
}
mov [model_loaded],1
jmp pcprint_ret
label(pcprint_print)
pcprint_print:
//----------------- printing

mov edx,[total_vertices]
cmp [current_vertex],edx
jge pcprint_ret

push (float)scale
push (float)pos_z
push (float)pos_y
push (float)pos_x
mov ebp,esp

mov ecx,[current_vertex]
imul ecx,#24

  push [model_data+8+ecx]
  push [model_data+4+ecx]
  push [model_data+0+ecx]
     fld [ebp+C]
     fmul [esp+0]
       //fchs
     fadd [ebp+0]
     fstp [esp+0]
       fld [ebp+C]
       fmul [esp+4]
       fadd [ebp+4]
       fstp [esp+4]
     fld [ebp+C]
     fmul [esp+8]
        //fchs
     fadd [ebp+8]
     fstp [esp+8]
  mov esi,esp

  push [model_data+14+ecx]
  push [model_data+10+ecx]
  push [model_data+C+ecx]
  mov edi,esp

push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C

{
push (float)1572.1
push (float)116.8
push (float)1278.0
mov esi,esp
   push (float)3.0
   push (float)5.0
   push (float)-2.0
   mov edi,esp
push edi
push esi
push 0
push 0
call splash_particles_func
add esp,10
add esp,C+C
}


inc [current_vertex]
add esp,10
label(pcprint_ret)
pcprint_ret:
ret



//--- state 2 timer ---

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
        pushad
call pcprint_func
        popad
originalcode:
mov [subrosadedicated.exe+8ED176C],ebx

exit:
jmp returnhere

"subrosadedicated.exe"+85011:
jmp newmem
nop
returnhere:

//--- state 1 timer ---

alloc(newmem5,2048)
label(returnhere5)
label(originalcode5)
label(exit5)

newmem5:
        pushad
call pcprint_func
        popad
originalcode5:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74

exit5:
jmp returnhere5

"subrosadedicated.exe"+84A56:
jmp newmem5
nop
returnhere5:

//--- round reset ---

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:

mov [current_vertex],0

originalcode2:
mov [subrosadedicated.exe+8ED1774],eax

exit2:
jmp returnhere2

"subrosadedicated.exe"+7A8F8:
jmp newmem2
returnhere2:


[DISABLE]
dealloc(newmem5)
"subrosadedicated.exe"+84A56:
cmp [esp+20],edi
jne subrosadedicated.exe+84A74
//Alt: db 39 7C 24 20 75 18
dealloc(newmem2)
"subrosadedicated.exe"+7A8F8:
mov [subrosadedicated.exe+8ED1774],eax
//Alt: db A3 74 17 1B 09
dealloc(newmem)
"subrosadedicated.exe"+85011:
mov [subrosadedicated.exe+8ED176C],ebx
//Alt: db 89 1D 6C 17 1B 09

dealloc(mycode)
dealloc(mydata)
dealloc(strings)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>105</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(v0,subrosadedicated.exe+80F66E0)
define(v_engine,8)
define(v_hp,C)
define(v_key,20)
define(v_body,24)
define(v_engine_pos,B0)
define(v_axis_h,364C)
define(v_axis_v,3654)
define(vs,50DC)

define(p0,subrosadedicated.exe+13841600)
define(p_admin,34)
define(p_team,74)
define(p_h,88)
define(ps,381C)

define(h0,subrosadedicated.exe+5312C4)
define(h_car,28)
define(h_pos,74)
define(hs,3540)

define(human_spawn_func,subrosadedicated.exe+74760)
               //(float* position, float* rotation, int player_id)

define(vehicle_spawn_func,subrosadedicated.exe+48860)

define(create_player_func,subrosadedicated.exe+31B50)

[ENABLE]



alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
         pushad
            push eax
   call create_player_func
   mov ebp,eax
            pop eax
push eax
imul edx,eax,vs

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp
     push ebp
     push esi
     lea esi,[v0+v_engine_pos+edx]
     push esi
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,8
     pop ebp
     add esp,24

imul ebp,ps
mov [p0+p_h+ebp],eax
mov [p0+2D04+ebp],1
mov [p0+3794+ebp],1
mov [p0+37AC+ebp],1
mov [p0+37A8+ebp],2
mov [p0+p_team+ebp],2

pop edx
imul eax,hs
mov [h0+h_car+eax],edx

//...

         popad
originalcode:
fld qword ptr [subrosadedicated.exe+88978]

exit:
jmp returnhere

"subrosadedicated.exe"+57A74:
jmp newmem
nop
returnhere:




 
 
[DISABLE]
dealloc(newmem)
"subrosadedicated.exe"+57A74:
fld qword ptr [subrosadedicated.exe+88978]
//Alt: db DD 05 78 89 AD 00


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>106</ID>
      <Description>"piles + /bot"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(mydata,subrosadedicated.exe+80F6500)
define(pile0,mydata+20)
define(pile_cnt,0)
define(pile_it,4)
define(pile_pos,8)
define(piles,14)
define(piles_max,#10)

define(p0,subrosadedicated.exe+13841600)
define(p_admin,34)
define(p_team,74)
define(p_h,88)
define(ps,381C)

define(h0,subrosadedicated.exe+5312C4)
define(h_pos,74)
define(hs,3540)

define(item_spawn_func,subrosadedicated.exe+44880)
define(message_func,subrosadedicated.exe+7450)

define(game_state,subrosadedicated.exe+8ED1764)
define(game_timer,subrosadedicated.exe+8ED176C)


define(create_player_func,subrosadedicated.exe+31B50)

define(human_spawn_func,subrosadedicated.exe+74760)
               //(float* position, float* rotation, int player_id)

[ENABLE]

alloc(tmpbuffer,4096)
alloc(strings,2048)
strings:
label(s_pos)
s_pos:
db '/' 'p' 'o' 's' 0
label(s_posformat)
s_posformat:
db 'p' 'o' 's' ':' ' ' '%' 'f' ',' ' ' '%' 'f' ',' ' ' '%' 'f' 0
label(s_bot)
s_bot:
db '/' 'b' 'o' 't' 0

//-------- state 1 -&gt; 2 --------

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
           pushad

mov ecx,piles_max
xor ebx,ebx
label(piles_loop)
piles_loop:
    push ecx
    push ebx
mov edx,[pile0+pile_cnt+ebx]
cmp edx,0
jle piles_next

label(pile_items_loop)
pile_items_loop:
   push edx

push (float)0.0
push (float)0.0
push (float)1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)-1.0
push (float)0.0
push (float)0.0
mov esi,esp  //orientation

push [pile0+pile_pos+8+ebx]
push [pile0+pile_pos+4+ebx]
push [pile0+pile_pos+0+ebx]
     pushad
       call frand5
         fadd [esp+28]
         fstp [esp+28]
       //call frand5
       //  fadd [esp+24]
       //  fstp [esp+24]
       call frand5
         fadd [esp+20]
         fstp [esp+20]
     popad
mov ebp,esp //position

push esi
push 0 //float* velocity
push ebp
push [pile0+pile_it+ebx] //type
call item_spawn_func
add esp,10+30

   pop edx
dec edx
cmp edx,0
jg pile_items_loop

label(piles_next)
piles_next:
    pop ebx
    pop ecx
add ebx,piles
dec ecx
cmp ecx,0
jg piles_loop


           popad
originalcode2:
mov [subrosadedicated.exe+8ED176C],ecx

exit2:
jmp returnhere2

"subrosadedicated.exe"+84FD1:
jmp newmem2
nop
returnhere2:


//-------- commmands -----------

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
       add esp,144
       pushad
//esi = *msg
//edi = p
imul ebx,edi,ps //p*
cmp [p0+p_admin+ebx],0
je commands_skip

//-------------- /pos
  push edi
push 4
push s_pos
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_1

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul eax,ecx,hs //h*
  sub esp,18
  fld [h0+h_pos+0+eax]
  fld [h0+h_pos+4+eax]
  fld [h0+h_pos+8+eax]
  fstp qword [esp+10]
  fstp qword [esp+8]
  fstp qword [esp+0]

  push s_posformat
  push tmpbuffer
  call msvcrt.sprintf
  add esp,20

  push 0
  push -1
  push tmpbuffer
  push 0
  call message_func
  add esp,10

//-------------- /bot
label(commands_1)
commands_1:
  push edi
push 4
push s_bot
push esi
call msvcrt.strncmp
pop esi
add esp,8
  pop edi
test eax,eax
jne commands_2

imul ebx,edi,ps //p*
mov ecx,[p0+p_h+ebx] //h
cmp ecx,-1
je commands_skip
imul edx,ecx,hs //h*

  pushad
    call create_player_func
    mov [esp+1C],eax
  popad
mov ebp,eax //p2

imul edi,ebp,ps
mov [p0+2D04+edi],1
mov [p0+3794+edi],1
mov [p0+37AC+edi],1
mov [p0+37A8+edi],2
mov [p0+p_team+edi],2

  pushad

push (float)0.0
push (float)0.0
push (float)-1.0
  push (float)0.0
  push (float)1.0
  push (float)0.0
push (float)1.0
push (float)0.0
push (float)0.0
mov esi,esp
     push ebp
     push esi
     lea esi,[h0+h_pos+edx]
     push esi
     call human_spawn_func
               //(float* position, float* rotation, int player_id)
     add esp,C+24
     mov [esp+1C],eax
  popad

mov [p0+p_h+edi],eax



label(commands_2)
commands_2:

label(commands_skip)
commands_skip:
       popad
       sub esp,144
originalcode:
mov eax,[subrosadedicated.exe+8BDC4]

exit:
jmp returnhere

"subrosadedicated.exe"+604C6:
jmp newmem
returnhere:



alloc(mycode,2048)
mycode:

label(frand1)
frand1:
call msvcrt.rand
push eax
fild dword [esp]
push 7FFF //randmax
fidiv dword [esp]
add esp,8
ret

label(frand5)
frand5:
call frand1
push (float)0.5
fsub [esp]
pop eax
ret
 
[DISABLE]
dealloc(newmem2)
"subrosadedicated.exe"+84FD1:
mov [subrosadedicated.exe+8ED176C],ecx
//Alt: db 89 0D 6C 17 79 09
dealloc(newmem)
"subrosadedicated.exe"+604C6:
mov eax,[subrosadedicated.exe+8BDC4]
//Alt: db A1 C4 BD 94 00

dealloc(strings)
dealloc(tmpbuffer)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>133</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc(mydata,1024)
mydata:
db 'M' 'o' 'n' 's'  'o' 't' 'a' 00  00 00 00 00  'm' 'o' 'n' 's' 00 00 00 00

alloc(mycode,4096)
mycode:

{mov [mydata+0],#1936617293 //"Monsota"
mov [mydata+4],#6386799
mov [mydata+8],0

mov [mydata+C],#1886545252 //"derp"
mov [mydata+10],0}


lea eax,[mydata+C]
push eax
lea eax,[mydata+0]
push eax
call strstri_func
mov [mydata+1C],#666
mov [mydata+20],eax
mov [mydata+24],#666
add esp,8

push 'M'
call msvcrt.tolower
add esp,4
mov [mydata+28],eax

ret

createThread(mycode)


//int strstri(const char* str, const char* substr)
label(strstri_func)
strstri_func:
        push    ebp
        mov     ebp, esp
        sub     esp, 8
        push    esi
        mov     eax, DWORD PTR [ebp+8]
        mov     DWORD PTR [ebp-4], eax
        mov     ecx, DWORD PTR [ebp+C]
        mov     DWORD PTR [ebp-8], ecx
label(LN2_strstri)
LN2_strstri:
        mov     edx, DWORD PTR [ebp-4]
        movsx   eax, BYTE PTR [edx]
        test    eax, eax
        je      SHORT LN3_strstri
        mov     ecx, DWORD PTR [ebp-8]
        movsx   edx, BYTE PTR [ecx]
        test    edx, edx
        je      SHORT LN3_strstri
        mov     eax, DWORD PTR [ebp-4]
        movsx   ecx, BYTE PTR [eax]
            pushad
        push    ecx
        call    msvcrt.tolower
            mov [esp+1C],eax
        add     esp, 4
            popad
        mov     esi, eax
        mov     edx, DWORD PTR [ebp-8]
        movsx   eax, BYTE PTR [edx]
            pushad
        push    eax
        call    msvcrt.tolower
            mov [esp+1C],eax
        add     esp, 4
            popad
        cmp     esi, eax
        je      SHORT LN4_strstri
        xor     eax, eax
        jmp     SHORT LN1_strstri
label(LN4_strstri)
LN4_strstri:
        mov     ecx, DWORD PTR [ebp-4]
        add     ecx, 1
        mov     DWORD PTR [ebp-4], ecx
        mov     edx, DWORD PTR [ebp-8]
        add     edx, 1
        mov     DWORD PTR [ebp-8], edx
        jmp     SHORT LN2_strstri
label(LN3_strstri)
LN3_strstri:
        mov     eax, 1
label(LN1_strstri)
LN1_strstri:
        pop     esi
        mov     esp, ebp
        pop     ebp
        ret     0

{
define(strstri_local_p1,-8)
define(strstri_local_p0,-4)
define(strstri_arg_str,8)
define(strstri_arg_substr,C)
        push    ebp
        mov     ebp, esp
        sub     esp, 8
        push    esi
        mov     eax, DWORD PTR [ebp+strstri_arg_str]
        mov     DWORD PTR [ebp+strstri_local_p0], eax
        mov     ecx, DWORD PTR [ebp+strstri_arg_substr]
        mov     DWORD PTR [ebp+strstri_local_p1], ecx
label(LN2_strstri)
LN2_strstri:
        mov     edx, DWORD PTR [ebp+strstri_local_p0]
        movsx   eax, BYTE PTR [edx]
        test    eax, eax
        je      SHORT LN3_strstri
        mov     ecx, DWORD PTR [ebp+strstri_local_p1]
        movsx   edx, BYTE PTR [ecx]
        test    edx, edx
        je      SHORT LN3_strstri
        mov     eax, DWORD PTR [ebp+strstri_local_p0]
        movsx   ecx, BYTE PTR [eax]
        push    ecx
        call    msvcrt.tolower
        add     esp, 4
        mov     esi, eax
        mov     edx, DWORD PTR [ebp+strstri_local_p1]
        movsx   eax, BYTE PTR [edx]
        push    eax
        call    msvcrt.tolower
        add     esp, 4
        cmp     esi, eax
        je      SHORT LN4_strstri
        xor     eax, eax
        jmp     SHORT LN1_strstri
label(LN4_strstri)
LN4_strstri:
        mov     ecx, DWORD PTR [ebp+strstri_local_p0]
        add     ecx, 1
        mov     DWORD PTR [ebp+strstri_local_p0], ecx
        mov     edx, DWORD PTR [ebp+strstri_local_p1]
        add     edx, 1
        mov     DWORD PTR [ebp+strstri_local_p1], edx
        jmp     SHORT LN2_strstri
label(LN3_strstri)
LN3_strstri:
        mov     eax, 1
label(LN1_strstri)
LN1_strstri:
        pop     esi
        mov     esp, ebp
        pop     ebp
        ret     0
}

 
[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>152</ID>
      <Description>"weekly"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>subrosadedicated.exe+8F00440</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>153</ID>
      <Description>"startcash"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>subrosadedicated.exe+8F0043C</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="human" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="13" DisplayMethod="Unsigned Integer"/>
        <Element Offset="52" Vartype="4 Bytes" Bytesize="4" Description="health0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" Description="elim" DisplayMethod="Unsigned Integer"/>
        <Element Offset="60" Vartype="4 Bytes" Bytesize="4" RLECount="14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="116" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="124" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="144" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="148" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="172" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="176" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="4 Bytes" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="256" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="260" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="264" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="284" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="300" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="320" Vartype="4 Bytes" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="348" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Hexadecimal"/>
        <Element Offset="356" Vartype="4 Bytes" Bytesize="4" RLECount="14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="412" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="428" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="432" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="436" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="440" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="452" Vartype="Float" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="504" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="508" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="512" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="516" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="520" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="528" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="532" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="536" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="544" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="548" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="560" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="584" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="588" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="590" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="592" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="596" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="600" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="604" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="608" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="612" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="616" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="624" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="632" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="640" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="648" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="652" Vartype="4 Bytes" Bytesize="4" RLECount="22" DisplayMethod="Unsigned Integer"/>
        <Element Offset="740" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="744" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="748" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="752" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="756" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="760" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="764" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="768" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="772" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="776" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="784" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="796" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="800" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="808" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="816" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="824" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="832" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="836" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="848" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="872" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="876" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="878" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="880" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="884" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="892" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="896" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="900" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="904" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="912" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="920" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="928" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="936" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="944" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="948" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="952" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="956" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="960" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="964" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="968" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="972" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="980" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="988" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1028" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1032" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1036" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1040" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1044" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1048" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1052" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1056" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="1060" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1064" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1072" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1080" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1084" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1088" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1096" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1104" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1112" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1120" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1124" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1136" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1160" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1164" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1166" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1168" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1172" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1176" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1184" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1188" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1192" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1200" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1208" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1216" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1224" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1232" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1236" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1240" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1244" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1248" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1252" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1256" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1260" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1264" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="1268" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1276" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1316" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1320" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1324" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1328" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1332" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1336" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1340" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1344" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="1348" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1352" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1360" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1368" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1372" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1376" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1384" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1392" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1400" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1412" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1424" Vartype="Float" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1460" Vartype="Byte" Bytesize="1" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1472" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1480" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1488" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1496" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1504" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1512" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1520" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1524" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1532" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1536" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1540" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1548" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1552" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="1556" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1564" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1604" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1608" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1612" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1616" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1620" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1624" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1628" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1632" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1636" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1640" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1648" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1656" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1660" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1668" Vartype="String" Bytesize="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1674" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1676" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1680" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1681" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1685" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1688" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1696" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1700" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1712" Vartype="Float" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1740" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1744" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1748" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1752" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1756" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1760" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1764" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1768" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1776" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1784" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1792" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1800" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1804" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1808" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1812" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1820" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1840" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1848" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1852" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1892" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1896" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1900" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1904" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1908" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1912" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1916" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1920" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1924" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="1928" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1936" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1944" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1948" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1950" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1952" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1956" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1960" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1976" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1980" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1984" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1988" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2000" Vartype="Float" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2028" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2032" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2036" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2040" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2044" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2048" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2052" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2056" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2064" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2072" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2080" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2088" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2096" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2100" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2104" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2108" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2112" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2116" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2120" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2136" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2140" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2184" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2188" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2192" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2196" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2200" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2204" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2212" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2216" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2224" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2232" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2236" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2241" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2245" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2250" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2252" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2264" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2268" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="2272" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2277" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2280" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2288" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2312" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2316" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2320" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2324" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2336" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2340" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2344" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2352" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2360" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2368" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2376" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2384" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="2388" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2392" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2396" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2400" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2404" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2409" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2412" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2416" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2420" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2424" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2428" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2468" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2472" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2476" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2480" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2484" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2488" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2492" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2496" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2500" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2504" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2512" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2528" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2531" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2533" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2536" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2544" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2552" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2564" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2576" Vartype="Float" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2604" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2608" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2612" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2616" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2620" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2624" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2628" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2632" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2640" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2648" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2656" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2664" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2680" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2684" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2696" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2700" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2708" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2716" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2756" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2760" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2764" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2768" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2772" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2776" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2780" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2784" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2788" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2792" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2800" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2816" Vartype="Float" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2852" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2864" Vartype="Float" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2892" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2896" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2900" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2904" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2908" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2912" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2916" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2920" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2928" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2936" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2944" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2952" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2964" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2968" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2972" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2980" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2984" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2992" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2996" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3004" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3044" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3048" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3052" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3056" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3060" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3064" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3068" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3072" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3076" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3080" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3088" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3096" Vartype="Float" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3132" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3136" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3140" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3152" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3176" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3184" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3188" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3200" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3204" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3208" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3216" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3224" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3232" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3240" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3256" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3260" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3264" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3268" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3272" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3276" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3280" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3284" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3288" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3292" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3332" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3336" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3340" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3344" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3348" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3352" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3356" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3360" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3364" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3368" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3376" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3384" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3396" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3400" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3420" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3424" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3428" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3440" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3464" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3465" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3469" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3473" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3477" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3478" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3480" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3484" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3488" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3492" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3496" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3504" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3512" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3520" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3528" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3536" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3540" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3544" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3548" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3552" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3556" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3560" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3568" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3576" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3584" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3588" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3592" Vartype="4 Bytes" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3620" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3624" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3628" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3632" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3636" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3640" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3644" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3648" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3652" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3656" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3664" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3672" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3676" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3677" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3681" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3684" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3688" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3696" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3704" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3708" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3712" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3716" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3728" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3752" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3753" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3757" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3761" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3765" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3766" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3768" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3772" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3776" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3780" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3784" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3792" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3800" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3808" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3816" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3820" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3824" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3828" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3832" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3836" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3840" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3844" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3848" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3872" Vartype="4 Bytes" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3908" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3912" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3916" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3920" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3924" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3928" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3932" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="3936" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3940" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3944" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3952" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3960" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3964" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3968" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3972" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3976" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3979" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3981" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3984" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3988" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3992" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3996" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3999" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4001" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4004" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4016" Vartype="Float" Bytesize="4" RLECount="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4048" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4052" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4056" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4060" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4064" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4068" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4072" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4080" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4088" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4096" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4104" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4120" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4124" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4128" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4136" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4140" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4144" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4148" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4152" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4153" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4157" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4160" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4164" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4168" Vartype="4 Bytes" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4196" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4200" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4204" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4208" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4212" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4216" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4220" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4224" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="4228" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4232" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4240" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4248" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4252" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4256" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4260" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4264" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4276" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4280" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4284" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4288" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4292" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4304" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4328" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4329" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4333" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4337" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4341" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4342" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4344" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4348" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4352" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4356" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4360" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4368" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4376" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4384" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4392" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4400" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4404" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4408" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4412" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4416" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4420" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4424" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4428" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4440" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4448" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4452" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4456" Vartype="4 Bytes" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4484" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4488" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4492" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4496" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4500" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4504" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4508" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="4512" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4516" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4520" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4528" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4536" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4540" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4541" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4546" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4548" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4552" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4560" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4564" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4568" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4572" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4576" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4580" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4592" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4616" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4617" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4621" Vartype="Byte" Bytesize="1" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4625" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4629" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4630" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4632" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4636" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4640" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4644" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4648" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4656" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4664" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4672" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4680" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4684" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4688" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4692" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4696" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4700" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4701" Vartype="String" Bytesize="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4710" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4712" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4736" Vartype="4 Bytes" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4772" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4776" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4780" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4784" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4788" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4792" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4796" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4800" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4804" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4808" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4816" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4824" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4828" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4832" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4837" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4840" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4848" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4852" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4856" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4860" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4864" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4868" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4880" Vartype="Float" Bytesize="4" RLECount="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4912" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4916" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4920" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4924" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4928" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4932" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4936" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4944" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4952" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4960" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4968" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4984" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4988" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4992" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5000" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5005" Vartype="Byte" Bytesize="1" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5012" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5016" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5020" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5024" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5028" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5032" Vartype="4 Bytes" Bytesize="4" RLECount="17" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5100" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5104" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5148" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5152" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5196" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5200" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5240" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5244" Vartype="4 Bytes" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5292" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5296" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5340" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5344" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5384" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5388" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5432" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="5436" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5440" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5480" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="5484" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5488" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5528" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5536" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5580" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5584" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5628" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5632" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5672" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5680" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5720" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="5724" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5728" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5768" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="5772" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5776" Vartype="4 Bytes" Bytesize="4" RLECount="1458" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11608" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11612" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11616" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11624" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11628" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11632" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11636" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11640" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11644" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11648" Vartype="String" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11652" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11656" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11676" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11680" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11684" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11692" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11696" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11708" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11716" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11720" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11724" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11728" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11732" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11736" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11740" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11760" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11764" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="11768" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11772" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11776" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11780" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="11784" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11796" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11800" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="11804" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11808" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11812" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11816" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="11820" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11828" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11836" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11840" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11844" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11848" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11852" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11856" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11860" Vartype="4 Bytes" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11880" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11888" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11892" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11900" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11904" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11908" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11912" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11984" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="11992" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12004" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12008" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12012" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12016" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12020" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12024" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12028" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12036" Vartype="Double" Bytesize="8" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12076" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12084" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12092" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12096" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12100" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12108" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12112" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12116" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12120" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12192" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12200" Vartype="Float" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12252" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12260" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12268" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12276" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12284" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12300" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12316" Vartype="4 Bytes" Bytesize="4" RLECount="17" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12384" Vartype="4 Bytes" Bytesize="4" Description="inv" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12388" Vartype="4 Bytes" Bytesize="4" RLECount="73" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12680" Vartype="4 Bytes" Bytesize="4" Description="grab0" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12684" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12724" Vartype="4 Bytes" Bytesize="4" Description="grab1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12728" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12752" Vartype="Float" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12800" Vartype="4 Bytes" Bytesize="4" RLECount="35" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12940" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12948" Vartype="4 Bytes" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12968" Vartype="4 Bytes" Bytesize="4" Description="bleeding" DisplayMethod="Unsigned Integer"/>
        <Element Offset="12972" Vartype="4 Bytes" Bytesize="4" RLECount="33" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13104" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13112" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13124" Vartype="4 Bytes" Bytesize="4" Description="message system" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13128" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13136" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13140" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13180" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13188" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13228" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13236" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13276" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13284" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13324" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13332" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13372" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13380" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13420" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13428" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13468" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13476" Vartype="4 Bytes" Bytesize="4" RLECount="13" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13528" Vartype="4 Bytes" Bytesize="4" Description="skin" DisplayMethod="Unsigned Integer"/>
        <Element Offset="13532" Vartype="4 Bytes" Bytesize="4" RLECount="25" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="vehicle" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="28" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="32" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="36" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="40" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="56" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="68" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="72" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="76" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="Double" Bytesize="8" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="140" Vartype="4 Bytes" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="188" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="192" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="196" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="200" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="204" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="216" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="220" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="228" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="232" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="236" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Hexadecimal"/>
        <Element Offset="244" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="248" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Hexadecimal"/>
        <Element Offset="256" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="260" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Hexadecimal"/>
        <Element Offset="268" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="284" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="288" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="292" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="4 Bytes" Bytesize="4" RLECount="3568" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14568" Vartype="Byte" Bytesize="1" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14570" Vartype="2 Bytes" Bytesize="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14572" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14576" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14588" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14592" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14596" Vartype="4 Bytes" Bytesize="4" RLECount="35" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14736" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14740" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14756" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14764" Vartype="Float" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14788" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14792" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14796" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14804" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="14808" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14812" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14816" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14820" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14824" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="14828" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14832" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14836" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="14840" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14844" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14864" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14908" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14912" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14928" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14944" Vartype="Float" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14960" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14964" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14968" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14976" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="14980" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14984" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14988" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14992" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14996" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15000" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15004" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15008" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15012" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15016" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15036" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15080" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15084" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15100" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15108" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15120" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15124" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15132" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15136" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15140" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15144" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15148" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15152" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15156" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15160" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15164" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15168" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15172" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15176" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15184" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15188" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15208" Vartype="4 Bytes" Bytesize="4" RLECount="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15252" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15256" Vartype="4 Bytes" Bytesize="4" RLECount="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15272" Vartype="Double" Bytesize="8" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15288" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15292" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15296" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15304" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15308" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15312" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15316" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15320" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15324" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15328" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15332" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15336" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15340" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15344" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15348" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15352" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15356" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="15360" Vartype="Float" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="15380" Vartype="4 Bytes" Bytesize="4" RLECount="1293" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20552" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20560" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20564" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20568" Vartype="Float" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20616" Vartype="4 Bytes" Bytesize="4" RLECount="21" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="item type" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="40" Vartype="String" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="48" Vartype="4 Bytes" Bytesize="4" RLECount="14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="116" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Float" Bytesize="4" RLECount="39" DisplayMethod="Unsigned Integer"/>
        <Element Offset="276" Vartype="4 Bytes" Bytesize="4" RLECount="797" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="player" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4" Vartype="String" Bytesize="13" DisplayMethod="Unsigned Integer"/>
        <Element Offset="17" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20" Vartype="4 Bytes" Bytesize="4" RLECount="10" DisplayMethod="Unsigned Integer"/>
        <Element Offset="60" Vartype="4 Bytes" Bytesize="4" Description="acc" DisplayMethod="Unsigned Integer"/>
        <Element Offset="64" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="76" Vartype="4 Bytes" Bytesize="4" Description="cash" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="136" Vartype="4 Bytes" Bytesize="4" Description="h" DisplayMethod="Unsigned Integer"/>
        <Element Offset="140" Vartype="4 Bytes" Bytesize="4" RLECount="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="164" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="168" Vartype="4 Bytes" Bytesize="4" RLECount="9" DisplayMethod="Unsigned Integer"/>
        <Element Offset="204" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="208" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="212" Vartype="4 Bytes" Bytesize="4" RLECount="15" DisplayMethod="Unsigned Integer"/>
        <Element Offset="272" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="280" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="284" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="4 Bytes" Bytesize="4" RLECount="122" DisplayMethod="Unsigned Integer"/>
        <Element Offset="792" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="803" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="804" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="876" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="887" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="888" Vartype="4 Bytes" Bytesize="4" RLECount="39" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1044" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1055" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1056" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1128" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1139" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1140" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1212" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1223" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1224" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1296" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1307" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1308" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1380" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1391" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1392" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1464" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1475" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1476" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1548" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1559" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1560" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1632" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1643" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1644" Vartype="4 Bytes" Bytesize="4" RLECount="60" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1884" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1895" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="1896" Vartype="4 Bytes" Bytesize="4" RLECount="39" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2052" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2063" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2064" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2136" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2147" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2148" Vartype="4 Bytes" Bytesize="4" RLECount="81" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2472" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2483" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2484" Vartype="4 Bytes" Bytesize="4" RLECount="81" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2808" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2819" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2820" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2892" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2903" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="2904" Vartype="4 Bytes" Bytesize="4" RLECount="102" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3312" Vartype="String" Bytesize="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3319" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3320" Vartype="4 Bytes" Bytesize="4" RLECount="124" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3816" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3827" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="3828" Vartype="4 Bytes" Bytesize="4" RLECount="81" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4152" Vartype="String" Bytesize="5" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4157" Vartype="Byte" Bytesize="1" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4160" Vartype="4 Bytes" Bytesize="4" RLECount="40" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4320" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4331" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4332" Vartype="4 Bytes" Bytesize="4" RLECount="186" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5076" Vartype="String" Bytesize="7" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5083" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5084" Vartype="4 Bytes" Bytesize="4" RLECount="61" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5328" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5339" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5340" Vartype="4 Bytes" Bytesize="4" RLECount="18" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5412" Vartype="String" Bytesize="11" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5423" Vartype="Byte" Bytesize="1" DisplayMethod="Unsigned Integer"/>
        <Element Offset="5424" Vartype="4 Bytes" Bytesize="4" RLECount="2153" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14036" Vartype="Float" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="14084" Vartype="4 Bytes" Bytesize="4" RLECount="70" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="item" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="24" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="28" Vartype="4 Bytes" Bytesize="4" RLECount="14" DisplayMethod="Unsigned Integer"/>
        <Element Offset="84" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="88" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="92" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="96" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="100" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="104" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="108" Vartype="4 Bytes" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="120" Vartype="Float" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="128" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="132" Vartype="4 Bytes" Bytesize="4" RLECount="6" DisplayMethod="Unsigned Integer"/>
        <Element Offset="156" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="160" Vartype="Double" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="168" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="172" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="176" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="180" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="184" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="188" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="192" Vartype="4 Bytes" Bytesize="4" RLECount="25" DisplayMethod="Unsigned Integer"/>
        <Element Offset="292" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="300" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="304" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="308" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="312" Vartype="Float" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="316" Vartype="4 Bytes" Bytesize="4" RLECount="54" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
    <Structure Name="connection?" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="8" Vartype="4 Bytes" Bytesize="4" RLECount="2" DisplayMethod="Unsigned Integer"/>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="player" DisplayMethod="Unsigned Integer"/>
        <Element Offset="20" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="24" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="28" Vartype="4 Bytes" Bytesize="4" RLECount="12" DisplayMethod="Unsigned Integer"/>
        <Element Offset="76" Vartype="Pointer" Bytesize="8" DisplayMethod="Unsigned Integer"/>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" RLECount="29250" DisplayMethod="Unsigned Integer"/>
        <Element Offset="117080" Vartype="Float" Bytesize="4" RLECount="3" DisplayMethod="Unsigned Integer"/>
        <Element Offset="117092" Vartype="4 Bytes" Bytesize="4" RLECount="4616" DisplayMethod="Unsigned Integer"/>
        <Element Offset="135556" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Hexadecimal"/>
        <Element Offset="135560" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer"/>
      </Elements>
    </Structure>
  </Structures>
</CheatTable>
